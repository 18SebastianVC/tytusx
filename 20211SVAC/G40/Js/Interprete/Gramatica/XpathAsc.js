/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XpathAsc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,26],$V3=[1,27],$V4=[1,28],$V5=[1,29],$V6=[1,10],$V7=[1,11],$V8=[1,12],$V9=[1,13],$Va=[1,14],$Vb=[1,15],$Vc=[1,16],$Vd=[1,17],$Ve=[1,18],$Vf=[1,19],$Vg=[1,20],$Vh=[1,21],$Vi=[1,22],$Vj=[1,23],$Vk=[1,24],$Vl=[1,25],$Vm=[5,10,12,13,15,16,17,18,20,21,22,27,28,29,30,31,32,33,34,35,36,37,38],$Vn=[18,20,21,22,27,28,29,30,31,32,33,34,35,36,37,38],$Vo=[5,10,12,13,15,16,17,18,20,21,22,25,27,28,29,30,31,32,33,34,35,36,37,38,41,43,45,47,48,49,50,52,54,55,56,57,59],$Vp=[2,24],$Vq=[1,37],$Vr=[2,18],$Vs=[1,74],$Vt=[1,63],$Vu=[1,65],$Vv=[1,66],$Vw=[1,75],$Vx=[1,64],$Vy=[1,67],$Vz=[1,68],$VA=[1,69],$VB=[1,70],$VC=[1,71],$VD=[1,73],$VE=[25,43,45],$VF=[1,87],$VG=[1,86],$VH=[1,85],$VI=[1,88],$VJ=[1,89],$VK=[20,25,41,43,45,47,48,49,50,52,54,55,56,57,59],$VL=[1,102],$VM=[1,103],$VN=[25,41,43,45,47,48,49,50,52,54,55,59];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"SETS":4,"EOF":5,"SET":6,"SELECTORES":7,"EXPRESION":8,"AXES":9,"tk_dobleslash":10,"OTRO_SELECTOR":11,"tk_slash":12,"tk_dpds":13,"AGREGAR_SELECTOR":14,"tk_pds":15,"tk_dps":16,"tk_ps":17,"tk_identificador":18,"PREDICADO":19,"tk_asterisco":20,"tk_texto":21,"tk_node":22,"tk_corchetea":23,"EXPRESION_FILTRO":24,"tk_corchetec":25,"EXPRESION_LOGICA":26,"tk_ancestorself":27,"tk_ancestor":28,"tk_child":29,"tk_descendantself":30,"tk_descendant":31,"tk_followingsibling":32,"tk_following":33,"tk_self":34,"tk_parent":35,"tk_precedingsibling":36,"tk_attribute":37,"tk_preceding":38,"ATRIBUTO":39,"tk_arroba":40,"tk_igual":41,"CADENA":42,"tk_and":43,"EXPRESION_RELACIONAL":44,"tk_or":45,"EXPRESION_NUMERICA":46,"tk_mayor":47,"tk_menor":48,"tk_mayorigual":49,"tk_menorigual":50,"EXPRESION_CADENA":51,"tk_noigual":52,"tk_arrobaasterisco":53,"tk_menos":54,"tk_mas":55,"tk_mod":56,"tk_division":57,"tk_parentesisa":58,"tk_parentesisc":59,"tk_entero":60,"tk_decimal":61,"tk_last":62,"tk_position":63,"tk_cadena1":64,"tk_cadena2":65,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"tk_dobleslash",12:"tk_slash",13:"tk_dpds",15:"tk_pds",16:"tk_dps",17:"tk_ps",18:"tk_identificador",20:"tk_asterisco",21:"tk_texto",22:"tk_node",23:"tk_corchetea",25:"tk_corchetec",27:"tk_ancestorself",28:"tk_ancestor",29:"tk_child",30:"tk_descendantself",31:"tk_descendant",32:"tk_followingsibling",33:"tk_following",34:"tk_self",35:"tk_parent",36:"tk_precedingsibling",37:"tk_attribute",38:"tk_preceding",40:"tk_arroba",41:"tk_igual",43:"tk_and",45:"tk_or",47:"tk_mayor",48:"tk_menor",49:"tk_mayorigual",50:"tk_menorigual",52:"tk_noigual",53:"tk_arrobaasterisco",54:"tk_menos",55:"tk_mas",56:"tk_mod",57:"tk_division",58:"tk_parentesisa",59:"tk_parentesisc",60:"tk_entero",61:"tk_decimal",62:"tk_last",63:"tk_position",64:"tk_cadena1",65:"tk_cadena2"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,1],[6,1],[6,2],[7,2],[7,1],[7,1],[7,2],[7,1],[11,2],[11,2],[11,2],[11,2],[14,1],[14,0],[8,2],[8,2],[8,2],[8,2],[19,3],[19,0],[24,1],[9,2],[9,2],[9,2],[9,2],[9,2],[9,2],[9,2],[9,2],[9,2],[9,2],[9,2],[9,2],[39,4],[26,3],[26,3],[26,1],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[51,1],[51,1],[46,2],[46,3],[46,3],[46,3],[46,3],[46,3],[46,3],[46,1],[46,1],[46,1],[46,1],[46,1],[46,1],[42,1],[42,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  /*SELECT ES EL ARREGLO DE NODOS*/
                         /*Creamos una nueva instruccion y le mandamos los nodos que debe ir a buscar*/
                        instruccion = new XPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1])
                        console.log("TODO CORRECTO :D XPATH ASC VERSION");
                        this.$ = instruccion;
                        return this.$; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3:
  this.$ = [$$[$0]]; 
break;
case 4:
         
                        nodoXPath = new NodoXpath("", TipoNodo.SELECTOR_EXPRESION, null, $$[$0-1][0], $$[$0][0], _$[$0-1].first_line, _$[$0-1].first_column);                
                        nodoaux = new NodoArbol("NODO","");
                        nodoaux.agregarHijo(new NodoArbol($$[$0-1][1],""));
                        nodoaux.agregarHijo($$[$0][1]);
                        nodoxPATHASC.agregarHijo(nodoaux);
                        this.$ = nodoXPath;
                             
break;
case 5:
     nodoXPath = new NodoXpath("", TipoNodo.EXPRESION, null, [], $$[$0][0], _$[$0].first_line, _$[$0].first_column); 
                        nodoaux = new NodoArbol("NODO","");
                        nodoaux.agregarHijo($$[$0][1]);
                        nodoxPATHASC.agregarHijo(nodoaux);
                        this.$ = nodoXPath;
                  
break;
case 6:
       nodoXPath = new NodoXpath("", TipoNodo.AXES, $$[$0][0], [], null, _$[$0].first_line, _$[$0].first_column); 
                        nodoaux = new NodoArbol("NODO","");
                        nodoaux.agregarHijo($$[$0][1]);
                        nodoxPATHASC.agregarHijo(nodoaux);
                        this.$ = nodoXPath;
                
break;
case 7:
 nodoXPath = new NodoXpath("", TipoNodo.SELECTOR_AXES, $$[$0][0], $$[$0-1][0], null, _$[$0-1].first_line, _$[$0-1].first_column); 
                        nodoaux = new NodoArbol("NODO","");
                        nodoaux.agregarHijo(new NodoArbol($$[$0-1][1],""));
                        nodoaux.agregarHijo($$[$0][1]);
                        nodoxPATHASC.agregarHijo(nodoaux);
                        this.$ = nodoXPath;
                          
break;
case 8:
 arr = [TipoSelector.DOBLE_SLASH]; 
                                          arr = arr.concat($$[$0][0]);
                                          $$[$0-1] = $$[$0-1]+""+$$[$0][1] ;
                                          this.$ = [arr,$$[$0-1]];
                                        
break;
case 9:
 this.$ = [[TipoSelector.DOBLE_SLASH],$$[$0]]; 
break;
case 10:
 this.$ = [[TipoSelector.SLASH],$$[$0]];  
break;
case 11:
  arr = [TipoSelector.SLASH] 
                                      arr = arr.concat($$[$0][0]);
                                      $$[$0-1] = $$[$0-1]+""+$$[$0][1];
                                      this.$ = [arr,$$[$0-1]]; 
break;
case 12:
 this.$ = [$$[$0][0],$$[$0][1]];   
break;
case 13:
 arr = [TipoSelector.DOSPUNTOS_DOSSLASH];
                                          arr = arr.concat($$[$0][0]);
                                          $$[$0-1] = $$[$0-1]+""+$$[$0][1];
                                          this.$ = [arr,$$[$0-1]];  
break;
case 14:
 arr = [TipoSelector.PUNTO_DOSSLASH];
                                          arr = arr.concat($$[$0][0]);
                                          $$[$0-1] = $$[$0-1]+""+$$[$0][1];
                                          this.$ = [arr,$$[$0-1]];  
break;
case 15:
 arr = [TipoSelector.DOSPUNTOS_SLASH];
                                          arr = arr.concat($$[$0][0]);
                                          $$[$0-1] = $$[$0-1]+""+$$[$0][1];
                                          this.$ = [arr,$$[$0-1]];  
break;
case 16:
 arr = [TipoSelector.PUNTO_SLASH];
                                          arr = arr.concat($$[$0][0]);
                                          $$[$0-1] = $$[$0-1]+""+$$[$0][1];
                                          this.$ = [arr,$$[$0-1]];  
break;
case 17:
 this.$ = [$$[$0][0],$$[$0][1]]; 
break;
case 18:
 this.$ = [[TipoSelector.FIN],""]; 
break;
case 19:

                                        expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.IDENTIFICADOR, $$[$0][0]);
                                        nodoaux = new NodoArbol($$[$0-1],"");
                                        nodoaux.agregarHijo($$[$0][1]);
                                        this.$ = [expresionAux,nodoaux];
                                        
break;
case 20:
     
                                        expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.ASTERISCO, $$[$0][0]);
                                        nodoaux = new NodoArbol($$[$0-1],"");
                                        nodoaux.agregarHijo($$[$0][1]);
                                        this.$ = [expresionAux,nodoaux];
                                        
break;
case 21:

                                        expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.TEXT, $$[$0][0]);
                                        nodoaux = new NodoArbol($$[$0-1],"");
                                        nodoaux.agregarHijo($$[$0][1]);
                                        this.$ = [expresionAux,nodoaux];
                                        
break;
case 22:
          expresionAux = new ExpresionXPath(_$[$0-1].first_line, _$[$0-1].first_column, $$[$0-1], TipoExpresionXPath.NODE, $$[$0][0]);
                                        nodoaux = new NodoArbol($$[$0-1],"");
                                        nodoaux.agregarHijo($$[$0][1]);
                                        this.$ = [expresionAux,nodoaux];
                                        
break;
case 23:
 
                                        nodoaux = new NodoArbol("Predicado","");
                                        nodoaux.agregarHijo(new NodoArbol("[",""));
                                        nodoaux.agregarHijo($$[$0-1][1]);
                                        nodoaux.agregarHijo(new NodoArbol("]",""));
                                        this.$ = [$$[$0-1][0],nodoaux];
break;
case 24:
 
                                        nodoaux = new NodoArbol("Predicado","");
                                        nodoaux.agregarHijo(new NodoArbol("[",""));
                                        nodoaux.agregarHijo(new NodoArbol("]",""));
                                        this.$ = [[],nodoaux];
break;
case 25:
  this.$ = $$[$0];  
break;
case 26:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.ANCESTOR_OR_SELF, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 27:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.ANCESTOR, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 28:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.CHILD, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 29:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.DESCENDANT_OR_SELF, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 30:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.DESCENDANT, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 31:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.FOLLOWING_SIBLING, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 32:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.FOLLOWING, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 33:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.SELF, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 34:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.PARENT, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 35:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.PRECEDING_SIBLING, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 36:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.ATTRIBUTE, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 37:
      axesAux = new Axes(_$[$0-1].first_line, _$[$0-1].first_column, TipoAxes.PRECEDING, $$[$0][0]);
                                                        nodoaux = new NodoArbol($$[$0-1],"");
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [axesAux,nodoaux]; 
break;
case 38:
 idAux = new Primitivo($$[$0-2], _$[$0-3].first_line, _$[$0-3].first_column);
                                                        operacionAux = new Operacion(TipoOperadores.ATRIBUTOS, idAux, $$[$0][0], Operador.IGUAL, _$[$0-3].first_line, _$[$0-3].first_column);
                                                        nodoaux = new NodoArbol("=","");
                                                        nodoaux.agregarHijo(new NodoArbol("@"+$$[$0-2],""));
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [operacionAux,nodoaux]; 
break;
case 39:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.AND, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                  nodoaux = new NodoArbol("and","");
                                                                  nodoaux.agregarHijo($$[$0-2][1]);
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux]; 
break;
case 40:
  operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.OR, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                  nodoaux = new NodoArbol("or","");
                                                                  nodoaux.agregarHijo($$[$0-2][1]);
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux]; 
break;
case 41: case 48: case 49: case 54: case 55: case 66:
 this.$ = $$[$0]; 
break;
case 42:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MAYOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                         nodoaux = new NodoArbol(">","");
                                                                         nodoaux.agregarHijo($$[$0-2][1]);
                                                                         nodoaux.agregarHijo($$[$0][1]);
                                                                         this.$ = [operacionAux,nodoaux]; 
break;
case 43:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MENOR_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                         nodoaux = new NodoArbol("<","");
                                                                         nodoaux.agregarHijo($$[$0-2][1]);
                                                                         nodoaux.agregarHijo($$[$0][1]);
                                                                         this.$ = [operacionAux,nodoaux]; 
break;
case 44:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MAYOR_IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                              nodoaux = new NodoArbol(">=","");
                                                                              nodoaux.agregarHijo($$[$0-2][1]);
                                                                              nodoaux.agregarHijo($$[$0][1]);
                                                                              this.$ = [operacionAux,nodoaux]; 
break;
case 45:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MENOR_IGUAL_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                              nodoaux = new NodoArbol("<=","");
                                                                              nodoaux.agregarHijo($$[$0-2][1]);
                                                                              nodoaux.agregarHijo($$[$0][1]);
                                                                              this.$ = [operacionAux,nodoaux]; 
break;
case 46:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                       nodoaux = new NodoArbol("=","");
                                                                       nodoaux.agregarHijo($$[$0-2][1]);
                                                                       nodoaux.agregarHijo($$[$0][1]);
                                                                       this.$ = [operacionAux,nodoaux]; 
break;
case 47:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.DIFERENTE_QUE, _$[$0-2].first_line, _$[$0-2].first_column);
                                                                         nodoaux = new NodoArbol("=","");
                                                                         nodoaux.agregarHijo($$[$0-2][1]);
                                                                         nodoaux.agregarHijo($$[$0][1]);
                                                                         this.$ = [operacionAux,nodoaux]; 
break;
case 50:
  expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, ExpresionDefinida.ASTERISCO);
                                        nodoaux = new NodoArbol("*","");
                                        this.$ = [expresionAux,nodoaux]; 
break;
case 51:
    expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, ExpresionDefinida.ARROBA);
                                                nodoaux = new NodoArbol("@*","");
                                                this.$ = [expresionAux,nodoaux]; 
break;
case 52:
      expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, ExpresionDefinida.TEXT);
                                        nodoaux = new NodoArbol($$[$0],"");
                                        this.$ = [expresionAux,nodoaux]; 
break;
case 53:
       expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, ExpresionDefinida.NODE);
                                        nodoaux = new NodoArbol($$[$0],"");
                                        this.$ = [expresionAux,nodoaux]; 
break;
case 56:
   negativo = new Primitivo(-1, _$[$0-1].first_line, _$[$0-1].first_column);
                                                                  operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0][0], negativo, Operador.MULTIPLICACION, _$[$0-1].first_line, _$[$0-1].first_column);
                                                                  nodoaux = new NodoArbol("*","");
                                                                  nodoaux.agregarHijo(new NodoArbol("-1",""));
                                                                  nodoaux.agregarHijo($$[$0][1]);
                                                                  this.$ = [operacionAux,nodoaux]; 
break;
case 57:
   operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.SUMA, _$[$0-2].first_line, _$[$0-2].first_column);
                                                        nodoaux = new NodoArbol("+","");
                                                        nodoaux.agregarHijo($$[$0-2][1]);
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [operacionAux,nodoaux]; 
break;
case 58:
   operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.RESTA, _$[$0-2].first_line, _$[$0-2].first_column);
                                                        nodoaux = new NodoArbol("-","");
                                                        nodoaux.agregarHijo($$[$0-2][1]);
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [operacionAux,nodoaux]; 
break;
case 59:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column);
                                                          nodoaux = new NodoArbol("*","");
                                                          nodoaux.agregarHijo($$[$0-2][1]);
                                                          nodoaux.agregarHijo($$[$0][1]);
                                                          this.$ = [operacionAux,nodoaux]; 
break;
case 60:
  operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.MODULO, _$[$0-2].first_line, _$[$0-2].first_column);
                                                      nodoaux = new NodoArbol("%","");                                                    
                                                      nodoaux.agregarHijo($$[$0-2][1]);
                                                      nodoaux.agregarHijo($$[$0][1]);
                                                      this.$ = [operacionAux,nodoaux]; 
break;
case 61:
 operacionAux = new Operacion(TipoOperadores.ELEMENTOS, $$[$0-2][0], $$[$0][0], Operador.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column);
                                                        nodoaux = new NodoArbol("÷","");
                                                        nodoaux.agregarHijo($$[$0-2][1]);
                                                        nodoaux.agregarHijo($$[$0][1]);
                                                        this.$ = [operacionAux,nodoaux]; 
break;
case 62:
 this.$ = $$[$0-1];  
break;
case 63:
 primitivoAux = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
                          nodoaux = new NodoArbol($$[$0],"");
                          this.$ = [primitivoAux,nodoaux];   
break;
case 64:
 primitivoAux = new Primitivo(Number($$[$0]), _$[$0].first_line, _$[$0].first_column);
                            nodoaux = new NodoArbol($$[$0],"");
                            this.$ = [primitivoAux,nodoaux];   
break;
case 65:
 expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, TipoExpresionDefinida.LAST);
              nodoaux = new NodoArbol($$[$0],"");
              this.$ = [expresionAux,nodoaux];   
break;
case 67:
   expresionAux = new ExpresionDefinida(_$[$0].first_line, _$[$0].first_column, TipoExpresionDefinida.POSITION);
                      nodoaux = new NodoArbol($$[$0],"");
                      this.$ = [expresionAux,nodoaux]; 
break;
case 68:
 primitivoAux = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column);
                        nodoaux = new NodoArbol($$[$0],"");
                        this.$ = [primitivoAux,nodoaux];
break;
case 69: case 70:
 primitivoAux = new Primitivo($$[$0], _$[$0].first_line, _$[$0].first_column);
                              nodoaux = new NodoArbol($$[$0],"");
                              this.$ = [primitivoAux,nodoaux];   
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:$V0,11:9,12:$V1,13:$V2,15:$V3,16:$V4,17:$V5,18:$V6,20:$V7,21:$V8,22:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl},{1:[3]},{5:[1,30],6:31,7:4,8:5,9:6,10:$V0,11:9,12:$V1,13:$V2,15:$V3,16:$V4,17:$V5,18:$V6,20:$V7,21:$V8,22:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl},o($Vm,[2,3]),{8:32,9:33,18:$V6,20:$V7,21:$V8,22:$V9,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl},o($Vm,[2,5]),o($Vm,[2,6]),o($Vn,[2,9],{11:34,13:$V2,15:$V3,16:$V4,17:$V5}),o($Vn,[2,10],{11:35,13:$V2,15:$V3,16:$V4,17:$V5}),o($Vn,[2,12]),o($Vo,$Vp,{19:36,23:$Vq}),o($Vo,$Vp,{19:38,23:$Vq}),o($Vo,$Vp,{19:39,23:$Vq}),o($Vo,$Vp,{19:40,23:$Vq}),{8:41,18:$V6,20:$V7,21:$V8,22:$V9},{8:42,18:$V6,20:$V7,21:$V8,22:$V9},{8:43,18:$V6,20:$V7,21:$V8,22:$V9},{8:44,18:$V6,20:$V7,21:$V8,22:$V9},{8:45,18:$V6,20:$V7,21:$V8,22:$V9},{8:46,18:$V6,20:$V7,21:$V8,22:$V9},{8:47,18:$V6,20:$V7,21:$V8,22:$V9},{8:48,18:$V6,20:$V7,21:$V8,22:$V9},{8:49,18:$V6,20:$V7,21:$V8,22:$V9},{8:50,18:$V6,20:$V7,21:$V8,22:$V9},{8:51,18:$V6,20:$V7,21:$V8,22:$V9},{8:52,18:$V6,20:$V7,21:$V8,22:$V9},o($Vn,$Vr,{14:53,11:54,13:$V2,15:$V3,16:$V4,17:$V5}),o($Vn,$Vr,{11:54,14:55,13:$V2,15:$V3,16:$V4,17:$V5}),o($Vn,$Vr,{11:54,14:56,13:$V2,15:$V3,16:$V4,17:$V5}),o($Vn,$Vr,{11:54,14:57,13:$V2,15:$V3,16:$V4,17:$V5}),{1:[2,1]},o($Vm,[2,2]),o($Vm,[2,4]),o($Vm,[2,7]),o($Vn,[2,8]),o($Vn,[2,11]),o($Vo,[2,19]),{9:72,18:$Vs,20:$Vt,21:$Vu,22:$Vv,24:58,26:59,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:62,40:$Vw,44:60,46:61,53:$Vx,54:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD},o($Vo,[2,20]),o($Vo,[2,21]),o($Vo,[2,22]),o($Vo,[2,26]),o($Vo,[2,27]),o($Vo,[2,28]),o($Vo,[2,29]),o($Vo,[2,30]),o($Vo,[2,31]),o($Vo,[2,32]),o($Vo,[2,33]),o($Vo,[2,34]),o($Vo,[2,35]),o($Vo,[2,36]),o($Vo,[2,37]),o($Vn,[2,13]),o($Vn,[2,17]),o($Vn,[2,14]),o($Vn,[2,15]),o($Vn,[2,16]),{25:[1,76]},{25:[2,25],43:[1,77],45:[1,78]},o($VE,[2,41]),o($VE,[2,48],{20:$VF,41:[1,83],47:[1,79],48:[1,80],49:[1,81],50:[1,82],52:[1,84],54:$VG,55:$VH,56:$VI,57:$VJ}),o($VE,[2,49]),o($VE,[2,50]),o($VE,[2,51]),o($VE,[2,52]),o($VE,[2,53]),{9:72,18:$Vs,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,46:90,54:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD},{9:72,18:$Vs,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,46:91,54:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD},o($VK,[2,63]),o($VK,[2,64]),o($VK,[2,65]),o($VK,[2,66]),o($VK,[2,67]),o($VK,[2,68]),{18:[1,92]},o($Vo,[2,23]),{9:72,18:$Vs,20:$Vt,21:$Vu,22:$Vv,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:62,40:$Vw,44:93,46:61,53:$Vx,54:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD},{9:72,18:$Vs,20:$Vt,21:$Vu,22:$Vv,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:62,40:$Vw,44:94,46:61,53:$Vx,54:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD},{9:72,18:$Vs,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,46:95,54:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD},{9:72,18:$Vs,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,46:96,54:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD},{9:72,18:$Vs,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,46:97,54:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD},{9:72,18:$Vs,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,46:98,54:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD},{9:72,18:$Vs,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,42:100,46:101,51:99,54:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VL,65:$VM},{9:72,18:$Vs,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,42:100,46:101,51:104,54:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VL,65:$VM},{9:72,18:$Vs,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,46:105,54:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD},{9:72,18:$Vs,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,46:106,54:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD},{9:72,18:$Vs,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,46:107,54:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD},{9:72,18:$Vs,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,46:108,54:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD},{9:72,18:$Vs,27:$Va,28:$Vb,29:$Vc,30:$Vd,31:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,46:109,54:$Vy,58:$Vz,60:$VA,61:$VB,62:$VC,63:$VD},o($VK,[2,56]),{20:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,59:[1,110]},{41:[1,111]},o($VE,[2,39]),o($VE,[2,40]),o($VE,[2,42],{20:$VF,54:$VG,55:$VH,56:$VI,57:$VJ}),o($VE,[2,43],{20:$VF,54:$VG,55:$VH,56:$VI,57:$VJ}),o($VE,[2,44],{20:$VF,54:$VG,55:$VH,56:$VI,57:$VJ}),o($VE,[2,45],{20:$VF,54:$VG,55:$VH,56:$VI,57:$VJ}),o($VE,[2,46]),o($VE,[2,54]),o($VE,[2,55],{20:$VF,54:$VG,55:$VH,56:$VI,57:$VJ}),o($VE,[2,69]),o($VE,[2,70]),o($VE,[2,47]),o($VN,[2,57],{20:$VF,56:$VI,57:$VJ}),o($VN,[2,58],{20:$VF,56:$VI,57:$VJ}),o($VK,[2,59]),o($VK,[2,60]),o($VK,[2,61]),o($VK,[2,62]),{42:112,64:$VL,65:$VM},o($VE,[2,38])],
defaultActions: {30:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return 22;  
break;
case 1: return 62;  
break;
case 2: return 63;  
break;
case 3: return 21;  
break;
case 4: return 27;  
break;
case 5: return 28;  
break;
case 6: return 37;  
break;
case 7: return 29;  
break;
case 8: return 30;  
break;
case 9: return 31;  
break;
case 10: return 32;  
break;
case 11: return 33;  
break;
case 12: return 35;  
break;
case 13: return 36;  
break;
case 14: return 38;  
break;
case 15: return 34;  
break;
case 16: return 57;  
break;
case 17: return 45;  
break;
case 18: return 43;  
break;
case 19: return 56;  
break;
case 20: return 53;  
break;
case 21: return 40;  
break;
case 22: return 'tk_barra';  
break;
case 23: return 55;  
break;
case 24: return 54;  
break;
case 25: return 20;  
break;
case 26: return 52; 
break;
case 27: return 50; 
break;
case 28: return 49; 
break;
case 29: return 41; 
break;
case 30: return 47; 
break;
case 31: return 48; 
break;
case 32: return 'tk_interrogacion'; 
break;
case 33: return 13; 
break;
case 34: return 15; 
break;
case 35: return 16; 
break;
case 36: return 17; 
break;
case 37: return 10; 
break;
case 38: return 12; 
break;
case 39: return 'tk_doblepunto'; 
break;
case 40: return 'tk_punto'; 
break;
case 41: return 61;  
break;
case 42: return 60;  
break;
case 43: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 64; 
break;
case 44: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 65; 
break;
case 45: return 18; 
break;
case 46: return 23; 
break;
case 47: return 25; 
break;
case 48: return 58; 
break;
case 49: return 59; 
break;
case 50:/* skip whitespace */
break;
case 51: /*Los Ignoramos*/   
break;
case 52: return 5;       
break;
case 53:
        ListaErr.agregarError(new Error(NumeroE, yy_.yylloc.first_line, yy_.yylloc.first_column + 1, "Lexico", "El caracter " + yy_.yytext + " no pertenece al lenguaje.","XPATH")); NumeroE++;
 
break;
}
},
rules: [/^(?:node\(\))/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:text\(\))/i,/^(?:ancestor-or-self::)/i,/^(?:ancestor::)/i,/^(?:attribute::)/i,/^(?:child::)/i,/^(?:descendant-or-self::)/i,/^(?:descendant::)/i,/^(?:following-sibling::)/i,/^(?:following::)/i,/^(?:parent::)/i,/^(?:preceding-sibling::)/i,/^(?:preceding::)/i,/^(?:self::)/i,/^(?:div\b)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:mod\b)/i,/^(?:@\*)/i,/^(?:@)/i,/^(?:\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\?)/i,/^(?:\.\.\/\/)/i,/^(?:\.\/\/)/i,/^(?:\.\.\/)/i,/^(?:\.\/)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:([0-9]+["."][0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:([a-zA-ZáéíúóàèìòÁÉÍÓÚÀÈÌÒÙñÑ])[a-zA-Z0-9áéíúóàèìòÁÉÍÓÚÀÈÌÒÙñÑ_]*)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\s+)/i,/^(?:[ \t\r\n\f])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XpathAsc;
exports.Parser = XpathAsc.Parser;
exports.parse = function () { return XpathAsc.parse.apply(XpathAsc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}