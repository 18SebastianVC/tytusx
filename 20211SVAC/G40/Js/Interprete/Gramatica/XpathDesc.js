/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XpathDesc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,26],$V3=[1,27],$V4=[1,28],$V5=[1,29],$V6=[1,10],$V7=[1,11],$V8=[1,12],$V9=[1,13],$Va=[1,14],$Vb=[1,15],$Vc=[1,16],$Vd=[1,17],$Ve=[1,18],$Vf=[1,19],$Vg=[1,20],$Vh=[1,21],$Vi=[1,22],$Vj=[1,23],$Vk=[1,24],$Vl=[1,25],$Vm=[2,4],$Vn=[5,11,13,14,16,17,18,19,21,22,23,28,29,30,31,32,33,34,35,36,37,38,39],$Vo=[19,21,22,23,28,29,30,31,32,33,34,35,36,37,38,39],$Vp=[5,11,13,14,16,17,18,19,21,22,23,26,28,29,30,31,32,33,34,35,36,37,38,39,42,45,46,48,49,50,51,53,57,63,64,65,66,67],$Vq=[2,25],$Vr=[1,38],$Vs=[2,19],$Vt=[1,75],$Vu=[1,65],$Vv=[1,67],$Vw=[1,68],$Vx=[1,76],$Vy=[1,66],$Vz=[1,69],$VA=[1,70],$VB=[1,71],$VC=[1,72],$VD=[1,74],$VE=[26,45,46],$VF=[26,42,45,46,48,49,50,51,53,67],$VG=[2,72],$VH=[1,90],$VI=[1,89],$VJ=[1,88],$VK=[1,91],$VL=[1,92],$VM=[1,93],$VN=[1,109],$VO=[1,110];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"SETS":4,"EOF":5,"SET":6,"OS":7,"SELECTORES":8,"EXPRESION":9,"AXES":10,"tk_dobleslash":11,"OTRO_SELECTOR":12,"tk_slash":13,"tk_dpds":14,"AGREGAR_SELECTOR":15,"tk_pds":16,"tk_dps":17,"tk_ps":18,"tk_identificador":19,"PREDICADO":20,"tk_asterisco":21,"tk_texto":22,"tk_node":23,"tk_corchetea":24,"EXPRESION_FILTRO":25,"tk_corchetec":26,"EXPRESION_LOGICA":27,"tk_ancestorself":28,"tk_ancestor":29,"tk_child":30,"tk_descendantself":31,"tk_descendant":32,"tk_followingsibling":33,"tk_following":34,"tk_self":35,"tk_parent":36,"tk_precedingsibling":37,"tk_attribute":38,"tk_preceding":39,"ATRIBUTO":40,"tk_arroba":41,"tk_igual":42,"CADENA":43,"EXPRESION_RELACIONAL":44,"tk_and":45,"tk_or":46,"EXPRESION_NUMERICA":47,"tk_mayor":48,"tk_menor":49,"tk_mayorigual":50,"tk_menorigual":51,"EXPRESION_CADENA":52,"tk_noigual":53,"tk_arrobaasterisco":54,"tk_cadena1":55,"tk_cadena2":56,"tk_menos":57,"tk_entero":58,"EXPRESION_PRIMA":59,"tk_decimal":60,"tk_last":61,"tk_position":62,"tk_mas":63,"tk_mod":64,"tk_division":65,"tk_parentesisa":66,"tk_parentesisc":67,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"tk_dobleslash",13:"tk_slash",14:"tk_dpds",16:"tk_pds",17:"tk_dps",18:"tk_ps",19:"tk_identificador",21:"tk_asterisco",22:"tk_texto",23:"tk_node",24:"tk_corchetea",26:"tk_corchetec",28:"tk_ancestorself",29:"tk_ancestor",30:"tk_child",31:"tk_descendantself",32:"tk_descendant",33:"tk_followingsibling",34:"tk_following",35:"tk_self",36:"tk_parent",37:"tk_precedingsibling",38:"tk_attribute",39:"tk_preceding",41:"tk_arroba",42:"tk_igual",45:"tk_and",46:"tk_or",48:"tk_mayor",49:"tk_menor",50:"tk_mayorigual",51:"tk_menorigual",53:"tk_noigual",54:"tk_arrobaasterisco",55:"tk_cadena1",56:"tk_cadena2",57:"tk_menos",58:"tk_entero",60:"tk_decimal",61:"tk_last",62:"tk_position",63:"tk_mas",64:"tk_mod",65:"tk_division",66:"tk_parentesisa",67:"tk_parentesisc"},
productions_: [0,[3,2],[4,2],[7,2],[7,0],[6,2],[6,1],[6,1],[6,2],[8,2],[8,1],[8,1],[8,2],[8,1],[12,2],[12,2],[12,2],[12,2],[15,1],[15,0],[9,2],[9,2],[9,2],[9,2],[20,3],[20,0],[25,1],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[10,2],[40,4],[27,3],[27,3],[27,1],[44,3],[44,3],[44,3],[44,3],[44,3],[44,3],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[52,1],[52,1],[43,1],[43,1],[47,2],[47,2],[47,2],[47,2],[47,2],[47,2],[47,2],[59,2],[59,2],[59,2],[59,2],[59,2],[59,3],[59,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
  this.$ = "TODO CORRECTO :D XPATH DESC VERSION";
                                return this.$; 
break;
case 2: case 3: case 4: case 5: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30: case 31: case 32: case 33: case 34: case 35: case 36: case 37: case 38: case 39: case 40: case 41: case 43: case 44: case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: case 58: case 72:
 
break;
case 59: case 60: case 61: case 62: case 63: case 64: case 65: case 66: case 67: case 68: case 69: case 70: case 71:
  
break;
}
},
table: [{3:1,4:2,6:3,8:4,9:5,10:6,11:$V0,12:9,13:$V1,14:$V2,16:$V3,17:$V4,18:$V5,19:$V6,21:$V7,22:$V8,23:$V9,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl},{1:[3]},{5:[1,30]},{5:$Vm,6:32,7:31,8:4,9:5,10:6,11:$V0,12:9,13:$V1,14:$V2,16:$V3,17:$V4,18:$V5,19:$V6,21:$V7,22:$V8,23:$V9,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl},{9:33,10:34,19:$V6,21:$V7,22:$V8,23:$V9,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl},o($Vn,[2,6]),o($Vn,[2,7]),o($Vo,[2,10],{12:35,14:$V2,16:$V3,17:$V4,18:$V5}),o($Vo,[2,11],{12:36,14:$V2,16:$V3,17:$V4,18:$V5}),o($Vo,[2,13]),o($Vp,$Vq,{20:37,24:$Vr}),o($Vp,$Vq,{20:39,24:$Vr}),o($Vp,$Vq,{20:40,24:$Vr}),o($Vp,$Vq,{20:41,24:$Vr}),{9:42,19:$V6,21:$V7,22:$V8,23:$V9},{9:43,19:$V6,21:$V7,22:$V8,23:$V9},{9:44,19:$V6,21:$V7,22:$V8,23:$V9},{9:45,19:$V6,21:$V7,22:$V8,23:$V9},{9:46,19:$V6,21:$V7,22:$V8,23:$V9},{9:47,19:$V6,21:$V7,22:$V8,23:$V9},{9:48,19:$V6,21:$V7,22:$V8,23:$V9},{9:49,19:$V6,21:$V7,22:$V8,23:$V9},{9:50,19:$V6,21:$V7,22:$V8,23:$V9},{9:51,19:$V6,21:$V7,22:$V8,23:$V9},{9:52,19:$V6,21:$V7,22:$V8,23:$V9},{9:53,19:$V6,21:$V7,22:$V8,23:$V9},o($Vo,$Vs,{15:54,12:55,14:$V2,16:$V3,17:$V4,18:$V5}),o($Vo,$Vs,{12:55,15:56,14:$V2,16:$V3,17:$V4,18:$V5}),o($Vo,$Vs,{12:55,15:57,14:$V2,16:$V3,17:$V4,18:$V5}),o($Vo,$Vs,{12:55,15:58,14:$V2,16:$V3,17:$V4,18:$V5}),{1:[2,1]},{5:[2,2]},{5:$Vm,6:32,7:59,8:4,9:5,10:6,11:$V0,12:9,13:$V1,14:$V2,16:$V3,17:$V4,18:$V5,19:$V6,21:$V7,22:$V8,23:$V9,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl},o($Vn,[2,5]),o($Vn,[2,8]),o($Vo,[2,9]),o($Vo,[2,12]),o($Vp,[2,20]),{10:73,19:$Vt,21:$Vu,22:$Vv,23:$Vw,25:60,27:61,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl,40:64,41:$Vx,44:62,47:63,54:$Vy,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD},o($Vp,[2,21]),o($Vp,[2,22]),o($Vp,[2,23]),o($Vp,[2,27]),o($Vp,[2,28]),o($Vp,[2,29]),o($Vp,[2,30]),o($Vp,[2,31]),o($Vp,[2,32]),o($Vp,[2,33]),o($Vp,[2,34]),o($Vp,[2,35]),o($Vp,[2,36]),o($Vp,[2,37]),o($Vp,[2,38]),o($Vo,[2,14]),o($Vo,[2,18]),o($Vo,[2,15]),o($Vo,[2,16]),o($Vo,[2,17]),{5:[2,3]},{26:[1,77]},{26:[2,26]},{26:[2,42],45:[1,78],46:[1,79]},o($VE,[2,49],{42:[1,84],48:[1,80],49:[1,81],50:[1,82],51:[1,83],53:[1,85]}),o($VE,[2,50]),o($VE,[2,51]),o($VE,[2,52]),o($VE,[2,53]),o($VE,[2,54]),{10:73,19:$Vt,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl,47:86,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD},o($VF,$VG,{59:87,21:$VH,57:$VI,63:$VJ,64:$VK,65:$VL,66:$VM}),o($VF,$VG,{59:94,21:$VH,57:$VI,63:$VJ,64:$VK,65:$VL,66:$VM}),o($VF,$VG,{59:95,21:$VH,57:$VI,63:$VJ,64:$VK,65:$VL,66:$VM}),o($VF,$VG,{59:96,21:$VH,57:$VI,63:$VJ,64:$VK,65:$VL,66:$VM}),o($VF,$VG,{59:97,21:$VH,57:$VI,63:$VJ,64:$VK,65:$VL,66:$VM}),o($VF,$VG,{59:98,21:$VH,57:$VI,63:$VJ,64:$VK,65:$VL,66:$VM}),{19:[1,99]},o($Vp,[2,24]),{10:73,19:$Vt,21:$Vu,22:$Vv,23:$Vw,27:100,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl,40:64,41:$Vx,44:62,47:63,54:$Vy,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD},{10:73,19:$Vt,21:$Vu,22:$Vv,23:$Vw,27:101,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl,40:64,41:$Vx,44:62,47:63,54:$Vy,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD},{10:73,19:$Vt,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl,47:102,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD},{10:73,19:$Vt,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl,47:103,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD},{10:73,19:$Vt,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl,47:104,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD},{10:73,19:$Vt,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl,47:105,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD},{10:73,19:$Vt,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl,43:107,47:108,52:106,55:$VN,56:$VO,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD},{10:73,19:$Vt,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl,43:107,47:108,52:111,55:$VN,56:$VO,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD},o($VF,[2,59]),o($VF,[2,60]),{10:73,19:$Vt,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl,47:112,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD},{10:73,19:$Vt,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl,47:113,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD},{10:73,19:$Vt,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl,47:114,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD},{10:73,19:$Vt,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl,47:115,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD},{10:73,19:$Vt,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl,47:116,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD},{10:73,19:$Vt,28:$Va,29:$Vb,30:$Vc,31:$Vd,32:$Ve,33:$Vf,34:$Vg,35:$Vh,36:$Vi,37:$Vj,38:$Vk,39:$Vl,47:117,57:$Vz,58:$VA,60:$VB,61:$VC,62:$VD},o($VF,[2,61]),o($VF,[2,62]),o($VF,[2,63]),o($VF,[2,64]),o($VF,[2,65]),{42:[1,118]},{26:[2,40]},{26:[2,41]},o($VE,[2,43]),o($VE,[2,44]),o($VE,[2,45]),o($VE,[2,46]),o($VE,[2,47]),o($VE,[2,55]),o($VE,[2,56]),o($VE,[2,57]),o($VE,[2,58]),o($VE,[2,48]),o($VF,[2,66]),o($VF,[2,67]),o($VF,[2,68]),o($VF,[2,69]),o($VF,[2,70]),{67:[1,119]},{43:120,55:$VN,56:$VO},o($VF,[2,71]),o($VE,[2,39])],
defaultActions: {30:[2,1],31:[2,2],59:[2,3],61:[2,26],100:[2,40],101:[2,41]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.begin('comment');
break;
case 1:this.popState();
break;
case 2:/* skip commentario content*/
break;
case 3: return 23;  
break;
case 4: return 61;  
break;
case 5: return 62;  
break;
case 6: return 22;  
break;
case 7: return 28;  
break;
case 8: return 29;  
break;
case 9: return 38;  
break;
case 10: return 30;  
break;
case 11: return 31;  
break;
case 12: return 32;  
break;
case 13: return 33;  
break;
case 14: return 34;  
break;
case 15: return 36;  
break;
case 16: return 37;  
break;
case 17: return 39;  
break;
case 18: return 35;  
break;
case 19: return 65;  
break;
case 20: return 46;  
break;
case 21: return 45;  
break;
case 22: return 64;  
break;
case 23: return 54;  
break;
case 24: return 41;  
break;
case 25: return 'tk_barra';  
break;
case 26: return 63;  
break;
case 27: return 57;  
break;
case 28: return 21;  
break;
case 29: return 53; 
break;
case 30: return 51; 
break;
case 31: return 50; 
break;
case 32: return 42; 
break;
case 33: return 48; 
break;
case 34: return 49; 
break;
case 35: return 'tk_interrogacion'; 
break;
case 36: return 14; 
break;
case 37: return 16; 
break;
case 38: return 17; 
break;
case 39: return 18; 
break;
case 40: return 11; 
break;
case 41: return 13; 
break;
case 42: return 'tk_doblepunto'; 
break;
case 43: return 'tk_punto'; 
break;
case 44: return 60;  
break;
case 45: return 58;  
break;
case 46: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 55; 
break;
case 47: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 56; 
break;
case 48: return 19; 
break;
case 49: return 'tk_squote'; 
break;
case 50: return 'tk_dquote'; 
break;
case 51: return 24; 
break;
case 52: return 26; 
break;
case 53: return 'tk_llavea'; 
break;
case 54: return 'tk_llavec'; 
break;
case 55: return 66; 
break;
case 56: return 67; 
break;
case 57:/* skip whitespace */
break;
case 58: /*Los Ignoramos*/   
break;
case 59: return 5;       
break;
case 60: 
break;
}
},
rules: [/^(?:<!--)/i,/^(?:-->)/i,/^(?:.)/i,/^(?:node\(\))/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:text\(\))/i,/^(?:ancestor-or-self::)/i,/^(?:ancestor::)/i,/^(?:attribute::)/i,/^(?:child::)/i,/^(?:descendant-or-self::)/i,/^(?:descendant::)/i,/^(?:following-sibling::)/i,/^(?:following::)/i,/^(?:parent::)/i,/^(?:preceding-sibling::)/i,/^(?:preceding::)/i,/^(?:self::)/i,/^(?:div\b)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:mod\b)/i,/^(?:@\*)/i,/^(?:@)/i,/^(?:\|)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\?)/i,/^(?:\.\.\/\/)/i,/^(?:\.\/\/)/i,/^(?:\.\.\/)/i,/^(?:\.\/)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:([0-9]+["."][0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:([a-zA-ZáéíúóàèìòÁÉÍÓÚÀÈÌÒÙñÑ])[a-zA-Z0-9áéíúóàèìòÁÉÍÓÚÀÈÌÒÙñÑ_]*)/i,/^(?:['])/i,/^(?:["])/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\()/i,/^(?:\))/i,/^(?:\s+)/i,/^(?:[ \t\r\n\f])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true},"INITIAL":{"rules":[0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XpathDesc;
exports.Parser = XpathDesc.Parser;
exports.parse = function () { return XpathDesc.parse.apply(XpathDesc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}