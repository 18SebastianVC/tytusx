/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XqueryAnalyzer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,22],$V1=[1,14],$V2=[1,15],$V3=[1,21],$V4=[1,20],$V5=[1,16],$V6=[1,23],$V7=[1,19],$V8=[1,17],$V9=[5,19,24,25,28,33,42,56,59,68],$Va=[1,64],$Vb=[1,43],$Vc=[1,66],$Vd=[1,59],$Ve=[1,65],$Vf=[1,48],$Vg=[1,51],$Vh=[1,67],$Vi=[1,68],$Vj=[1,69],$Vk=[1,62],$Vl=[1,63],$Vm=[1,52],$Vn=[1,53],$Vo=[1,54],$Vp=[1,55],$Vq=[1,71],$Vr=[1,72],$Vs=[1,73],$Vt=[1,74],$Vu=[1,75],$Vv=[1,76],$Vw=[1,77],$Vx=[1,78],$Vy=[1,79],$Vz=[1,80],$VA=[1,81],$VB=[1,82],$VC=[1,83],$VD=[1,57],$VE=[1,58],$VF=[1,47],$VG=[1,49],$VH=[32,59],$VI=[5,19,22,24,25,28,33,39,42,56,59,68],$VJ=[1,107],$VK=[1,100],$VL=[1,109],$VM=[1,110],$VN=[1,103],$VO=[1,104],$VP=[1,105],$VQ=[1,106],$VR=[1,108],$VS=[1,98],$VT=[1,99],$VU=[1,101],$VV=[1,102],$VW=[5,19,22,24,25,27,28,32,33,39,42,46,56,59,68,76,85,95,96,97,98,99,100,101,102,103,104,105],$VX=[1,112],$VY=[5,19,22,24,25,27,28,32,33,39,42,45,46,56,59,68,69,76,85,95,96,97,98,99,100,101,102,103,104,105],$VZ=[2,5,19,22,24,25,27,28,32,33,39,42,45,46,56,59,68,69,76,81,83,85,95,96,97,98,99,100,101,102,103,104,105],$V_=[1,139],$V$=[1,152],$V01=[5,19,22,24,25,28,33,39,42,56,58,59,68],$V11=[1,212],$V21=[19,22,24,25,28,39,42,56,59,68],$V31=[5,19,22,24,25,27,28,32,33,39,42,46,56,59,68,85,95,96,97,98,99,100,101,102,103],$V41=[5,19,22,24,25,27,28,32,33,39,42,46,56,59,68,85,95,96,97,98,99,100,101],$V51=[22,32],$V61=[2,5,19,22,24,25,27,28,32,33,39,42,45,46,56,59,68,69,76,81,83,84,85,95,96,97,98,99,100,101,102,103,104,105],$V71=[1,304],$V81=[1,327],$V91=[1,354],$Va1=[22,32,38];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"XQUERY_XPATH":4,"EOF":5,"XQUERY":6,"INSTRUCCION":7,"DECLARACION":8,"ASIGNACION":9,"FLOWER":10,"FUNCIONES_NATIVAS_XQUERY":11,"IF_XQUERY":12,"RETURN_QUERY":13,"DECLARACION_FUNCION":14,"LLAMADA_FUNCION_INSTRUCCION":15,"IMPRESION":16,"SENTENCIAS":17,"SENTENCIA":18,"imprimir":19,"lparen":20,"INSTRUCCION_RETORNO":21,"rparen":22,"PREDICATE":23,"let":24,"variable":25,"colon":26,"equal":27,"local":28,"identifier":29,"LISTA_VALORES":30,"LLAMADA_FUNCION_EXPRESION":31,"coma":32,"declare_terminal":33,"function_terminal":34,"LISTA_PARAMETROS":35,"as_terminal":36,"TIPO_DATO":37,"lllave":38,"rllave":39,"semicolon":40,"PARAMETRO":41,"for_terminal":42,"in":43,"LISTA-XPATH":44,"where":45,"order":46,"by":47,"at":48,"LISTA_VALORES_FLOWER":49,"VALOR_FLOWER":50,"IntegerLiteral":51,"to":52,"LISTA_NUMEROS":53,"SENTENCIA_IF":54,"LISTA_ELSE_IF":55,"if":56,"then":57,"else":58,"return_terminal":59,"xs":60,"anyURI":61,"question":62,"decimal_t":63,"float_t":64,"boolean_t":65,"string_t":66,"int_t":67,"data":68,"node_set":69,"XPATH-EXPRESION":70,"EXPRESION":71,"FIRST_EXPRESION":72,"node":73,"current_expresion":74,"atribute_expresion":75,"times":76,"LISTA_PREDICATES":77,"AXES_NAME":78,"axe_connector":79,"text":80,"root_expresion":81,"parent_expresion":82,"any_expresion":83,"lcorchetes":84,"rcorchetes":85,"EXPRESION_NUMERICA":86,"EXPRESION_RELACIONAL":87,"EXPRESION_LOGICA":88,"PRIMITIVA":89,"CUSTOM_FUNCTIONS":90,"substring_t":91,"upper-case_t":92,"lower-case_t":93,"number_t":94,"or":95,"and":96,"lt":97,"lte":98,"gt":99,"gte":100,"nequal":101,"plus":102,"minus":103,"div":104,"mod":105,"ancestor-or-self":106,"ancestor":107,"attribute":108,"child":109,"descendant-or-self":110,"descendant":111,"following-sibling":112,"following":113,"namespace":114,"preceding-sibling":115,"preceding":116,"parent":117,"self":118,"FUNCION_NATIVA":119,"last":120,"position":121,"DoubleLiteral":122,"str":123,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",19:"imprimir",20:"lparen",22:"rparen",24:"let",25:"variable",26:"colon",27:"equal",28:"local",29:"identifier",32:"coma",33:"declare_terminal",34:"function_terminal",36:"as_terminal",38:"lllave",39:"rllave",40:"semicolon",42:"for_terminal",43:"in",45:"where",46:"order",47:"by",48:"at",51:"IntegerLiteral",52:"to",56:"if",57:"then",58:"else",59:"return_terminal",60:"xs",61:"anyURI",62:"question",63:"decimal_t",64:"float_t",65:"boolean_t",66:"string_t",67:"int_t",68:"data",69:"node_set",73:"node",74:"current_expresion",75:"atribute_expresion",76:"times",79:"axe_connector",80:"text",81:"root_expresion",82:"parent_expresion",83:"any_expresion",84:"lcorchetes",85:"rcorchetes",91:"substring_t",92:"upper-case_t",93:"lower-case_t",94:"number_t",95:"or",96:"and",97:"lt",98:"lte",99:"gt",100:"gte",101:"nequal",102:"plus",103:"minus",104:"div",105:"mod",106:"ancestor-or-self",107:"ancestor",108:"attribute",109:"child",110:"descendant-or-self",111:"descendant",112:"following-sibling",113:"following",114:"namespace",115:"preceding-sibling",116:"preceding",117:"parent",118:"self",120:"last",121:"position",122:"DoubleLiteral",123:"str"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[17,2],[17,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[18,1],[16,4],[21,1],[21,1],[21,1],[21,1],[8,5],[9,4],[15,5],[15,6],[31,5],[31,6],[30,3],[30,1],[14,14],[14,13],[35,3],[35,1],[41,3],[10,11],[10,8],[10,8],[10,5],[10,12],[10,9],[10,10],[10,7],[10,3],[49,3],[49,1],[50,7],[50,5],[53,3],[53,1],[12,2],[54,8],[55,3],[55,5],[55,2],[55,4],[13,2],[37,4],[37,4],[37,4],[37,4],[37,4],[37,4],[11,4],[44,3],[44,1],[70,2],[70,1],[70,1],[72,1],[72,1],[72,3],[72,1],[72,2],[72,2],[72,4],[72,3],[72,3],[72,5],[72,2],[72,4],[72,3],[72,3],[72,5],[72,5],[72,4],[72,4],[72,6],[72,6],[71,2],[71,3],[71,3],[71,5],[71,2],[71,2],[71,2],[71,4],[71,4],[71,4],[71,6],[71,6],[71,4],[71,2],[71,3],[71,3],[71,5],[71,2],[71,2],[71,2],[71,4],[71,4],[71,4],[71,6],[71,6],[71,4],[71,3],[71,4],[71,4],[71,6],[71,3],[71,3],[71,3],[71,5],[71,5],[71,5],[71,7],[71,7],[71,5],[71,3],[71,4],[71,4],[71,6],[71,3],[71,3],[71,3],[71,5],[71,5],[71,5],[71,7],[71,7],[71,5],[71,1],[77,4],[77,3],[23,1],[23,1],[23,1],[23,1],[23,3],[23,1],[90,4],[90,8],[90,6],[90,4],[90,4],[90,4],[88,3],[88,3],[87,3],[87,3],[87,3],[87,3],[87,3],[87,3],[86,3],[86,3],[86,3],[86,3],[86,3],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[78,1],[119,3],[119,3],[89,1],[89,1],[89,1],[89,1],[89,1],[89,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return this.$; 
break;
case 2:
 this.$ = new XqueryList($$[$0]); 
break;
case 3: case 14:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 4: case 36: case 40: case 52:
 this.$ = []; this.$.push($$[$0]); 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 16: case 17: case 18: case 19: case 20: case 21: case 22: case 23: case 25: case 26: case 27: case 28: case 156: case 196:
 this.$ = $$[$0]; 
break;
case 15:
  this.$ = []; this.$.push($$[$0]); 
break;
case 24:
 this.$ = new Imprimir($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 29:
 this.$ = new Declaracion($$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 30:
 this.$ = new Asignacion($$[$0-3],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 31:
 this.$ = new LlamadaFuncionInstruccion($$[$0-2],[],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 32:
 this.$ = new LlamadaFuncionInstruccion($$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 33:
 this.$ = new LlamadaFuncion($$[$0-2],[],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 34:
 this.$ = new LlamadaFuncion($$[$0-3],$$[$0-1],_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 35: case 39: case 51:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 37:
 this.$ = new Funcion($$[$0-9],$$[$0-7],$$[$0-4],$$[$0-2],_$[$0-13].first_line,_$[$0-13].first_column); 
break;
case 38:
 this.$ = new Funcion($$[$0-8],[],$$[$0-4],$$[$0-2],_$[$0-12].first_line,_$[$0-12].first_column); 
break;
case 41:
 this.$ = new Parametro($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 42:
 var sentenciaXpath = new ListaXpathExpresion($$[$0-7], _$[$0-10].first_line,_$[$0-10].first_column);
                                                                                                         var filterNode = new FilterResult($$[$0-5],$$[$0-4],_$[$0-5].first_line,_$[$0-5].first_column);
                                                                                                         this.$ = new SentenciaFor($$[$0-9],sentenciaXpath,filterNode,$$[$0-1],$$[$0],_$[$0-10].first_line,_$[$0-10].first_column);
                                                                                                       
break;
case 43:
 var sentenciaXpath = new ListaXpathExpresion($$[$0-4], _$[$0-7].first_line,_$[$0-7].first_column);
                                                                                      var filterNode = new FilterResult($$[$0-2],$$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
                                                                                      this.$ = new SentenciaFor($$[$0-6],sentenciaXpath,filterNode,null,$$[$0],_$[$0-7].first_line,_$[$0-7].first_column);
                                                                                    
break;
case 44:
 var sentenciaXpath = new ListaXpathExpresion($$[$0-4], _$[$0-7].first_line,_$[$0-7].first_column);
                                                                                this.$ = new SentenciaFor($$[$0-6],sentenciaXpath,null,$$[$0-1],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 45:
 var sentenciaXpath = new ListaXpathExpresion($$[$0-1], _$[$0-4].first_line,_$[$0-4].first_column);
                                                             this.$ = new SentenciaFor($$[$0-3],sentenciaXpath,null,null,$$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 50:
 this.$ = new SentenciaForNumerica($$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 53:
 this.$ = new ValorFlower($$[$0-6],null,Number($$[$0-3]),Number($$[$0-1]),_$[$0-6].first_line,_$[$0-6].first_column); 
break;
case 54:
 this.$ = new ValorFlower($$[$0-4],$$[$0-1],null,null,_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 55:
 this.$ = $$[$0-2]; this.$.push(Number($$[$0])); 
break;
case 56:
 this.$ = []; this.$.push(Number($$[$0])); 
break;
case 57:
 this.$ = $$[$0];  this.$.agregarPrimerIf($$[$0-1]); 
break;
case 58:
 this.$ = new SentenciaIf($$[$0-5],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 59:
 this.$=$$[$0-2]; this.$.agregarElseIf($$[$0]); 
break;
case 60:
 this.$ = $$[$0-4]; this.$.agregarElse(new SentenciaElse($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column)) 
break;
case 61:
 this.$ = new InstruccionIf(_$[$0-1].first_line,_$[$0-1].first_column); this.$.agregarElseIf($$[$0]); 
break;
case 62:
 this.$ = new InstruccionIf(_$[$0-3].first_line,_$[$0-3].first_column); this.$.agregarElse(new SentenciaElse($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column)); 
break;
case 63:
 this.$ = new Retorno($$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 64:
 this.$ = new Tipo(TipoDato.xpathValue); 
break;
case 65: case 66: case 69:
 this.$ = new Tipo(TipoDato.numero); 
break;
case 67:
 this.$ = new Tipo(TipoDato.booleano); 
break;
case 68:
 this.$ = new Tipo(TipoDato.cadena); 
break;
case 71:
 ReporteGramatical.agregarProduccionXpath("LISTA-XPATH -> LISTA-XPATH | XPATH","LISTA-XPATH1.LISTA.ADD( XPATH );</br>LISTA-XPATH.LISTA = LISTA-XPATH1.LISTA;");
                                                    var expresion = new XpathExpresion($$[$0], _$[$0].first_line,_$[$0].first_column);
                                                    $$[$0-2].push( expresion ); this.$=$$[$0-2]; 
break;
case 72:
 ReporteGramatical.agregarProduccionXpath("LISTA-XPATH -> XPATH","LISTA-XPATH.LISTA = XPATH;");
                               var expresion = new XpathExpresion($$[$0], _$[$0].first_line,_$[$0].first_column);
                               this.$ = [expresion]; 
break;
case 73:
 ReporteGramatical.agregarProduccionXpath("XPATH -> XPATH EXPRESION","XPATH1.LISTA.ADD( EXPRESION );</br>XPATH.LISTA = XPATH1.LISTA;");
                                              if( !($$[$0] instanceof NodoError) ) $$[$0-1].push($$[$0]);
                                              this.$ = $$[$0-1];
                                            
break;
case 74:
 ReporteGramatical.agregarProduccionXpath("XPATH -> EXPRESION","XPATH.LISTA = [EXPRESION];");
                               if($$[$0] instanceof NodoError) this.$ = [];
                               else  this.$ = [$$[$0]];
                             
break;
case 75:
 ReporteGramatical.agregarProduccionXpath("XPATH -> EXPRESION","XPATH.LISTA = [EXPRESION];");
                                    if($$[$0] instanceof NodoError) this.$ = [];
                                    else  this.$ = [$$[$0]];
                                  
break;
case 76:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> id","EXPRESION = NodoXpath(id);");
                                this.$ = new RootIdentifier($$[$0],[],_$[$0].first_line,_$[$0].first_column); 
break;
case 77:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> $id","EXPRESION = NodoXquery($id);");
                               this.$ = new Variable($$[$0],_$[$0].first_line,_$[$0].first_column); 
break;
case 78:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> node()","EXPRESION = NodoXpath('node');");
                                         this.$ = new RootNode([],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 79:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> .","EXPRESION = NodoXpath('.');");
                                                    this.$ = new RootCurrent([],_$[$0].first_line,_$[$0].first_column); 
break;
case 80:
  ReporteGramatical.agregarProduccionXpath("EXPREISON -> @ id","EXPREISON = new Atributo(id);");
                                                   this.$ = new RootAtributeIdentifier($$[$0],[],_$[$0-1].first_line, _$[$0-1].first_column ); 
break;
case 81:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> @ *","EXPRESION = new Atributo(times);");
                                               this.$ = new RootAtributeTimes([],_$[$0-1].first_line, _$[$0-1].first_column ); 
break;
case 82:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> _$[$0-2]()","EXPRESION = new Atributo(nodo);");
                                                           this.$ = new RootAtributeTimes([],_$[$0-3].first_line, _$[$0-3].first_column ); 
break;
case 83:
  ReporteGramatical.agregarProduccionXpath("EXPREISON -> @ id","EXPREISON = new Atributo(id);");
                                                                      this.$ = new RootAtributeIdentifier($$[$0-1],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column ); 
break;
case 84:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> @ *","EXPRESION = new Atributo(times);");
                                                                  this.$ = new RootAtributeTimes($$[$0],_$[$0-2].first_line, _$[$0-2].first_column ); 
break;
case 85:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> _$[$0-3]()","EXPRESION = new Atributo(nodo);");
                                                                              this.$ = new RootAtributeTimes($$[$0],_$[$0-4].first_line, _$[$0-4].first_column ); 
break;
case 86:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> id LISTA_PREDICADOS","EXPRESION = NodoXpath(id, LISTA_PREDICADOS);");
                                                  this.$ = new RootIdentifier($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 87:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> node LISTA_PREDICADOS","EXPRESION = NodoXpath('node', LISTA_PREDICADOS);");
                                                          this.$ = new RootNode($$[$0],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 88:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: id","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-2]]+"', "+$$[$0]+" );");
                                                              this.$ = AxeFabric.createAxeExpresion($$[$0-2],AxeOperation.identifier, $$[$0],[],_$[$0-1].first_line, _$[$0-1].first_column);
                                                            
break;
case 89:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: *","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-2]]+"', * );");
                                                         this.$ = AxeFabric.createAxeExpresion($$[$0-2],AxeOperation.times, "",[],_$[$0-1].first_line, _$[$0-1].first_column);
                                                       
break;
case 90:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: node()","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-4]]+"', node() );");
                                                                 this.$ = AxeFabric.createAxeExpresion($$[$0-4],AxeOperation.node, "",[],_$[$0-3].first_line, _$[$0-3].first_column);
                                                               
break;
case 91:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: text()","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-4]]+"', text() );");
                                                                 this.$ = AxeFabric.createAxeExpresion($$[$0-4],AxeOperation.text, "",[],_$[$0-3].first_line, _$[$0-3].first_column);
                                                               
break;
case 92:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: id LISTA_PREDICADOS","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-3]]+"', "+$$[$0-1]+", LISTA_PREDICADOS );");
                                                                          this.$ = AxeFabric.createAxeExpresion($$[$0-3],AxeOperation.identifier, $$[$0-1],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                                                        
break;
case 93:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: * LISTA_PREDICADOS","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-3]]+"', * , LISTA_PREDICADOS);");
                                                                     this.$ = AxeFabric.createAxeExpresion($$[$0-3],AxeOperation.times, "",$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                                                   
break;
case 94:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: node() LISTA_PREDICADOS","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-5]]+"', node(), LISTA_PREDICADOS );");
                                                                                  this.$ = AxeFabric.createAxeExpresion($$[$0-5],AxeOperation.node, "",$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
                                                                                
break;
case 95:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: text() LISTA_PREDICADOS","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-5]]+"', text(), LISTA_PREDICADOS );");
                                                                                  this.$ = AxeFabric.createAxeExpresion($$[$0-5],AxeOperation.text, "",$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
                                                                                
break;
case 96:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /id","EXPRESION = NodoXpath('/',id);");
                                        this.$ = new RootIdentifier($$[$0],[],_$[$0].first_line,_$[$0].first_column); 
break;
case 97:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /@id","EXPRESION = NodoXpath('/@',id);");
                                                            this.$ = new RootAtributeIdentifier($$[$0],[],_$[$0].first_line,_$[$0].first_column); 
break;
case 98:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> @ *","EXPRESION = new Atributo(times);");
                                                         this.$ = new RootAtributeTimes([],_$[$0-2].first_line, _$[$0-2].first_column ); 
break;
case 99:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> _$[$0-2]()","EXPRESION = new Atributo(nodo);");
                                                                     this.$ = new RootAtributeTimes([],_$[$0-4].first_line, _$[$0-4].first_column ); 
break;
case 100:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /.","EXPRESION = NodoXpath('/.');");
                                                this.$ = new RootCurrent([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 101:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /..","EXPRESION = NodoXpath('/..');");
                                                this.$ = new RootParent([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 102:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /*","EXPRESION = NodoXpath('/*');");
                                    this.$ = new RootTimes([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 103:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /node()","EXPRESION = NodoXpath('/node');");
                                                this.$ = new RootNode([],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 104:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: id","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-2]]+"', "+$$[$0]+" );");
                                                                this.$ = AxeFabric.createAxeExpresion($$[$0-2],AxeOperation.identifier, $$[$0],[],_$[$0-1].first_line, _$[$0-1].first_column);
                                                              
break;
case 105:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: *","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-2]]+"', * );");
                                                           this.$ = AxeFabric.createAxeExpresion($$[$0-2],AxeOperation.times, "",[],_$[$0-1].first_line, _$[$0-1].first_column);
                                                         
break;
case 106:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: node()","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-4]]+"', node() );");
                                                                        this.$ = AxeFabric.createAxeExpresion($$[$0-4],AxeOperation.node, "",[],_$[$0-3].first_line, _$[$0-3].first_column);
                                                                      
break;
case 107:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: text()","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-4]]+"', text() );");
                                                                        this.$ = AxeFabric.createAxeExpresion($$[$0-4],AxeOperation.text, "",[],_$[$0-3].first_line, _$[$0-3].first_column);
                                                                      
break;
case 108:
 ReporteGramatical.agregarProduccionXpath("Expresion -> /text()","Expresion = new TextExpresion();");
                                 this.$ = new RootText([], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 109:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> //id","EXPRESION = NodoXpath('//',id);");
                                        this.$ = new AnyIdentifier($$[$0],[],_$[$0].first_line,_$[$0].first_column); 
break;
case 110:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> //@id","EXPRESION = NodoXpath('//@',id);");
                                                            this.$ = new AnyAtributeIdentifier($$[$0],[],_$[$0].first_line,_$[$0].first_column); 
break;
case 111:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> //@ *","EXPRESION = new Atributo(/times);");
                                                       this.$ = new AnyAtributeTimes([],_$[$0-2].first_line, _$[$0-2].first_column ); 
break;
case 112:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> //_$[$0-2]()","EXPRESION = new Atributo(//nodo);");
                                                                   this.$ = new AnyAtributeTimes([],_$[$0-4].first_line, _$[$0-4].first_column ); 
break;
case 113:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> //.","EXPRESION = NodoXpath('//.');");
                                                this.$ = new AnyCurrent([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 114:
    ReporteGramatical.agregarProduccionXpath("EXPRESION -> //..","EXPRESION = NodoXpath('//..');");
                                                this.$ = new AnyParent([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 115:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> //*","EXPRESION = NodoXpath('//*');");
                                    this.$ = new AnyTimes([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 116:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> //node()","EXPRESION = NodoXpath('//node');");
                                                this.$ = new AnyNode([],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 117:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: id","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-2]]+"', "+$$[$0]+" );");
                                                                this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-2],AxeOperation.identifier, $$[$0],[],_$[$0-1].first_line, _$[$0-1].first_column);
                                                              
break;
case 118:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: *","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-2]]+"', * );");
                                                           this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-2],AxeOperation.times, "",[],_$[$0-1].first_line, _$[$0-1].first_column);
                                                         
break;
case 119:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: node()","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-4]]+"', node() );");
                                                                        this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-4],AxeOperation.node, "",[],_$[$0-3].first_line, _$[$0-3].first_column);
                                                                      
break;
case 120:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: text()","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-4]]+"', text() );");
                                                                        this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-4],AxeOperation.text, "",[],_$[$0-3].first_line, _$[$0-3].first_column);
                                                                      
break;
case 121:
 ReporteGramatical.agregarProduccionXpath("Expresion -> //text()","Expresion = new AnyTextExpresion();");
                                               this.$ = new AnyText([], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 122:
    ReporteGramatical.agregarProduccionXpath("EXPRESION -> /id LISTA_PREDICADOS","EXPRESION = NodoXpath('/',id, LISTA_PREDICADOS);");
                                                            this.$ = new RootIdentifier($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 123:
  ReporteGramatical.agregarProduccionXpath("EXPREISON -> /@ id","EXPREISON = new Atributo(/id);");
                                                                          this.$ = new RootAtributeIdentifier($$[$0-1],$$[$0],_$[$0-3].first_line, _$[$0-3].first_column ); 
break;
case 124:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> @ *","EXPRESION = new Atributo(times);");
                                                                      this.$ = new RootAtributeTimes($$[$0],_$[$0-3].first_line, _$[$0-3].first_column ); 
break;
case 125:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> /_$[$0-3]()","EXPRESION = new Atributo(/nodo);");
                                                                                   this.$ = new RootAtributeTimes($$[$0],_$[$0-5].first_line, _$[$0-5].first_column ); 
break;
case 126:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> '/.' LISTA_PREDICADOS","EXPRESION = NodoXpath('/.',LISTA_PREDICADOS);");
                                                                this.$ = new RootCurrent($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 127:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> '/..' LISTA_PREDICADOS","EXPRESION = NodoXpath('/..',LISTA_PREDICADOS);");
                                                                this.$ = new RootParent($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 128:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /* LISTA_PREDICADOS","EXPRESION = NodoXpath('/*',LISTA_PREDICADOS);");
                                                    this.$ = new RootTimes($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 129:
    ReporteGramatical.agregarProduccionXpath("EXPRESION -> '/node()' LISTA_PREDICADOS","EXPRESION = NodoXpath('/node',LISTA_PREDICADOS);");
                                                                    this.$ = new RootNode($$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 130:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: id LISTA_PREDICADOS","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-3]]+"', "+$$[$0-1]+", LISTA_PREDICADOS );");
                                                                                 this.$ = AxeFabric.createAxeExpresion($$[$0-3],AxeOperation.identifier, $$[$0-1],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                                                               
break;
case 131:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: * LISTA_PREDICADOS","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-3]]+"', * , LISTA_PREDICADOS);");
                                                                            this.$ = AxeFabric.createAxeExpresion($$[$0-3],AxeOperation.times, "",$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                                                          
break;
case 132:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: node()","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-5]]+"', node(), LISTA_PREDICADOS );");
                                                                                         this.$ = AxeFabric.createAxeExpresion($$[$0-5],AxeOperation.node, "",$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
                                                                                       
break;
case 133:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: text()","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-5]]+"', text(), LISTA_PREDICADOS );");
                                                                                         this.$ = AxeFabric.createAxeExpresion($$[$0-5],AxeOperation.text, "",$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
                                                                                        
break;
case 134:
 ReporteGramatical.agregarProduccionXpath("Expresion -> /text()","Expresion = new TextExpresion();");
                                                                 this.$ = new RootText($$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 135:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //id LISTA_PREDICADOS","EXPRESION = NodoXpath('//',id, LISTA_PREDICADOS);");
                                                        this.$ = new AnyIdentifier($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 136:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> //@id LISTA_PREDICADOS","EXPRESION = NodoXpath('//@',id,LISTA_PREDICADOS);");
                                                                            this.$ = new AnyAtributeIdentifier($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 137:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> //@ * LISTA_PREDICADOS","EXPRESION = new Atributo(//times,LISTA_PREDICADOS);");
                                                                         this.$ = new AnyAtributeTimes($$[$0],_$[$0-3].first_line, _$[$0-3].first_column ); 
break;
case 138:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> //_$[$0-3]() LISTA_PREDICADOS","EXPRESION = new Atributo(//nodo,LISTA_PREDICADOS);");
                                                                                     this.$ = new AnyAtributeTimes($$[$0],_$[$0-5].first_line, _$[$0-5].first_column ); 
break;
case 139:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> '//.' LISTA_PREDICADOS","EXPRESION = NodoXpath('//.',LISTA_PREDICADOS);");
                                                                this.$ = new AnyCurrent($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 140:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> '//..' LISTA_PREDICADOS","EXPRESION = NodoXpath('//..',LISTA_PREDICADOS);");
                                                                this.$ = new AnyParent($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 141:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> //* LISTA_PREDICADOS","EXPRESION = NodoXpath('//*',LISTA_PREDICADOS);");
                                                    this.$ = new AnyTimes($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 142:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //node() LISTA_PREDICADOS","EXPRESION = NodoXpath('//node',LISTA_PREDICADOS);");
                                                                this.$ = new AnyNode($$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 143:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: id LISTA_PREDICADOS","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-3]]+"', "+$$[$0-1]+", LISTA_PREDICADOS );");
                                                                                this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-3],AxeOperation.identifier, $$[$0-1],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                                                              
break;
case 144:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: * LISTA_PREDICADOS","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-3]]+"', * , LISTA_PREDICADOS);");
                                                                           this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-3],AxeOperation.times, "",$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                                                         
break;
case 145:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: node()","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-5]]+"', node(), LISTA_PREDICADOS );");
                                                                                        this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-5],AxeOperation.node, "",$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
                                                                                      
break;
case 146:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: text()","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-5]]+"', text(), LISTA_PREDICADOS );");
                                                                                        this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-5],AxeOperation.text, "",$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
                                                                                       
break;
case 147:
 ReporteGramatical.agregarProduccionXpath("Expresion -> //text()","Expresion = new AnyTextExpresion();");
                                                               this.$ = new AnyText($$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 148:

              ReporteGramatical.agregarProduccionXpath("EXPRESION -> error","ListaErrores.agregar(error)");
              ListaErrores.AgregarErrorXQUERY(new TokenError(TipoError.Sintactico,"No se esperaba: "+yytext,_$[$0].first_line,_$[$0].first_column));
              this.$ = new NodoError(_$[$0].first_line,_$[$0].first_column);
          
break;
case 149:
 ReporteGramatical.agregarProduccionXpath("LISTA_PREDICADOS -> LISTA_PREDICADOS [ PREDICADO ]","LISTA_PREDICADOS1.LISTA.ADD(PREDICADO); </br>LISTA_PREDICADOS.LISTA = LISTA_PREDICADOS1.LISTA;");
                                                                     $$[$0-3].push($$[$0-1]); this.$ = $$[$0-3]; 
break;
case 150:
 ReporteGramatical.agregarProduccionXpath("LISTA_PREDICADOS -> [ PREDICADO ]","LISTA_PREDICADOS.LISTA = []; </br>LISTA_PREDICADOS.LISTA.ADD(PREDICADO);");
                                                    this.$ = [$$[$0-1]];
                                                  
break;
case 151:
 ReporteGramatical.agregarProduccionXpath("PREDICADO -> EXPRESION_NUMERICA","PREDICADO = EXPRESION_NUMERICA;");
                                 this.$ = $$[$0]; 
break;
case 152:
 ReporteGramatical.agregarProduccionXpath("PREDICADO -> EXPRESION_RELACIONAL","PREDICADO = EXPRESION_RELACIONAL;");
                                   this.$ = $$[$0]; 
break;
case 153:
  ReporteGramatical.agregarProduccionXpath("PREDICADO -> EXPRESION_LOGICA","PREDICADO = EXPRESION_LOGICA;");
                                this.$ = $$[$0]; 
break;
case 154:
 ReporteGramatical.agregarProduccionXpath("PREDICADO -> PRIMITIVA","PREDICADO = PRIMITIVA;");
                        this.$ = $$[$0]; 
break;
case 155:
   ReporteGramatical.agregarProduccionXpath("PREDICADO -> ( PREDICADO )","PREDICADO = PREDICADO1;");
                                        this.$ = $$[$0-1]; 
break;
case 157:
 this.$ = new StringFunction($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 158:
 this.$ = new SubstringFunction($$[$0-5],$$[$0-3],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column); 
break;
case 159:
 this.$ = new SubstringFunction($$[$0-3],$$[$0-1],null,_$[$0-5].first_line,_$[$0-5].first_column); 
break;
case 160:
 this.$ = new UpperLowerCaseFunction($$[$0-1],true,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 161:
 this.$ = new UpperLowerCaseFunction($$[$0-1],false,_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 162:
 this.$ = new NumberFunction($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 163:
  ReporteGramatical.agregarProduccionXpath("PREDICADO -> PREDICADO or PREDICADO","PREDICADO = new OrLogica(PREDICADO1,PREDICADO2);");
                                            this.$ = new OrLogica($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 164:
 ReporteGramatical.agregarProduccionXpath("PREDICADO -> PREDICADO or PREDICADO","PREDICADO = new AndLogica(PREDICADO1,PREDICADO2);");
                                            this.$ = new AndLogica($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 165:
  ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO < PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'<');");
                                                this.$ = new Relational($$[$0-2],$$[$0],RelationalOperators.lessThan,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 166:
 ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO <= PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'<=');");
                                                this.$ = new Relational($$[$0-2],$$[$0],RelationalOperators.lessOrEqualThan,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 167:
  ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO > PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'>');");
                                                this.$ = new Relational($$[$0-2],$$[$0],RelationalOperators.greaterThan,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 168:
 ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO >= PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'>=');");
                                                this.$ = new Relational($$[$0-2],$$[$0],RelationalOperators.greaterOrEqualThan,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 169:
   ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO = PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'=');");
                                                    this.$ = new Comparison($$[$0-2],$$[$0],RelationalOperators.equal,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 170:
  ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO != PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'!=');");
                                                    this.$ = new Comparison($$[$0-2],$$[$0],RelationalOperators.notEqual,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 171:
  ReporteGramatical.agregarProduccionXpath("EXPRESION_NUMERICA -> PREDICADO + PREDICADO","PREDICADO = new Aritmetica(PREDICADO1,PREDICADO2,'+');");
                                                this.$ = new Suma($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 172:
 ReporteGramatical.agregarProduccionXpath("EXPRESION_NUMERICA -> PREDICADO - PREDICADO","PREDICADO = new Aritmetica(PREDICADO1,PREDICADO2,'-');");
                                                this.$ = new Resta($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 173:
 ReporteGramatical.agregarProduccionXpath("EXPRESION_NUMERICA -> PREDICADO * PREDICADO","PREDICADO = new Aritmetica(PREDICADO1,PREDICADO2,'*');");
                                                this.$ = new Multiplicacion($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 174:
   ReporteGramatical.agregarProduccionXpath("EXPRESION_NUMERICA -> PREDICADO div PREDICADO","PREDICADO = new Aritmetica(PREDICADO1,PREDICADO2,'/');");
                                                this.$ = new Division($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 175:
   ReporteGramatical.agregarProduccionXpath("EXPRESION_NUMERICA -> PREDICADO mod PREDICADO","PREDICADO = new Aritmetica(PREDICADO1,PREDICADO2,'%');");
                                                this.$ = new Modulo($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 176:
 this.$ = AxeType.ancestoOrSelfType; 
break;
case 177:
 this.$ = AxeType.ancestorType; 
break;
case 178:
 this.$ = AxeType.attributeType; 
break;
case 179:
 this.$ = AxeType.childType; 
break;
case 180:
 this.$ = AxeType.descendantOrSelfType; 
break;
case 181:
 this.$ = AxeType.descendantType; 
break;
case 182:
 this.$ = AxeType.followingSiblingType; 
break;
case 183:
 this.$ = AxeType.followingType; 
break;
case 184:
 this.$ = AxeType.namespaceType; 
break;
case 185:
 this.$ = AxeType.precedingSiblingType; 
break;
case 186:
 this.$ = AxeType.precedingType; 
break;
case 187:
 this.$ = AxeType.parentType; 
break;
case 188:
 this.$ = AxeType.selfType; 
break;
case 189:
 ReporteGramatical.agregarProduccionXpath("FUNCION_NATIVA -> last()","FUNCION_NATIVA = new FuncionNativa('last');");
                                     this.$ = new NativeFunctionExpresion(NativeFunction.last, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 190:
    ReporteGramatical.agregarProduccionXpath("FUNCION_NATIVA -> position()","FUNCION_NATIVA = new FuncionNativa('position');");
                                            this.$ = new NativeFunctionExpresion(NativeFunction.position, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 191:
 ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> LISTA-XPATH","PRIMITIVA = new ListaXpath( LISTA-XPATH );");
                         this.$ = new ListaXpathExpresion($$[$0], _$[$0].first_line,_$[$0].first_column); 
break;
case 192:
 ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> FUNCION_NATIVA-XPATH","PRIMITIVA = FUNCION_NATIVA;");
                            this.$ = $$[$0]; 
break;
case 193:
  ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> decimal","PRIMITIVA = new PRIMITIVA(Tipo.Decimal,decimal);");
                            this.$ = new Primitive(Number($$[$0]), new Tipo(TipoDato.numero),_$[$0].first_line, _$[$0].first_column ); 
break;
case 194:
 ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> entero","PRIMITIVA = new PRIMITIVA(Tipo.entero,entero);");
                            this.$ = new Primitive(Number($$[$0]), new Tipo(TipoDato.numero),_$[$0].first_line, _$[$0].first_column ); 
break;
case 195:
  ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> cadena","PRIMITIVA = new PRIMITIVA(Tipo.cadena,cadena);");
                            this.$ = new Primitive($$[$0].substr(1,$$[$0].length-2), new Tipo(TipoDato.cadena),_$[$0].first_line, _$[$0].first_column ); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,19:$V0,24:$V1,25:$V2,28:$V3,33:$V4,42:$V5,54:18,56:$V6,59:$V7,68:$V8},{1:[3]},{5:[1,24]},{5:[2,2],7:25,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,19:$V0,24:$V1,25:$V2,28:$V3,33:$V4,42:$V5,54:18,56:$V6,59:$V7,68:$V8},o($V9,[2,4]),o($V9,[2,5]),o($V9,[2,6]),o($V9,[2,7]),o($V9,[2,8]),o($V9,[2,9]),o($V9,[2,10]),o($V9,[2,11]),o($V9,[2,12]),o($V9,[2,13]),{25:[1,26]},{26:[1,27]},{25:[1,28],49:29,50:30},{20:[1,31]},{55:32,58:[1,33]},{2:$Va,10:35,11:36,12:37,20:$Vb,21:34,23:38,25:$Vc,28:$Vd,29:$Ve,31:50,42:$V5,44:45,51:$Vf,54:18,56:$V6,66:$Vg,68:$V8,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{34:[1,84]},{26:[1,85]},{20:[1,86]},{20:[1,87]},{1:[2,1]},o($V9,[2,3]),{26:[1,88]},{27:[1,89]},{43:[1,90],48:[1,91]},{13:92,32:[1,93],59:$V7},o($VH,[2,52]),{2:$Va,25:$Vc,29:$Ve,44:94,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VI,[2,57],{58:[1,95]}),{20:[1,97],54:96,56:$V6},o($VI,[2,63]),o($VI,[2,25]),o($VI,[2,26]),o($VI,[2,27]),o($VI,[2,28],{27:$VJ,76:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV}),o($VW,[2,151]),o($VW,[2,152]),o($VW,[2,153]),o($VW,[2,154]),{2:$Va,20:$Vb,23:111,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},o($VW,[2,156]),o($VW,[2,191],{69:$VX}),o($VW,[2,192]),o($VW,[2,193]),o($VW,[2,194]),o($VW,[2,195]),o($VW,[2,196]),{20:[1,113]},{20:[1,114]},{20:[1,115]},{20:[1,116]},{20:[1,117]},o($VY,[2,72],{71:118,2:$Va,81:$Vk,83:$Vl}),{20:[1,119]},{20:[1,120]},{26:[1,121]},o($VZ,[2,74]),o($VZ,[2,75]),{29:[1,122],73:[1,127],74:[1,124],75:[1,123],76:[1,126],78:128,80:[1,129],82:[1,125],106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{29:[1,130],73:[1,135],74:[1,132],75:[1,131],76:[1,134],78:136,80:[1,137],82:[1,133],106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},o($VZ,[2,148]),o($VZ,[2,76],{77:138,84:$V_}),o($VZ,[2,77]),{20:[1,140]},o($VZ,[2,79]),{29:[1,141],73:[1,143],76:[1,142]},{79:[1,144]},{79:[2,176]},{79:[2,177]},{79:[2,178]},{79:[2,179]},{79:[2,180]},{79:[2,181]},{79:[2,182]},{79:[2,183]},{79:[2,184]},{79:[2,185]},{79:[2,186]},{79:[2,187]},{79:[2,188]},{28:[1,145]},{29:[1,146]},{2:$Va,10:35,11:36,12:37,20:$Vb,21:147,23:38,25:$Vc,28:$Vd,29:$Ve,31:50,42:$V5,44:45,51:$Vf,54:18,56:$V6,66:$Vg,68:$V8,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{2:$Va,20:$Vb,23:148,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{27:[1,149]},{2:$Va,20:$Vb,23:150,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{2:$Va,20:$V$,25:$Vc,29:$Ve,44:151,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{25:[1,153]},o($VI,[2,50]),{25:[1,155],50:154},{22:[1,156],69:$VX},{20:[1,158],54:157,56:$V6},o($V01,[2,61]),{8:161,9:162,10:165,11:166,12:168,13:163,15:167,16:164,17:159,18:160,19:$V0,24:$V1,25:$V2,28:$V3,42:$V5,54:18,56:$V6,59:$V7,68:$V8},{2:$Va,20:$Vb,23:169,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{2:$Va,20:$Vb,23:170,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{2:$Va,20:$Vb,23:171,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{2:$Va,20:$Vb,23:172,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{2:$Va,20:$Vb,23:173,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{2:$Va,20:$Vb,23:174,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{2:$Va,20:$Vb,23:175,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{2:$Va,20:$Vb,23:176,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{2:$Va,20:$Vb,23:177,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{2:$Va,20:$Vb,23:178,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{2:$Va,20:$Vb,23:179,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{2:$Va,20:$Vb,23:180,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{2:$Va,20:$Vb,23:181,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{22:[1,182],27:$VJ,76:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV},{2:$Va,25:$Vc,29:$Ve,70:183,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{2:$Va,20:$Vb,23:184,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{2:$Va,20:$Vb,23:185,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{2:$Va,20:$Vb,23:186,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{2:$Va,20:$Vb,23:187,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{2:$Va,20:$Vb,23:188,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},o($VZ,[2,73]),{22:[1,189]},{22:[1,190]},{29:[1,191]},o($VZ,[2,96],{77:192,84:$V_}),{29:[1,193],73:[1,195],76:[1,194]},o($VZ,[2,100],{77:196,84:$V_}),o($VZ,[2,101],{77:197,84:$V_}),o($VZ,[2,102],{77:198,84:$V_}),{20:[1,199]},{79:[1,200]},{20:[1,201]},o($VZ,[2,109],{77:202,84:$V_}),{29:[1,203],73:[1,205],76:[1,204]},o($VZ,[2,113],{77:206,84:$V_}),o($VZ,[2,114],{77:207,84:$V_}),o($VZ,[2,115],{77:208,84:$V_}),{20:[1,209]},{79:[1,210]},{20:[1,211]},o($VZ,[2,86],{84:$V11}),{2:$Va,20:$Vb,23:213,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{22:[1,214]},o($VZ,[2,80],{77:215,84:$V_}),o($VZ,[2,81],{77:216,84:$V_}),{20:[1,217]},{29:[1,218],73:[1,220],76:[1,219],80:[1,221]},{26:[1,222]},{20:[1,223]},{22:[1,224]},{22:[1,225],27:$VJ,76:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV},{2:$Va,20:$Vb,23:226,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},o($VI,[2,30],{27:$VJ,76:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV}),{13:229,45:[1,227],46:[1,228],59:$V7,69:$VX},{51:[1,230],53:231},{43:[1,232]},o($VH,[2,51]),{43:[1,233]},o($VI,[2,70]),o($V01,[2,59]),{8:161,9:162,10:165,11:166,12:168,13:163,15:167,16:164,17:234,18:160,19:$V0,24:$V1,25:$V2,28:$V3,42:$V5,54:18,56:$V6,59:$V7,68:$V8},{8:161,9:162,10:165,11:166,12:168,13:163,15:167,16:164,18:236,19:$V0,22:[1,235],24:$V1,25:$V2,28:$V3,42:$V5,54:18,56:$V6,59:$V7,68:$V8},o($V21,[2,15]),o($V21,[2,16]),o($V21,[2,17]),o($V21,[2,18]),o($V21,[2,19]),o($V21,[2,20]),o($V21,[2,21]),o($V21,[2,22]),o($V21,[2,23]),o($V31,[2,171],{76:$VK,104:$VU,105:$VV}),o($V31,[2,172],{76:$VK,104:$VU,105:$VV}),o($VW,[2,173]),o($VW,[2,174]),o($VW,[2,175]),o($V41,[2,165],{76:$VK,102:$VS,103:$VT,104:$VU,105:$VV}),o($V41,[2,166],{76:$VK,102:$VS,103:$VT,104:$VU,105:$VV}),o($V41,[2,167],{76:$VK,102:$VS,103:$VT,104:$VU,105:$VV}),o($V41,[2,168],{76:$VK,102:$VS,103:$VT,104:$VU,105:$VV}),o($V41,[2,169],{76:$VK,102:$VS,103:$VT,104:$VU,105:$VV}),o($V41,[2,170],{76:$VK,102:$VS,103:$VT,104:$VU,105:$VV}),o([5,19,22,24,25,28,32,33,39,42,46,56,59,68,85,95],[2,163],{27:$VJ,76:$VK,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV}),o([5,19,22,24,25,28,32,33,39,42,46,56,59,68,85,95,96],[2,164],{27:$VJ,76:$VK,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV}),o($VW,[2,155]),o($VY,[2,71],{71:118,2:$Va,81:$Vk,83:$Vl}),{22:[1,237],27:$VJ,76:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV},{27:$VJ,32:[1,238],76:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV},{22:[1,239],27:$VJ,76:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV},{22:[1,240],27:$VJ,76:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV},{22:[1,241],27:$VJ,76:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV},o($VW,[2,189]),o($VW,[2,190]),{20:[1,242]},o($VZ,[2,122],{84:$V11}),o($VZ,[2,97],{77:243,84:$V_}),o($VZ,[2,98],{77:244,84:$V_}),{20:[1,245]},o($VZ,[2,126],{84:$V11}),o($VZ,[2,127],{84:$V11}),o($VZ,[2,128],{84:$V11}),{22:[1,246]},{29:[1,247],73:[1,249],76:[1,248],80:[1,250]},{22:[1,251]},o($VZ,[2,135],{84:$V11}),o($VZ,[2,110],{77:252,84:$V_}),o($VZ,[2,111],{77:253,84:$V_}),{20:[1,254]},o($VZ,[2,139],{84:$V11}),o($VZ,[2,140],{84:$V11}),o($VZ,[2,141],{84:$V11}),{22:[1,255]},{29:[1,256],73:[1,258],76:[1,257],80:[1,259]},{22:[1,260]},{2:$Va,20:$Vb,23:261,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{27:$VJ,76:$VK,85:[1,262],95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV},o($VZ,[2,78],{77:263,84:$V_}),o($VZ,[2,83],{84:$V11}),o($VZ,[2,84],{84:$V11}),{22:[1,264]},o($VZ,[2,88],{77:265,84:$V_}),o($VZ,[2,89],{77:266,84:$V_}),{20:[1,267]},{20:[1,268]},{29:[1,269]},{2:$Va,20:$Vb,22:[1,270],23:272,25:$Vc,28:$Vd,29:$Ve,30:271,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},o($VI,[2,24]),{57:[1,273]},o($VI,[2,29],{27:$VJ,76:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV}),{25:[1,274]},{47:[1,275]},o($VI,[2,45]),o($V51,[2,56],{52:[1,276]}),{22:[1,277],32:[1,278]},{2:$Va,25:$Vc,29:$Ve,44:279,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC},{20:$V$},{8:161,9:162,10:165,11:166,12:168,13:163,15:167,16:164,18:236,19:$V0,22:[1,280],24:$V1,25:$V2,28:$V3,42:$V5,54:18,56:$V6,59:$V7,68:$V8},o($V01,[2,62]),o($V21,[2,14]),o($VW,[2,157]),{2:$Va,20:$Vb,23:281,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},o($VW,[2,160]),o($VW,[2,161]),o($VW,[2,162]),{2:$Va,20:$Vb,22:[1,282],23:272,25:$Vc,28:$Vd,29:$Ve,30:283,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},o($VZ,[2,123],{84:$V11}),o($VZ,[2,124],{84:$V11}),{22:[1,284]},o($VZ,[2,103],{77:285,84:$V_}),o($VZ,[2,104],{77:286,84:$V_}),o($VZ,[2,105],{77:287,84:$V_}),{20:[1,288]},{20:[1,289]},o($VZ,[2,108],{77:290,84:$V_}),o($VZ,[2,136],{84:$V11}),o($VZ,[2,137],{84:$V11}),{22:[1,291]},o($VZ,[2,116],{77:292,84:$V_}),o($VZ,[2,117],{77:293,84:$V_}),o($VZ,[2,118],{77:294,84:$V_}),{20:[1,295]},{20:[1,296]},o($VZ,[2,121],{77:297,84:$V_}),{27:$VJ,76:$VK,85:[1,298],95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV},o($V61,[2,150]),o($VZ,[2,87],{84:$V11}),o($VZ,[2,82],{77:299,84:$V_}),o($VZ,[2,92],{84:$V11}),o($VZ,[2,93],{84:$V11}),{22:[1,300]},{22:[1,301]},{20:[1,302]},o($VI,[2,31]),{22:[1,303],32:$V71},o($V51,[2,36],{27:$VJ,76:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV}),{20:[1,305]},{2:$Va,20:$Vb,23:306,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{2:$Va,20:$Vb,23:307,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{51:[1,308]},o($VH,[2,54]),{51:[1,309]},{13:312,45:[1,310],46:[1,311],59:$V7,69:$VX},o($V01,[2,60]),{22:[1,314],27:$VJ,32:[1,313],76:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV},o($VW,[2,33]),{22:[1,315],32:$V71},o($VZ,[2,99],{77:316,84:$V_}),o($VZ,[2,129],{84:$V11}),o($VZ,[2,130],{84:$V11}),o($VZ,[2,131],{84:$V11}),{22:[1,317]},{22:[1,318]},o($VZ,[2,134],{84:$V11}),o($VZ,[2,112],{77:319,84:$V_}),o($VZ,[2,142],{84:$V11}),o($VZ,[2,143],{84:$V11}),o($VZ,[2,144],{84:$V11}),{22:[1,320]},{22:[1,321]},o($VZ,[2,147],{84:$V11}),o($V61,[2,149]),o($VZ,[2,85],{84:$V11}),o($VZ,[2,90],{77:322,84:$V_}),o($VZ,[2,91],{77:323,84:$V_}),{22:[1,325],25:$V81,35:324,41:326},o($VI,[2,32]),{2:$Va,20:$Vb,23:328,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{8:161,9:162,10:165,11:166,12:168,13:163,15:167,16:164,17:329,18:160,19:$V0,24:$V1,25:$V2,28:$V3,42:$V5,54:18,56:$V6,59:$V7,68:$V8},{13:331,27:$VJ,46:[1,330],59:$V7,76:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV},{13:332,27:$VJ,59:$V7,76:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV},{22:[1,333]},o($V51,[2,55]),{2:$Va,20:$Vb,23:334,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{47:[1,335]},o($VI,[2,49]),{2:$Va,20:$Vb,23:336,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},o($VW,[2,159]),o($VW,[2,34]),o($VZ,[2,125],{84:$V11}),o($VZ,[2,106],{77:337,84:$V_}),o($VZ,[2,107],{77:338,84:$V_}),o($VZ,[2,138],{84:$V11}),o($VZ,[2,119],{77:339,84:$V_}),o($VZ,[2,120],{77:340,84:$V_}),o($VZ,[2,94],{84:$V11}),o($VZ,[2,95],{84:$V11}),{22:[1,341],32:[1,342]},{36:[1,343]},o($V51,[2,40]),{36:[1,344]},o($V51,[2,35],{27:$VJ,76:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV}),{8:161,9:162,10:165,11:166,12:168,13:163,15:167,16:164,18:236,19:$V0,22:[1,345],24:$V1,25:$V2,28:$V3,42:$V5,54:18,56:$V6,59:$V7,68:$V8},{47:[1,346]},o($VI,[2,43]),o($VI,[2,44]),o($VH,[2,53]),{13:348,27:$VJ,46:[1,347],59:$V7,76:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV},{2:$Va,20:$Vb,23:349,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{22:[1,350],27:$VJ,76:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV},o($VZ,[2,132],{84:$V11}),o($VZ,[2,133],{84:$V11}),o($VZ,[2,145],{84:$V11}),o($VZ,[2,146],{84:$V11}),{36:[1,351]},{25:$V81,41:352},{37:353,60:$V91},{37:355,60:$V91},o($V01,[2,58]),{2:$Va,20:$Vb,23:356,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},{47:[1,357]},o($VI,[2,47]),{13:358,27:$VJ,59:$V7,76:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV},o($VW,[2,158]),{37:359,60:$V91},o($V51,[2,39]),{38:[1,360]},{26:[1,361]},o($V51,[2,41]),{13:362,27:$VJ,59:$V7,76:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV},{2:$Va,20:$Vb,23:363,25:$Vc,28:$Vd,29:$Ve,31:50,44:45,51:$Vf,66:$Vg,70:56,71:60,72:61,73:$Vh,74:$Vi,75:$Vj,78:70,81:$Vk,83:$Vl,86:39,87:40,88:41,89:42,90:44,91:$Vm,92:$Vn,93:$Vo,94:$Vp,106:$Vq,107:$Vr,108:$Vs,109:$Vt,110:$Vu,111:$Vv,112:$Vw,113:$Vx,114:$Vy,115:$Vz,116:$VA,117:$VB,118:$VC,119:46,120:$VD,121:$VE,122:$VF,123:$VG},o($VI,[2,48]),{38:[1,364]},{8:161,9:162,10:165,11:166,12:168,13:163,15:167,16:164,17:365,18:160,19:$V0,24:$V1,25:$V2,28:$V3,42:$V5,54:18,56:$V6,59:$V7,68:$V8},{61:[1,366],63:[1,367],64:[1,368],65:[1,369],66:[1,370],67:[1,371]},o($VI,[2,42]),{13:372,27:$VJ,59:$V7,76:$VK,95:$VL,96:$VM,97:$VN,98:$VO,99:$VP,100:$VQ,101:$VR,102:$VS,103:$VT,104:$VU,105:$VV},{8:161,9:162,10:165,11:166,12:168,13:163,15:167,16:164,17:373,18:160,19:$V0,24:$V1,25:$V2,28:$V3,42:$V5,54:18,56:$V6,59:$V7,68:$V8},{8:161,9:162,10:165,11:166,12:168,13:163,15:167,16:164,18:236,19:$V0,24:$V1,25:$V2,28:$V3,39:[1,374],42:$V5,54:18,56:$V6,59:$V7,68:$V8},{62:[1,375]},{62:[1,376]},{62:[1,377]},{62:[1,378]},{62:[1,379]},{62:[1,380]},o($VI,[2,46]),{8:161,9:162,10:165,11:166,12:168,13:163,15:167,16:164,18:236,19:$V0,24:$V1,25:$V2,28:$V3,39:[1,381],42:$V5,54:18,56:$V6,59:$V7,68:$V8},{40:[1,382]},o($Va1,[2,64]),o($Va1,[2,65]),o($Va1,[2,66]),o($Va1,[2,67]),o($Va1,[2,68]),o($Va1,[2,69]),{40:[1,383]},o($V9,[2,38]),o($V9,[2,37])],
defaultActions: {24:[2,1],71:[2,176],72:[2,177],73:[2,178],74:[2,179],75:[2,180],76:[2,181],77:[2,182],78:[2,183],79:[2,184],80:[2,185],81:[2,186],82:[2,187],83:[2,188]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.begin('comment');
break;
case 1:this.popState();
break;
case 2:/* skip comment content*/
break;
case 3:/* skip whitespace */
break;
case 4:return 91;
break;
case 5:return 92;
break;
case 6:return 93;
break;
case 7:return 94;
break;
case 8:return 19;
break;
case 9:return 33;
break;
case 10:return 34;
break;
case 11:return 28;
break;
case 12:return 36;
break;
case 13:return 60;
break;
case 14:return 63;
break;
case 15:return 64;
break;
case 16:return 65;
break;
case 17:return 66;
break;
case 18:return 67;
break;
case 19:return 61;
break;
case 20:return 52;
break;
case 21:return 48;
break;
case 22:return 56;
break;
case 23:return 58;
break;
case 24:return 57;
break;
case 25:return 68;
break;
case 26:return 42;
break;
case 27:return 43;
break;
case 28:return 45;
break;
case 29:return 46;
break;
case 30:return 47;
break;
case 31:return 59;
break;
case 32:return 24;
break;
case 33:return 73;
break;
case 34:return 120;
break;
case 35:return 121;
break;
case 36:return 80;
break;
case 37:return 106;
break;
case 38:return 107;
break;
case 39:return 108;
break;
case 40:return 109;
break;
case 41:return 110;
break;
case 42:return 111;
break;
case 43:return 112;
break;
case 44:return 113;
break;
case 45:return 114;
break;
case 46:return 115;
break;
case 47:return 117;
break;
case 48:return 116;
break;
case 49:return 118;
break;
case 50:return 79;
break;
case 51:return 26;
break;
case 52:return 40;
break;
case 53:return 83;
break;
case 54:return 81;
break;
case 55:return 82;
break;
case 56:return 74;
break;
case 57:return 75;
break;
case 58:return 62;
break;
case 59:return 102;
break;
case 60:return 103;
break;
case 61:return 76;
break;
case 62:return 104;
break;
case 63:return 105;
break;
case 64:return 98;
break;
case 65:return 100;
break;
case 66:return 97;
break;
case 67:return 99;
break;
case 68:return 101;
break;
case 69:return 27;
break;
case 70:return 96;
break;
case 71:return 95;
break;
case 72:return 20;
break;
case 73:return 22;
break;
case 74:return 84;
break;
case 75:return 85;
break;
case 76:return 38;
break;
case 77:return 39;
break;
case 78:return 69;
break;
case 79:return 32;
break;
case 80:return 123
break;
case 81:return 123
break;
case 82:return 123
break;
case 83:return 123
break;
case 84:return 123
break;
case 85:return 122;
break;
case 86:return 51;
break;
case 87:return 25
break;
case 88:return 29
break;
case 89:
                                        ListaErrores.AgregarErrorXQUERY(new TokenError(TipoError.Lexico,"No se reconocio el token "+yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));
                                    
break;
case 90:return 5
break;
}
},
rules: [/^(?:\(:)/i,/^(?::\))/i,/^(?:.)/i,/^(?:\s+)/i,/^(?:substring\b)/i,/^(?:upper-case\b)/i,/^(?:lower-case\b)/i,/^(?:number\b)/i,/^(?:imprimir\b)/i,/^(?:declare\b)/i,/^(?:function\b)/i,/^(?:local\b)/i,/^(?:as\b)/i,/^(?:xs\b)/i,/^(?:decimal\b)/i,/^(?:float\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:int\b)/i,/^(?:anyURI\b)/i,/^(?:to\b)/i,/^(?:at\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:then\b)/i,/^(?:data\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:where\b)/i,/^(?:order\b)/i,/^(?:by\b)/i,/^(?:return\b)/i,/^(?:let\b)/i,/^(?:node\b)/i,/^(?:last\b)/i,/^(?:position\b)/i,/^(?:text\b)/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:following-sibling\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:preceding-sibling\b)/i,/^(?:parent\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:::)/i,/^(?::)/i,/^(?:;)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:@)/i,/^(?:\?)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:div\b)/i,/^(?:mod\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\|)/i,/^(?:,)/i,/^(?:“[^\"\n]*”)/i,/^(?:"[^\"\n]*")/i,/^(?:'[^''\n]*')/i,/^(?:‘[^''\n]*’)/i,/^(?:`[^''\n]*`)/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:\$[a-zA-ZñÑáéíóúÁÉÍÓÚ]([a-zA-Z0-9ñÑáéíóúÁÉÍÓÚ]|_)*)/i,/^(?:[a-zA-ZñÑáéíóúÁÉÍÓÚ]([a-zA-Z0-9ñÑáéíóúÁÉÍÓÚ]|_|-)*)/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],"inclusive":true},"INITIAL":{"rules":[0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XqueryAnalyzer;
exports.Parser = XqueryAnalyzer.Parser;
exports.parse = function () { return XqueryAnalyzer.parse.apply(XqueryAnalyzer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}