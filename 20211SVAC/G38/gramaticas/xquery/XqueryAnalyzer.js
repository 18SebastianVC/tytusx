/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XqueryAnalyzer = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,41],$V1=[1,7],$V2=[1,42],$V3=[1,39],$V4=[1,25],$V5=[1,23],$V6=[1,24],$V7=[1,26],$V8=[1,43],$V9=[1,32],$Va=[1,13],$Vb=[1,31],$Vc=[1,27],$Vd=[1,36],$Ve=[1,30],$Vf=[1,28],$Vg=[1,44],$Vh=[1,45],$Vi=[1,46],$Vj=[1,40],$Vk=[1,48],$Vl=[1,49],$Vm=[1,50],$Vn=[1,51],$Vo=[1,52],$Vp=[1,53],$Vq=[1,54],$Vr=[1,55],$Vs=[1,56],$Vt=[1,57],$Vu=[1,58],$Vv=[1,59],$Vw=[1,60],$Vx=[1,34],$Vy=[1,35],$Vz=[5,8],$VA=[5,21],$VB=[1,70],$VC=[1,72],$VD=[1,74],$VE=[1,67],$VF=[1,76],$VG=[1,77],$VH=[1,71],$VI=[1,73],$VJ=[1,75],$VK=[1,65],$VL=[1,66],$VM=[1,68],$VN=[1,69],$VO=[1,78],$VP=[5,21,33,38,43,49,62,65,76],$VQ=[5,8,10,21,33,36,38,40,42,43,49,53,62,65,76,84,92,97,98,99,100,101,102,103,104,105],$VR=[1,80],$VS=[5,8,10,21,33,36,38,40,42,43,49,52,53,62,65,76,77,84,92,97,98,99,100,101,102,103,104,105],$VT=[2,5,8,10,12,21,33,36,38,40,42,43,49,52,53,62,65,76,77,84,90,92,97,98,99,100,101,102,103,104,105],$VU=[1,118],$VV=[42,52,53,65],$VW=[5,21,33,38,40,43,49,62,65,76],$VX=[1,176],$VY=[5,8,10,21,33,36,38,40,42,43,49,53,62,65,76,92,97,98,99,100,101,102,103],$VZ=[5,8,10,21,33,36,38,40,42,43,49,53,62,65,76,92,97,98,99,100,101],$V_=[1,189],$V$=[1,190],$V01=[1,191],$V11=[1,192],$V21=[1,193],$V31=[1,194],$V41=[1,195],$V51=[1,196],$V61=[1,199],$V71=[5,21,33,38,40,43,49,62,64,65,76],$V81=[8,9,14,15,16,17,18,19,20],$V91=[2,5,8,10,12,21,33,36,38,40,42,43,49,52,53,62,65,76,77,84,90,91,92,97,98,99,100,101,102,103,104,105],$Va1=[40,42],$Vb1=[1,316],$Vc1=[5,8,21,33,38,40,43,49,62,65,76],$Vd1=[1,343],$Ve1=[20,40,42];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"HTML_TAGS":4,"EOF":5,"XQUERY_XPATH":6,"HTML_TAG":7,"lt":8,"identifier":9,"gt":10,"TEXTO":11,"root_expresion":12,"VALOR":13,"str":14,"signo_especial":15,"caracter_especial":16,"signo":17,"DoubleLiteral":18,"IntegerLiteral":19,"lllave":20,"rllave":21,"XQUERY":22,"PREDICATE":23,"INSTRUCCION":24,"DECLARACION":25,"FLOWER":26,"FUNCIONES_NATIVAS_XQUERY":27,"IF_XQUERY":28,"RETURN_QUERY":29,"DECLARACION_FUNCION":30,"LLAMADA_FUNCION":31,"INSTRUCCION_RETORNO":32,"let":33,"variable":34,"colon":35,"equal":36,"ASIGNACION":37,"local":38,"lparen":39,"rparen":40,"LISTA_VALORES":41,"coma":42,"declare_terminal":43,"function_terminal":44,"LISTA_PARAMETROS":45,"as_terminal":46,"TIPO_DATO":47,"semicolon":48,"for_terminal":49,"in":50,"LISTA-XPATH":51,"where":52,"order":53,"by":54,"at":55,"LISTA_VALORES_FLOWER":56,"VALOR_FLOWER":57,"to":58,"LISTA_NUMEROS":59,"SENTENCIA_IF":60,"LISTA_ELSE_IF":61,"if":62,"then":63,"else":64,"return_terminal":65,"VALOR_RETORNO":66,"PARAMETRO":67,"xs":68,"anyURI":69,"question":70,"decimal_t":71,"float_t":72,"boolean_t":73,"string_t":74,"int_t":75,"data":76,"node_set":77,"XPATH-EXPRESION":78,"EXPRESION":79,"FIRST_EXPRESION":80,"node":81,"current_expresion":82,"atribute_expresion":83,"times":84,"LISTA_PREDICATES":85,"AXES_NAME":86,"axe_connector":87,"text":88,"parent_expresion":89,"any_expresion":90,"lcorchetes":91,"rcorchetes":92,"EXPRESION_NUMERICA":93,"EXPRESION_RELACIONAL":94,"EXPRESION_LOGICA":95,"PRIMITIVA":96,"or":97,"and":98,"lte":99,"gte":100,"nequal":101,"plus":102,"minus":103,"div":104,"mod":105,"ancestor-or-self":106,"ancestor":107,"attribute":108,"child":109,"descendant-or-self":110,"descendant":111,"following-sibling":112,"following":113,"namespace":114,"preceding-sibling":115,"preceding":116,"parent":117,"self":118,"FUNCION_NATIVA":119,"last":120,"position":121,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"lt",9:"identifier",10:"gt",12:"root_expresion",14:"str",15:"signo_especial",16:"caracter_especial",17:"signo",18:"DoubleLiteral",19:"IntegerLiteral",20:"lllave",21:"rllave",33:"let",34:"variable",35:"colon",36:"equal",38:"local",39:"lparen",40:"rparen",42:"coma",43:"declare_terminal",44:"function_terminal",46:"as_terminal",48:"semicolon",49:"for_terminal",50:"in",52:"where",53:"order",54:"by",55:"at",58:"to",62:"if",63:"then",64:"else",65:"return_terminal",68:"xs",69:"anyURI",70:"question",71:"decimal_t",72:"float_t",73:"boolean_t",74:"string_t",75:"int_t",76:"data",77:"node_set",81:"node",82:"current_expresion",83:"atribute_expresion",84:"times",87:"axe_connector",88:"text",89:"parent_expresion",90:"any_expresion",91:"lcorchetes",92:"rcorchetes",97:"or",98:"and",99:"lte",100:"gte",101:"nequal",102:"plus",103:"minus",104:"div",105:"mod",106:"ancestor-or-self",107:"ancestor",108:"attribute",109:"child",110:"descendant-or-self",111:"descendant",112:"following-sibling",113:"following",114:"namespace",115:"preceding-sibling",116:"preceding",117:"parent",118:"self",120:"last",121:"position"},
productions_: [0,[3,2],[3,2],[4,2],[4,1],[7,8],[7,8],[11,2],[11,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[13,3],[6,1],[6,1],[22,2],[22,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[32,1],[32,1],[32,1],[32,1],[32,1],[32,1],[25,5],[37,4],[31,5],[31,6],[41,3],[41,1],[30,14],[30,13],[26,10],[26,7],[26,8],[26,5],[26,12],[26,9],[26,10],[26,7],[26,8],[26,5],[26,6],[26,3],[56,3],[56,1],[57,7],[57,5],[59,3],[59,1],[28,2],[60,8],[61,3],[61,5],[61,2],[61,4],[29,2],[66,1],[66,1],[45,3],[45,1],[67,3],[47,4],[47,4],[47,4],[47,4],[47,4],[47,4],[27,4],[51,3],[51,1],[78,2],[78,1],[78,1],[80,1],[80,1],[80,3],[80,1],[80,2],[80,2],[80,4],[80,3],[80,3],[80,5],[80,2],[80,4],[80,3],[80,3],[80,5],[80,5],[80,4],[80,4],[80,6],[80,6],[79,2],[79,3],[79,3],[79,5],[79,2],[79,2],[79,2],[79,4],[79,4],[79,4],[79,6],[79,6],[79,4],[79,2],[79,3],[79,3],[79,5],[79,2],[79,2],[79,2],[79,4],[79,4],[79,4],[79,6],[79,6],[79,4],[79,3],[79,4],[79,4],[79,6],[79,3],[79,3],[79,3],[79,5],[79,5],[79,5],[79,7],[79,7],[79,5],[79,3],[79,4],[79,4],[79,6],[79,3],[79,3],[79,3],[79,5],[79,5],[79,5],[79,7],[79,7],[79,5],[79,1],[85,4],[85,3],[23,1],[23,1],[23,1],[23,1],[23,3],[95,3],[95,3],[94,3],[94,3],[94,3],[94,3],[94,3],[94,3],[93,3],[93,3],[93,3],[93,3],[93,3],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[119,3],[119,3],[96,1],[96,1],[96,1],[96,1],[96,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 3: case 5:

                
break;
case 4:


                
break;
case 7:

                    ReporteGramatical.agregarProduccionXML("CONTENIDO -> CONTENIDO VALOR"
                                    ,"$$=$$[$0-1]+$$[$0];");
                    this.$=$$[$0-1]+$$[$0];
                
break;
case 8:

                    ReporteGramatical.agregarProduccionXML("CONTENIDO -> VALOR"
                                    ,"$$=$$[$0];");
                    this.$=$$[$0];
                
break;
case 9:

                    ReporteGramatical.agregarProduccionXML("VALOR -> id"
                                    ,'$$=$$[$0]+" "');
                    this.$=$$[$0]+" ";
                
break;
case 10:

                    ReporteGramatical.agregarProduccionXML("VALOR -> str"
                                    ,'$$=$$[$0]+" "');
                    this.$=$$[$0]+" ";
                
break;
case 11:

                    ReporteGramatical.agregarProduccionXML("VALOR -> signo_especial"
                                    ,'$$=$$[$0]+" "');
                    this.$=$$[$0]+" ";
                
break;
case 12:

                    ReporteGramatical.agregarProduccionXML("VALOR -> caracter_especial"
                                    ,'$$=$$[$0]+" "');
                    this.$=$$[$0].toLowerCase()+" ";
                
break;
case 13:

                    ReporteGramatical.agregarProduccionXML("VALOR -> signo"
                                    ,'$$=$$[$0]+" "');
                    this.$=$$[$0]+" ";
                
break;
case 14: case 15:

                    ReporteGramatical.agregarProduccionXML("VALOR -> num"
                                    ,'$$=$$[$0]+" "');
                    this.$=$$[$0]+" ";
                
break;
case 79:
 ReporteGramatical.agregarProduccionXpath("LISTA-XPATH -> LISTA-XPATH | XPATH","LISTA-XPATH1.LISTA.ADD( XPATH );</br>LISTA-XPATH.LISTA = LISTA-XPATH1.LISTA;");
                                                    var expresion = new XpathExpresion($$[$0], _$[$0].first_line,_$[$0].first_column);
                                                    $$[$0-2].push( expresion ); this.$=$$[$0-2]; 
break;
case 80:
 ReporteGramatical.agregarProduccionXpath("LISTA-XPATH -> XPATH","LISTA-XPATH.LISTA = XPATH;");
                               var expresion = new XpathExpresion($$[$0], _$[$0].first_line,_$[$0].first_column);
                               this.$ = [expresion]; 
break;
case 81:
 ReporteGramatical.agregarProduccionXpath("XPATH -> XPATH EXPRESION","XPATH1.LISTA.ADD( EXPRESION );</br>XPATH.LISTA = XPATH1.LISTA;");
                                              if( !($$[$0] instanceof NodoError) ) $$[$0-1].push($$[$0]);
                                              this.$ = $$[$0-1];
                                            
break;
case 82:
 ReporteGramatical.agregarProduccionXpath("XPATH -> EXPRESION","XPATH.LISTA = [EXPRESION];");
                               if($$[$0] instanceof NodoError) this.$ = [];
                               else  this.$ = [$$[$0]];
                             
break;
case 83:
 ReporteGramatical.agregarProduccionXpath("XPATH -> EXPRESION","XPATH.LISTA = [EXPRESION];");
                                    if($$[$0] instanceof NodoError) this.$ = [];
                                    else  this.$ = [$$[$0]];
                                  
break;
case 84:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> id","EXPRESION = NodoXpath(id);");
                                this.$ = new RootIdentifier($$[$0],[],_$[$0].first_line,_$[$0].first_column); 
break;
case 85:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> id","EXPRESION = NodoXpath(id);");
                                                             this.$ = new RootIdentifier($$[$0],[],_$[$0].first_line,_$[$0].first_column); 
break;
case 86:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> node()","EXPRESION = NodoXpath('node');");
                                         this.$ = new RootNode([],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 87:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> .","EXPRESION = NodoXpath('.');");
                                                    this.$ = new RootCurrent([],_$[$0].first_line,_$[$0].first_column); 
break;
case 88:
  ReporteGramatical.agregarProduccionXpath("EXPREISON -> @ id","EXPREISON = new Atributo(id);");
                                                   this.$ = new RootAtributeIdentifier($$[$0],[],_$[$0-1].first_line, _$[$0-1].first_column ); 
break;
case 89:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> @ *","EXPRESION = new Atributo(times);");
                                               this.$ = new RootAtributeTimes([],_$[$0-1].first_line, _$[$0-1].first_column ); 
break;
case 90:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> _$[$0-2]()","EXPRESION = new Atributo(nodo);");
                                                           this.$ = new RootAtributeTimes([],_$[$0-3].first_line, _$[$0-3].first_column ); 
break;
case 91:
  ReporteGramatical.agregarProduccionXpath("EXPREISON -> @ id","EXPREISON = new Atributo(id);");
                                                                      this.$ = new RootAtributeIdentifier($$[$0-1],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column ); 
break;
case 92:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> @ *","EXPRESION = new Atributo(times);");
                                                                  this.$ = new RootAtributeTimes($$[$0],_$[$0-2].first_line, _$[$0-2].first_column ); 
break;
case 93:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> _$[$0-3]()","EXPRESION = new Atributo(nodo);");
                                                                              this.$ = new RootAtributeTimes($$[$0],_$[$0-4].first_line, _$[$0-4].first_column ); 
break;
case 94:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> id LISTA_PREDICADOS","EXPRESION = NodoXpath(id, LISTA_PREDICADOS);");
                                                  this.$ = new RootIdentifier($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 95:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> node LISTA_PREDICADOS","EXPRESION = NodoXpath('node', LISTA_PREDICADOS);");
                                                          this.$ = new RootNode($$[$0],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 96:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: id","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-2]]+"', "+$$[$0]+" );");
                                                              this.$ = AxeFabric.createAxeExpresion($$[$0-2],AxeOperation.identifier, $$[$0],[],_$[$0-1].first_line, _$[$0-1].first_column);
                                                            
break;
case 97:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: *","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-2]]+"', * );");
                                                         this.$ = AxeFabric.createAxeExpresion($$[$0-2],AxeOperation.times, "",[],_$[$0-1].first_line, _$[$0-1].first_column);
                                                       
break;
case 98:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: node()","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-4]]+"', node() );");
                                                                 this.$ = AxeFabric.createAxeExpresion($$[$0-4],AxeOperation.node, "",[],_$[$0-3].first_line, _$[$0-3].first_column);
                                                               
break;
case 99:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: text()","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-4]]+"', text() );");
                                                                 this.$ = AxeFabric.createAxeExpresion($$[$0-4],AxeOperation.text, "",[],_$[$0-3].first_line, _$[$0-3].first_column);
                                                               
break;
case 100:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: id LISTA_PREDICADOS","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-3]]+"', "+$$[$0-1]+", LISTA_PREDICADOS );");
                                                                          this.$ = AxeFabric.createAxeExpresion($$[$0-3],AxeOperation.identifier, $$[$0-1],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                                                        
break;
case 101:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: * LISTA_PREDICADOS","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-3]]+"', * , LISTA_PREDICADOS);");
                                                                     this.$ = AxeFabric.createAxeExpresion($$[$0-3],AxeOperation.times, "",$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                                                   
break;
case 102:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: node() LISTA_PREDICADOS","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-5]]+"', node(), LISTA_PREDICADOS );");
                                                                                  this.$ = AxeFabric.createAxeExpresion($$[$0-5],AxeOperation.node, "",$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
                                                                                
break;
case 103:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> AXES_NAME :: text() LISTA_PREDICADOS","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-5]]+"', text(), LISTA_PREDICADOS );");
                                                                                  this.$ = AxeFabric.createAxeExpresion($$[$0-5],AxeOperation.text, "",$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
                                                                                
break;
case 104:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /id","EXPRESION = NodoXpath('/',id);");
                                        this.$ = new RootIdentifier($$[$0],[],_$[$0].first_line,_$[$0].first_column); 
break;
case 105:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /@id","EXPRESION = NodoXpath('/@',id);");
                                                            this.$ = new RootAtributeIdentifier($$[$0],[],_$[$0].first_line,_$[$0].first_column); 
break;
case 106:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> @ *","EXPRESION = new Atributo(times);");
                                                         this.$ = new RootAtributeTimes([],_$[$0-2].first_line, _$[$0-2].first_column ); 
break;
case 107:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> _$[$0-2]()","EXPRESION = new Atributo(nodo);");
                                                                     this.$ = new RootAtributeTimes([],_$[$0-4].first_line, _$[$0-4].first_column ); 
break;
case 108:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /.","EXPRESION = NodoXpath('/.');");
                                                this.$ = new RootCurrent([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 109:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /..","EXPRESION = NodoXpath('/..');");
                                                this.$ = new RootParent([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 110:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /*","EXPRESION = NodoXpath('/*');");
                                    this.$ = new RootTimes([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 111:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /node()","EXPRESION = NodoXpath('/node');");
                                                this.$ = new RootNode([],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 112:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: id","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-2]]+"', "+$$[$0]+" );");
                                                                this.$ = AxeFabric.createAxeExpresion($$[$0-2],AxeOperation.identifier, $$[$0],[],_$[$0-1].first_line, _$[$0-1].first_column);
                                                              
break;
case 113:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: *","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-2]]+"', * );");
                                                           this.$ = AxeFabric.createAxeExpresion($$[$0-2],AxeOperation.times, "",[],_$[$0-1].first_line, _$[$0-1].first_column);
                                                         
break;
case 114:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: node()","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-4]]+"', node() );");
                                                                        this.$ = AxeFabric.createAxeExpresion($$[$0-4],AxeOperation.node, "",[],_$[$0-3].first_line, _$[$0-3].first_column);
                                                                      
break;
case 115:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: text()","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-4]]+"', text() );");
                                                                        this.$ = AxeFabric.createAxeExpresion($$[$0-4],AxeOperation.text, "",[],_$[$0-3].first_line, _$[$0-3].first_column);
                                                                      
break;
case 116:
 ReporteGramatical.agregarProduccionXpath("Expresion -> /text()","Expresion = new TextExpresion();");
                                 this.$ = new RootText([], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 117:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> //id","EXPRESION = NodoXpath('//',id);");
                                        this.$ = new AnyIdentifier($$[$0],[],_$[$0].first_line,_$[$0].first_column); 
break;
case 118:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> //@id","EXPRESION = NodoXpath('//@',id);");
                                                            this.$ = new AnyAtributeIdentifier($$[$0],[],_$[$0].first_line,_$[$0].first_column); 
break;
case 119:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> //@ *","EXPRESION = new Atributo(/times);");
                                                       this.$ = new AnyAtributeTimes([],_$[$0-2].first_line, _$[$0-2].first_column ); 
break;
case 120:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> //_$[$0-2]()","EXPRESION = new Atributo(//nodo);");
                                                                   this.$ = new AnyAtributeTimes([],_$[$0-4].first_line, _$[$0-4].first_column ); 
break;
case 121:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> //.","EXPRESION = NodoXpath('//.');");
                                                this.$ = new AnyCurrent([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 122:
    ReporteGramatical.agregarProduccionXpath("EXPRESION -> //..","EXPRESION = NodoXpath('//..');");
                                                this.$ = new AnyParent([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 123:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> //*","EXPRESION = NodoXpath('//*');");
                                    this.$ = new AnyTimes([],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 124:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> //node()","EXPRESION = NodoXpath('//node');");
                                                this.$ = new AnyNode([],_$[$0-3].first_line,_$[$0-3].first_column); 
break;
case 125:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: id","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-2]]+"', "+$$[$0]+" );");
                                                                this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-2],AxeOperation.identifier, $$[$0],[],_$[$0-1].first_line, _$[$0-1].first_column);
                                                              
break;
case 126:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: *","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-2]]+"', * );");
                                                           this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-2],AxeOperation.times, "",[],_$[$0-1].first_line, _$[$0-1].first_column);
                                                         
break;
case 127:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: node()","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-4]]+"', node() );");
                                                                        this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-4],AxeOperation.node, "",[],_$[$0-3].first_line, _$[$0-3].first_column);
                                                                      
break;
case 128:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: text()","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-4]]+"', text() );");
                                                                        this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-4],AxeOperation.text, "",[],_$[$0-3].first_line, _$[$0-3].first_column);
                                                                      
break;
case 129:
 ReporteGramatical.agregarProduccionXpath("Expresion -> //text()","Expresion = new AnyTextExpresion();");
                                               this.$ = new AnyText([], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 130:
    ReporteGramatical.agregarProduccionXpath("EXPRESION -> /id LISTA_PREDICADOS","EXPRESION = NodoXpath('/',id, LISTA_PREDICADOS);");
                                                            this.$ = new RootIdentifier($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 131:
  ReporteGramatical.agregarProduccionXpath("EXPREISON -> /@ id","EXPREISON = new Atributo(/id);");
                                                                          this.$ = new RootAtributeIdentifier($$[$0-1],$$[$0],_$[$0-3].first_line, _$[$0-3].first_column ); 
break;
case 132:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> @ *","EXPRESION = new Atributo(times);");
                                                                      this.$ = new RootAtributeTimes($$[$0],_$[$0-3].first_line, _$[$0-3].first_column ); 
break;
case 133:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> /_$[$0-3]()","EXPRESION = new Atributo(/nodo);");
                                                                                   this.$ = new RootAtributeTimes($$[$0],_$[$0-5].first_line, _$[$0-5].first_column ); 
break;
case 134:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> '/.' LISTA_PREDICADOS","EXPRESION = NodoXpath('/.',LISTA_PREDICADOS);");
                                                                this.$ = new RootCurrent($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 135:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> '/..' LISTA_PREDICADOS","EXPRESION = NodoXpath('/..',LISTA_PREDICADOS);");
                                                                this.$ = new RootParent($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 136:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /* LISTA_PREDICADOS","EXPRESION = NodoXpath('/*',LISTA_PREDICADOS);");
                                                    this.$ = new RootTimes($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 137:
    ReporteGramatical.agregarProduccionXpath("EXPRESION -> '/node()' LISTA_PREDICADOS","EXPRESION = NodoXpath('/node',LISTA_PREDICADOS);");
                                                                    this.$ = new RootNode($$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 138:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: id LISTA_PREDICADOS","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-3]]+"', "+$$[$0-1]+", LISTA_PREDICADOS );");
                                                                                 this.$ = AxeFabric.createAxeExpresion($$[$0-3],AxeOperation.identifier, $$[$0-1],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                                                               
break;
case 139:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: * LISTA_PREDICADOS","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-3]]+"', * , LISTA_PREDICADOS);");
                                                                            this.$ = AxeFabric.createAxeExpresion($$[$0-3],AxeOperation.times, "",$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                                                          
break;
case 140:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: node()","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-5]]+"', node(), LISTA_PREDICADOS );");
                                                                                         this.$ = AxeFabric.createAxeExpresion($$[$0-5],AxeOperation.node, "",$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
                                                                                       
break;
case 141:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> /AXES_NAME :: text()","EXPRESION = new AxeExpresion('"+AxeType[$$[$0-5]]+"', text(), LISTA_PREDICADOS );");
                                                                                         this.$ = AxeFabric.createAxeExpresion($$[$0-5],AxeOperation.text, "",$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
                                                                                        
break;
case 142:
 ReporteGramatical.agregarProduccionXpath("Expresion -> /text()","Expresion = new TextExpresion();");
                                                                 this.$ = new RootText($$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 143:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //id LISTA_PREDICADOS","EXPRESION = NodoXpath('//',id, LISTA_PREDICADOS);");
                                                        this.$ = new AnyIdentifier($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 144:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> //@id LISTA_PREDICADOS","EXPRESION = NodoXpath('//@',id,LISTA_PREDICADOS);");
                                                                            this.$ = new AnyAtributeIdentifier($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 145:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> //@ * LISTA_PREDICADOS","EXPRESION = new Atributo(//times,LISTA_PREDICADOS);");
                                                                         this.$ = new AnyAtributeTimes($$[$0],_$[$0-3].first_line, _$[$0-3].first_column ); 
break;
case 146:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> //_$[$0-3]() LISTA_PREDICADOS","EXPRESION = new Atributo(//nodo,LISTA_PREDICADOS);");
                                                                                     this.$ = new AnyAtributeTimes($$[$0],_$[$0-5].first_line, _$[$0-5].first_column ); 
break;
case 147:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> '//.' LISTA_PREDICADOS","EXPRESION = NodoXpath('//.',LISTA_PREDICADOS);");
                                                                this.$ = new AnyCurrent($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 148:
   ReporteGramatical.agregarProduccionXpath("EXPRESION -> '//..' LISTA_PREDICADOS","EXPRESION = NodoXpath('//..',LISTA_PREDICADOS);");
                                                                this.$ = new AnyParent($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 149:
  ReporteGramatical.agregarProduccionXpath("EXPRESION -> //* LISTA_PREDICADOS","EXPRESION = NodoXpath('//*',LISTA_PREDICADOS);");
                                                    this.$ = new AnyTimes($$[$0],_$[$0-2].first_line,_$[$0-2].first_column); 
break;
case 150:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //node() LISTA_PREDICADOS","EXPRESION = NodoXpath('//node',LISTA_PREDICADOS);");
                                                                this.$ = new AnyNode($$[$0],_$[$0-4].first_line,_$[$0-4].first_column); 
break;
case 151:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: id LISTA_PREDICADOS","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-3]]+"', "+$$[$0-1]+", LISTA_PREDICADOS );");
                                                                                this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-3],AxeOperation.identifier, $$[$0-1],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                                                              
break;
case 152:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: * LISTA_PREDICADOS","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-3]]+"', * , LISTA_PREDICADOS);");
                                                                           this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-3],AxeOperation.times, "",$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
                                                                         
break;
case 153:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: node()","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-5]]+"', node(), LISTA_PREDICADOS );");
                                                                                        this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-5],AxeOperation.node, "",$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
                                                                                      
break;
case 154:
 ReporteGramatical.agregarProduccionXpath("EXPRESION -> //AXES_NAME :: text()","EXPRESION = new AnyAxeExpresion('"+AxeType[$$[$0-5]]+"', text(), LISTA_PREDICADOS );");
                                                                                        this.$ = AnyAxeFabric.createAnyAxeExpresion($$[$0-5],AxeOperation.text, "",$$[$0],_$[$0-4].first_line, _$[$0-4].first_column);
                                                                                       
break;
case 155:
 ReporteGramatical.agregarProduccionXpath("Expresion -> //text()","Expresion = new AnyTextExpresion();");
                                                               this.$ = new AnyText($$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 156:

              ReporteGramatical.agregarProduccionXpath("EXPRESION -> error","ListaErrores.agregar(error)");
              ListaErrores.AgregarErrorXQUERY(new TokenError(TipoError.Sintactico,"No se esperaba: "+yytext,_$[$0].first_line,_$[$0].first_column));
              this.$ = new NodoError(_$[$0].first_line,_$[$0].first_column);
          
break;
case 157:
 ReporteGramatical.agregarProduccionXpath("LISTA_PREDICADOS -> LISTA_PREDICADOS [ PREDICADO ]","LISTA_PREDICADOS1.LISTA.ADD(PREDICADO); </br>LISTA_PREDICADOS.LISTA = LISTA_PREDICADOS1.LISTA;");
                                                                     $$[$0-3].push($$[$0-1]); this.$ = $$[$0-3]; 
break;
case 158:
 ReporteGramatical.agregarProduccionXpath("LISTA_PREDICADOS -> [ PREDICADO ]","LISTA_PREDICADOS.LISTA = []; </br>LISTA_PREDICADOS.LISTA.ADD(PREDICADO);");
                                                    this.$ = [$$[$0-1]];
                                                  
break;
case 159:
 ReporteGramatical.agregarProduccionXpath("PREDICADO -> EXPRESION_NUMERICA","PREDICADO = EXPRESION_NUMERICA;");
                                 this.$ = $$[$0]; 
break;
case 160:
 ReporteGramatical.agregarProduccionXpath("PREDICADO -> EXPRESION_RELACIONAL","PREDICADO = EXPRESION_RELACIONAL;");
                                   this.$ = $$[$0]; 
break;
case 161:
  ReporteGramatical.agregarProduccionXpath("PREDICADO -> EXPRESION_LOGICA","PREDICADO = EXPRESION_LOGICA;");
                                this.$ = $$[$0]; 
break;
case 162:
 ReporteGramatical.agregarProduccionXpath("PREDICADO -> PRIMITIVA","PREDICADO = PRIMITIVA;");
                        this.$ = $$[$0]; 
break;
case 163:
   ReporteGramatical.agregarProduccionXpath("PREDICADO -> ( PREDICADO )","PREDICADO = PREDICADO1;");
                                        this.$ = $$[$0-1]; 
break;
case 164:
  ReporteGramatical.agregarProduccionXpath("PREDICADO -> PREDICADO or PREDICADO","PREDICADO = new OrLogica(PREDICADO1,PREDICADO2);");
                                            this.$ = new OrLogica($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 165:
 ReporteGramatical.agregarProduccionXpath("PREDICADO -> PREDICADO or PREDICADO","PREDICADO = new AndLogica(PREDICADO1,PREDICADO2);");
                                            this.$ = new AndLogica($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 166:
  ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO < PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'<');");
                                                this.$ = new Relational($$[$0-2],$$[$0],RelationalOperators.lessThan,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 167:
 ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO <= PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'<=');");
                                                this.$ = new Relational($$[$0-2],$$[$0],RelationalOperators.lessOrEqualThan,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 168:
  ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO > PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'>');");
                                                this.$ = new Relational($$[$0-2],$$[$0],RelationalOperators.greaterThan,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 169:
 ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO >= PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'>=');");
                                                this.$ = new Relational($$[$0-2],$$[$0],RelationalOperators.greaterOrEqualThan,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 170:
   ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO = PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'=');");
                                                    this.$ = new Comparison($$[$0-2],$$[$0],RelationalOperators.equal,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 171:
  ReporteGramatical.agregarProduccionXpath("EXPRESION_RELACIONAL -> PREDICADO != PREDICADO","PREDICADO = new Relacional(PREDICADO1,PREDICADO2,'!=');");
                                                    this.$ = new Comparison($$[$0-2],$$[$0],RelationalOperators.notEqual,_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 172:
  ReporteGramatical.agregarProduccionXpath("EXPRESION_NUMERICA -> PREDICADO + PREDICADO","PREDICADO = new Aritmetica(PREDICADO1,PREDICADO2,'+');");
                                                this.$ = new Suma($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 173:
 ReporteGramatical.agregarProduccionXpath("EXPRESION_NUMERICA -> PREDICADO - PREDICADO","PREDICADO = new Aritmetica(PREDICADO1,PREDICADO2,'-');");
                                                this.$ = new Resta($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 174:
 ReporteGramatical.agregarProduccionXpath("EXPRESION_NUMERICA -> PREDICADO * PREDICADO","PREDICADO = new Aritmetica(PREDICADO1,PREDICADO2,'*');");
                                                this.$ = new Multiplicacion($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 175:
   ReporteGramatical.agregarProduccionXpath("EXPRESION_NUMERICA -> PREDICADO div PREDICADO","PREDICADO = new Aritmetica(PREDICADO1,PREDICADO2,'/');");
                                                this.$ = new Division($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 176:
   ReporteGramatical.agregarProduccionXpath("EXPRESION_NUMERICA -> PREDICADO mod PREDICADO","PREDICADO = new Aritmetica(PREDICADO1,PREDICADO2,'%');");
                                                this.$ = new Modulo($$[$0-2],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column); 
break;
case 177:
 this.$ = AxeType.ancestoOrSelfType; 
break;
case 178:
 this.$ = AxeType.ancestorType; 
break;
case 179:
 this.$ = AxeType.attributeType; 
break;
case 180:
 this.$ = AxeType.childType; 
break;
case 181:
 this.$ = AxeType.descendantOrSelfType; 
break;
case 182:
 this.$ = AxeType.descendantType; 
break;
case 183:
 this.$ = AxeType.followingSiblingType; 
break;
case 184:
 this.$ = AxeType.followingType; 
break;
case 185:
 this.$ = AxeType.namespaceType; 
break;
case 186:
 this.$ = AxeType.precedingSiblingType; 
break;
case 187:
 this.$ = AxeType.precedingType; 
break;
case 188:
 this.$ = AxeType.parentType; 
break;
case 189:
 this.$ = AxeType.selfType; 
break;
case 190:
 ReporteGramatical.agregarProduccionXpath("FUNCION_NATIVA -> last()","FUNCION_NATIVA = new FuncionNativa('last');");
                                     this.$ = new NativeFunctionExpresion(NativeFunction.last, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 191:
    ReporteGramatical.agregarProduccionXpath("FUNCION_NATIVA -> position()","FUNCION_NATIVA = new FuncionNativa('position');");
                                            this.$ = new NativeFunctionExpresion(NativeFunction.position, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 192:
 ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> LISTA-XPATH","PRIMITIVA = new ListaXpath( LISTA-XPATH );");
                         this.$ = new ListaXpathExpresion($$[$0], _$[$0].first_line,_$[$0].first_column); 
break;
case 193:
 ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> FUNCION_NATIVA-XPATH","PRIMITIVA = FUNCION_NATIVA;");
                            this.$ = $$[$0]; 
break;
case 194:
  ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> decimal","PRIMITIVA = new PRIMITIVA(Tipo.Decimal,decimal);");
                            this.$ = new Primitive(Number($$[$0]), new Tipo(TipoDato.numero),_$[$0].first_line, _$[$0].first_column ); 
break;
case 195:
 ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> entero","PRIMITIVA = new PRIMITIVA(Tipo.entero,entero);");
                            this.$ = new Primitive(Number($$[$0]), new Tipo(TipoDato.numero),_$[$0].first_line, _$[$0].first_column ); 
break;
case 196:
  ReporteGramatical.agregarProduccionXpath("PRIMITIVA -> cadena","PRIMITIVA = new PRIMITIVA(Tipo.cadena,cadena);");
                            this.$ = new Primitive($$[$0].substr(1,$$[$0].length-2), new Tipo(TipoDato.cadena),_$[$0].first_line, _$[$0].first_column ); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:$V1,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,22:5,23:6,24:8,25:14,26:15,27:16,28:17,29:18,30:19,31:20,33:$V7,34:$V8,38:$V9,39:$Va,43:$Vb,49:$Vc,51:21,60:29,62:$Vd,65:$Ve,76:$Vf,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{1:[3]},{5:[1,61],7:62,8:$V1},{5:[1,63]},o($Vz,[2,4]),o($VA,[2,17],{25:14,26:15,27:16,28:17,29:18,30:19,31:20,60:29,24:64,33:$V7,38:$V9,43:$Vb,49:$Vc,62:$Vd,65:$Ve,76:$Vf}),o($VA,[2,18],{8:$VB,10:$VC,36:$VD,84:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN}),{9:$VO},o($VP,[2,20]),o($VQ,[2,159]),o($VQ,[2,160]),o($VQ,[2,161]),o($VQ,[2,162]),{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:79,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},o($VP,[2,21]),o($VP,[2,22]),o($VP,[2,23]),o($VP,[2,24]),o($VP,[2,25]),o($VP,[2,26]),o($VP,[2,27]),o($VQ,[2,192],{77:$VR}),o($VQ,[2,193]),o($VQ,[2,194]),o($VQ,[2,195]),o($VQ,[2,196]),{34:[1,81]},{34:[1,82],56:83,57:84},{39:[1,85]},{61:86,64:[1,87]},{2:$V0,7:93,8:$V1,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:92,26:89,27:90,28:91,31:94,32:88,34:$V8,38:$V9,39:$Va,49:$Vc,51:21,60:29,62:$Vd,76:$Vf,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{44:[1,95]},{35:[1,96]},o($VS,[2,80],{79:97,2:$V0,12:$V3,90:$Vj}),{39:[1,98]},{39:[1,99]},{39:[1,100]},o($VT,[2,82]),o($VT,[2,83]),{9:[1,101],81:[1,106],82:[1,103],83:[1,102],84:[1,105],86:107,88:[1,108],89:[1,104],106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw},{9:[1,109],81:[1,114],82:[1,111],83:[1,110],84:[1,113],86:115,88:[1,116],89:[1,112],106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw},o($VT,[2,156]),o($VT,[2,84],{85:117,91:$VU}),o($VT,[2,85]),{39:[1,119]},o($VT,[2,87]),{9:[1,120],81:[1,122],84:[1,121]},{87:[1,123]},{87:[2,177]},{87:[2,178]},{87:[2,179]},{87:[2,180]},{87:[2,181]},{87:[2,182]},{87:[2,183]},{87:[2,184]},{87:[2,185]},{87:[2,186]},{87:[2,187]},{87:[2,188]},{87:[2,189]},{1:[2,1]},o($Vz,[2,3]),{1:[2,2]},o($VP,[2,19]),{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:124,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:125,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:126,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:127,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:128,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:129,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:130,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:131,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:132,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:133,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:134,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:135,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:136,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{10:[1,137]},{8:$VB,10:$VC,36:$VD,40:[1,138],84:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN},{2:$V0,9:$V2,12:$V3,34:$V8,78:139,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw},{35:[1,140]},{50:[1,141],55:[1,142]},{29:145,42:[1,146],52:[1,143],53:[1,144],65:$Ve},o($VV,[2,55]),{2:$V0,9:$V2,12:$V3,34:$V8,51:147,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw},o($VW,[2,60],{64:[1,148]}),{39:[1,150],60:149,62:$Vd},o($VW,[2,66]),o($VW,[2,28]),o($VW,[2,29]),o($VW,[2,30]),o($VW,[2,31],{8:$VB,10:$VC,36:$VD,84:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN}),o($VW,[2,32]),o($VW,[2,33]),{38:[1,151]},{9:[1,152]},o($VT,[2,81]),{40:[1,153]},{40:[1,154]},{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:155,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},o($VT,[2,104],{85:156,91:$VU}),{9:[1,157],81:[1,159],84:[1,158]},o($VT,[2,108],{85:160,91:$VU}),o($VT,[2,109],{85:161,91:$VU}),o($VT,[2,110],{85:162,91:$VU}),{39:[1,163]},{87:[1,164]},{39:[1,165]},o($VT,[2,117],{85:166,91:$VU}),{9:[1,167],81:[1,169],84:[1,168]},o($VT,[2,121],{85:170,91:$VU}),o($VT,[2,122],{85:171,91:$VU}),o($VT,[2,123],{85:172,91:$VU}),{39:[1,173]},{87:[1,174]},{39:[1,175]},o($VT,[2,94],{91:$VX}),{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:177,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{40:[1,178]},o($VT,[2,88],{85:179,91:$VU}),o($VT,[2,89],{85:180,91:$VU}),{39:[1,181]},{9:[1,182],81:[1,184],84:[1,183],88:[1,185]},o($VY,[2,172],{84:$VE,104:$VM,105:$VN}),o($VY,[2,173],{84:$VE,104:$VM,105:$VN}),o($VQ,[2,174]),o($VQ,[2,175]),o($VQ,[2,176]),o($VZ,[2,166],{84:$VE,102:$VK,103:$VL,104:$VM,105:$VN}),o($VZ,[2,167],{84:$VE,102:$VK,103:$VL,104:$VM,105:$VN}),o($VZ,[2,168],{84:$VE,102:$VK,103:$VL,104:$VM,105:$VN}),o($VZ,[2,169],{84:$VE,102:$VK,103:$VL,104:$VM,105:$VN}),o($VZ,[2,170],{84:$VE,102:$VK,103:$VL,104:$VM,105:$VN}),o($VZ,[2,171],{84:$VE,102:$VK,103:$VL,104:$VM,105:$VN}),o([5,21,33,38,40,42,43,49,53,62,65,76,92,97],[2,164],{8:$VB,10:$VC,36:$VD,84:$VE,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN}),o([5,21,33,38,40,42,43,49,53,62,65,76,92,97,98],[2,165],{8:$VB,10:$VC,36:$VD,84:$VE,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN}),{4:187,7:4,8:$V1,9:$V_,11:186,13:188,14:$V$,15:$V01,16:$V11,17:$V21,18:$V31,19:$V41,20:$V51},o($VQ,[2,163]),o($VS,[2,79],{79:97,2:$V0,12:$V3,90:$Vj}),{36:[1,197]},{2:$V0,9:$V2,12:$V3,34:$V8,39:$V61,51:198,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw},{34:[1,200]},{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:201,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{54:[1,202]},o($VW,[2,53]),{34:[1,204],57:203},{40:[1,205],77:$VR},{39:[1,207],60:206,62:$Vd},o($V71,[2,64]),{2:$V0,7:93,8:$V1,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:92,26:89,27:90,28:91,31:94,32:208,34:$V8,38:$V9,39:$Va,49:$Vc,51:21,60:29,62:$Vd,76:$Vf,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{35:[1,209]},{39:[1,210]},o($VQ,[2,190]),o($VQ,[2,191]),{8:$VB,10:$VC,36:$VD,40:[1,211],84:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN},o($VT,[2,130],{91:$VX}),o($VT,[2,105],{85:212,91:$VU}),o($VT,[2,106],{85:213,91:$VU}),{39:[1,214]},o($VT,[2,134],{91:$VX}),o($VT,[2,135],{91:$VX}),o($VT,[2,136],{91:$VX}),{40:[1,215]},{9:[1,216],81:[1,218],84:[1,217],88:[1,219]},{40:[1,220]},o($VT,[2,143],{91:$VX}),o($VT,[2,118],{85:221,91:$VU}),o($VT,[2,119],{85:222,91:$VU}),{39:[1,223]},o($VT,[2,147],{91:$VX}),o($VT,[2,148],{91:$VX}),o($VT,[2,149],{91:$VX}),{40:[1,224]},{9:[1,225],81:[1,227],84:[1,226],88:[1,228]},{40:[1,229]},{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:230,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{8:$VB,10:$VC,36:$VD,84:$VE,92:[1,231],97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN},o($VT,[2,86],{85:232,91:$VU}),o($VT,[2,91],{91:$VX}),o($VT,[2,92],{91:$VX}),{40:[1,233]},o($VT,[2,96],{85:234,91:$VU}),o($VT,[2,97],{85:235,91:$VU}),{39:[1,236]},{39:[1,237]},{8:[1,238],9:$V_,13:239,14:$V$,15:$V01,16:$V11,17:$V21,18:$V31,19:$V41,20:$V51},{7:62,8:[1,240]},o($V81,[2,8]),o($V81,[2,9]),o($V81,[2,10]),o($V81,[2,11]),o($V81,[2,12]),o($V81,[2,13]),o($V81,[2,14]),o($V81,[2,15]),{2:$V0,6:241,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,22:5,23:6,24:8,25:14,26:15,27:16,28:17,29:18,30:19,31:20,33:$V7,34:$V8,38:$V9,39:$Va,43:$Vb,49:$Vc,51:21,60:29,62:$Vd,65:$Ve,76:$Vf,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:242,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{29:245,52:[1,243],53:[1,244],65:$Ve,77:$VR},{19:[1,246],59:247},{50:[1,248]},{8:$VB,10:$VC,29:250,36:$VD,53:[1,249],65:$Ve,84:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN},{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:251,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},o($VV,[2,54]),{50:[1,252]},o($VW,[2,78]),o($V71,[2,62]),{2:$V0,7:93,8:$V1,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:92,26:89,27:90,28:91,31:94,32:253,34:$V8,38:$V9,39:$Va,49:$Vc,51:21,60:29,62:$Vd,76:$Vf,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{40:[1,254]},{9:[1,255]},{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:258,34:$V8,39:$Va,40:[1,256],41:257,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{63:[1,259]},o($VT,[2,131],{91:$VX}),o($VT,[2,132],{91:$VX}),{40:[1,260]},o($VT,[2,111],{85:261,91:$VU}),o($VT,[2,112],{85:262,91:$VU}),o($VT,[2,113],{85:263,91:$VU}),{39:[1,264]},{39:[1,265]},o($VT,[2,116],{85:266,91:$VU}),o($VT,[2,144],{91:$VX}),o($VT,[2,145],{91:$VX}),{40:[1,267]},o($VT,[2,124],{85:268,91:$VU}),o($VT,[2,125],{85:269,91:$VU}),o($VT,[2,126],{85:270,91:$VU}),{39:[1,271]},{39:[1,272]},o($VT,[2,129],{85:273,91:$VU}),{8:$VB,10:$VC,36:$VD,84:$VE,92:[1,274],97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN},o($V91,[2,158]),o($VT,[2,95],{91:$VX}),o($VT,[2,90],{85:275,91:$VU}),o($VT,[2,100],{91:$VX}),o($VT,[2,101],{91:$VX}),{40:[1,276]},{40:[1,277]},{12:[1,278]},o($V81,[2,7]),{9:$VO,12:[1,279]},{21:[1,280]},o($VP,[2,34],{8:$VB,10:$VC,36:$VD,84:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN}),{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:281,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{54:[1,282]},o($VW,[2,45]),o($Va1,[2,59],{58:[1,283]}),{40:[1,284],42:[1,285]},{2:$V0,9:$V2,12:$V3,34:$V8,51:286,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw},{54:[1,287]},o($VW,[2,51]),{8:$VB,10:$VC,29:288,36:$VD,65:$Ve,84:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN},{39:$V61},{40:[1,289]},o($V71,[2,65]),{39:[1,290]},o($VW,[2,36]),{40:[1,291],42:[1,292]},o($Va1,[2,39],{8:$VB,10:$VC,36:$VD,84:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN}),{39:[1,293]},o($VT,[2,107],{85:294,91:$VU}),o($VT,[2,137],{91:$VX}),o($VT,[2,138],{91:$VX}),o($VT,[2,139],{91:$VX}),{40:[1,295]},{40:[1,296]},o($VT,[2,142],{91:$VX}),o($VT,[2,120],{85:297,91:$VU}),o($VT,[2,150],{91:$VX}),o($VT,[2,151],{91:$VX}),o($VT,[2,152],{91:$VX}),{40:[1,298]},{40:[1,299]},o($VT,[2,155],{91:$VX}),o($V91,[2,157]),o($VT,[2,93],{91:$VX}),o($VT,[2,98],{85:300,91:$VU}),o($VT,[2,99],{85:301,91:$VU}),{9:[1,302]},{9:[1,303]},o($V81,[2,16]),{8:$VB,10:$VC,29:305,36:$VD,53:[1,304],65:$Ve,84:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN},{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:306,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{19:[1,307]},o($VV,[2,57]),{19:[1,308]},{29:311,52:[1,309],53:[1,310],65:$Ve,77:$VR},{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:312,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},o($VW,[2,52]),o($V71,[2,63]),{34:$Vb1,40:[1,314],45:313,67:315},o($VW,[2,37]),{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:317,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{2:$V0,7:93,8:$V1,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:92,26:89,27:90,28:91,31:94,32:318,34:$V8,38:$V9,39:$Va,49:$Vc,51:21,60:29,62:$Vd,76:$Vf,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},o($VT,[2,133],{91:$VX}),o($VT,[2,114],{85:319,91:$VU}),o($VT,[2,115],{85:320,91:$VU}),o($VT,[2,146],{91:$VX}),o($VT,[2,127],{85:321,91:$VU}),o($VT,[2,128],{85:322,91:$VU}),o($VT,[2,102],{91:$VX}),o($VT,[2,103],{91:$VX}),{10:[1,323]},{10:[1,324]},{54:[1,325]},o($VW,[2,43]),{8:$VB,10:$VC,29:326,36:$VD,65:$Ve,84:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN},{40:[1,327]},o($Va1,[2,58]),{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:328,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},{54:[1,329]},o($VW,[2,49]),{8:$VB,10:$VC,29:330,36:$VD,65:$Ve,84:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN},{40:[1,331],42:[1,332]},{46:[1,333]},o($Va1,[2,70]),{46:[1,334]},o($Va1,[2,38],{8:$VB,10:$VC,36:$VD,84:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN}),{40:[1,335]},o($VT,[2,140],{91:$VX}),o($VT,[2,141],{91:$VX}),o($VT,[2,153],{91:$VX}),o($VT,[2,154],{91:$VX}),o($Vc1,[2,5]),o($Vc1,[2,6]),{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:336,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},o($VW,[2,44]),o($VV,[2,56]),{8:$VB,10:$VC,29:338,36:$VD,53:[1,337],65:$Ve,84:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN},{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:339,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},o($VW,[2,50]),{46:[1,340]},{34:$Vb1,67:341},{47:342,68:$Vd1},{47:344,68:$Vd1},o($V71,[2,61]),{8:$VB,10:$VC,29:345,36:$VD,65:$Ve,84:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN},{54:[1,346]},o($VW,[2,47]),{8:$VB,10:$VC,29:347,36:$VD,65:$Ve,84:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN},{47:348,68:$Vd1},o($Va1,[2,69]),{20:[1,349]},{35:[1,350]},o($Va1,[2,71]),o($VW,[2,42]),{2:$V0,9:$V2,12:$V3,14:$V4,18:$V5,19:$V6,23:351,34:$V8,39:$Va,51:21,78:33,79:37,80:38,81:$Vg,82:$Vh,83:$Vi,86:47,90:$Vj,93:9,94:10,95:11,96:12,106:$Vk,107:$Vl,108:$Vm,109:$Vn,110:$Vo,111:$Vp,112:$Vq,113:$Vr,114:$Vs,115:$Vt,116:$Vu,117:$Vv,118:$Vw,119:22,120:$Vx,121:$Vy},o($VW,[2,48]),{20:[1,352]},{22:353,24:8,25:14,26:15,27:16,28:17,29:18,30:19,31:20,33:$V7,38:$V9,43:$Vb,49:$Vc,60:29,62:$Vd,65:$Ve,76:$Vf},{69:[1,354],71:[1,355],72:[1,356],73:[1,357],74:[1,358],75:[1,359]},{8:$VB,10:$VC,29:360,36:$VD,65:$Ve,84:$VE,97:$VF,98:$VG,99:$VH,100:$VI,101:$VJ,102:$VK,103:$VL,104:$VM,105:$VN},{22:361,24:8,25:14,26:15,27:16,28:17,29:18,30:19,31:20,33:$V7,38:$V9,43:$Vb,49:$Vc,60:29,62:$Vd,65:$Ve,76:$Vf},{21:[1,362],24:64,25:14,26:15,27:16,28:17,29:18,30:19,31:20,33:$V7,38:$V9,43:$Vb,49:$Vc,60:29,62:$Vd,65:$Ve,76:$Vf},{70:[1,363]},{70:[1,364]},{70:[1,365]},{70:[1,366]},{70:[1,367]},{70:[1,368]},o($VW,[2,46]),{21:[1,369],24:64,25:14,26:15,27:16,28:17,29:18,30:19,31:20,33:$V7,38:$V9,43:$Vb,49:$Vc,60:29,62:$Vd,65:$Ve,76:$Vf},{48:[1,370]},o($Ve1,[2,72]),o($Ve1,[2,73]),o($Ve1,[2,74]),o($Ve1,[2,75]),o($Ve1,[2,76]),o($Ve1,[2,77]),{48:[1,371]},o($VP,[2,41]),o($VP,[2,40])],
defaultActions: {48:[2,177],49:[2,178],50:[2,179],51:[2,180],52:[2,181],53:[2,182],54:[2,183],55:[2,184],56:[2,185],57:[2,186],58:[2,187],59:[2,188],60:[2,189],61:[2,1],63:[2,2]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:this.begin('comment');
break;
case 1:this.popState();
break;
case 2:/* skip comment content*/
break;
case 3:/* skip whitespace */
break;
case 4:return 43;
break;
case 5:return 44;
break;
case 6:return 38;
break;
case 7:return 46;
break;
case 8:return 68;
break;
case 9:return 71;
break;
case 10:return 72;
break;
case 11:return 73;
break;
case 12:return 74;
break;
case 13:return 75;
break;
case 14:return 69;
break;
case 15:return 58;
break;
case 16:return 55;
break;
case 17:return 62;
break;
case 18:return 64;
break;
case 19:return 63;
break;
case 20:return 76;
break;
case 21:return 49;
break;
case 22:return 50;
break;
case 23:return 52;
break;
case 24:return 53;
break;
case 25:return 54;
break;
case 26:return 65;
break;
case 27:return 33;
break;
case 28:return 81;
break;
case 29:return 120;
break;
case 30:return 121;
break;
case 31:return 88;
break;
case 32:return 106;
break;
case 33:return 107;
break;
case 34:return 108;
break;
case 35:return 109;
break;
case 36:return 110;
break;
case 37:return 111;
break;
case 38:return 112;
break;
case 39:return 113;
break;
case 40:return 114;
break;
case 41:return 115;
break;
case 42:return 117;
break;
case 43:return 116;
break;
case 44:return 118;
break;
case 45:return 87;
break;
case 46:return 35;
break;
case 47:return 48;
break;
case 48:return 90;
break;
case 49:return 12;
break;
case 50:return 89;
break;
case 51:return 82;
break;
case 52:return 83;
break;
case 53:return 70;
break;
case 54:return 102;
break;
case 55:return 103;
break;
case 56:return 84;
break;
case 57:return 104;
break;
case 58:return 105;
break;
case 59:return 99;
break;
case 60:return 100;
break;
case 61:return 8;
break;
case 62:return 10;
break;
case 63:return 101;
break;
case 64:return 36;
break;
case 65:return 98;
break;
case 66:return 97;
break;
case 67:return 39;
break;
case 68:return 40;
break;
case 69:return 91;
break;
case 70:return 92;
break;
case 71:return 20;
break;
case 72:return 21;
break;
case 73:return 77;
break;
case 74:return 42;
break;
case 75:return 14
break;
case 76:return 14
break;
case 77:return 14
break;
case 78:return 14
break;
case 79:return 14
break;
case 80:return 18;
break;
case 81:return 19;
break;
case 82:return 34
break;
case 83:return 9
break;
case 84:return 15
break;
case 85:return 17
break;
case 86:
                                        ListaErrores.AgregarErrorXQUERY(new TokenError(TipoError.Lexico,"No se reconocio el token "+yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column));
                                    
break;
case 87:return 5
break;
}
},
rules: [/^(?:\(:)/i,/^(?::\))/i,/^(?:.)/i,/^(?:\s+)/i,/^(?:declare\b)/i,/^(?:function\b)/i,/^(?:local\b)/i,/^(?:as\b)/i,/^(?:xs\b)/i,/^(?:decimal\b)/i,/^(?:float\b)/i,/^(?:boolean\b)/i,/^(?:string\b)/i,/^(?:int\b)/i,/^(?:anyURI\b)/i,/^(?:to\b)/i,/^(?:at\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:then\b)/i,/^(?:data\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:where\b)/i,/^(?:order\b)/i,/^(?:by\b)/i,/^(?:return\b)/i,/^(?:let\b)/i,/^(?:node\b)/i,/^(?:last\b)/i,/^(?:position\b)/i,/^(?:text\b)/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:following-sibling\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:preceding-sibling\b)/i,/^(?:parent\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:::)/i,/^(?::)/i,/^(?:;)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:@)/i,/^(?:\?)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:div\b)/i,/^(?:mod\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\|)/i,/^(?:,)/i,/^(?:“[^\"\n]*”)/i,/^(?:"[^\"\n]*")/i,/^(?:'[^''\n]*')/i,/^(?:‘[^''\n]*’)/i,/^(?:`[^''\n]*`)/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:\$[a-zA-ZñÑáéíóúÁÉÍÓÚ]([a-zA-Z0-9ñÑáéíóúÁÉÍÓÚ]|_|-)*)/i,/^(?:[a-zA-ZñÑáéíóúÁÉÍÓÚ]([a-zA-Z0-9ñÑáéíóúÁÉÍÓÚ]|_|-)*)/i,/^(?:\\=|\\<|\\>|\\\/|\\“|\\"|\\'|\\’|\\`|\\`|\\‘|.)/i,/^(?:[^a-zA-Z0-9ñÑáéíóúÁÉÍÓÚ/<>=])/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"inclusive":true},"INITIAL":{"rules":[0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XqueryAnalyzer;
exports.Parser = XqueryAnalyzer.Parser;
exports.parse = function () { return XqueryAnalyzer.parse.apply(XqueryAnalyzer, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}