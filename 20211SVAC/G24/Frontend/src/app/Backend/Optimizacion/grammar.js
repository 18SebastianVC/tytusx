/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,31],$V1=[1,18],$V2=[1,5],$V3=[1,11],$V4=[1,26],$V5=[1,27],$V6=[1,28],$V7=[1,29],$V8=[1,30],$V9=[1,14],$Va=[1,15],$Vb=[1,16],$Vc=[1,17],$Vd=[1,19],$Ve=[1,20],$Vf=[1,21],$Vg=[1,22],$Vh=[1,23],$Vi=[1,8],$Vj=[1,9],$Vk=[1,10],$Vl=[1,12],$Vm=[5,9,14,15,23,24,25,46,47,48,50,51,52,53,54,55,56,57,58,76,77,78,79],$Vn=[8,9,10,14,24,25,46,47,48,50,51,52,53,54,55,56,57,58],$Vo=[2,97],$Vp=[1,60],$Vq=[1,53],$Vr=[1,56],$Vs=[1,57],$Vt=[1,58],$Vu=[1,46],$Vv=[1,47],$Vw=[1,48],$Vx=[1,49],$Vy=[1,50],$Vz=[1,51],$VA=[1,59],$VB=[1,61],$VC=[1,62],$VD=[1,63],$VE=[1,52],$VF=[1,54],$VG=[1,55],$VH=[10,13,14,20,21,24,25,28,29,30,34,35,36,37,38,41,42,46,50,51,52,56,57,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],$VI=[10,13,14,20,21,24,25,28,29,30,34,35,36,37,38,42,46,50,51,52,56,57,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],$VJ=[2,57],$VK=[1,65],$VL=[2,64],$VM=[40,41],$VN=[5,15,23,76,77,78,79],$VO=[9,14,24,25,46,47,48,50,51,52,53,54,55,56,57,58],$VP=[2,56],$VQ=[1,85],$VR=[10,13,14,21,24,25,28,29,30,34,35,36,37,38,42,46,50,51,52,56,57,60,61,63,64,65,66,68,69,70,71,72],$VS=[1,88],$VT=[20,46,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],$VU=[10,13,14,21,24,25,28,29,30,34,35,36,37,38,42,50,51,52,56,57],$VV=[10,13,14,20,21,24,25,28,29,30,34,35,36,37,38,40,41,42,46,50,51,52,56,57,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],$VW=[1,107],$VX=[1,104],$VY=[1,105],$VZ=[1,106],$V_=[1,109],$V$=[1,110],$V01=[1,112],$V11=[1,113],$V21=[1,114],$V31=[1,115],$V41=[1,117],$V51=[1,118],$V61=[1,119],$V71=[1,116],$V81=[13,14,24,25,28,29,30,34,35,36,37,38,50,51,52,56,57],$V91=[2,37],$Va1=[2,38];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"FUNCION":4,"EOF":5,"VOIDS":6,"TIPO":7,"MAIN":8,"PARIZQ":9,"PARDER":10,"LLAVEIZQ":11,"INSTRUCCIONES":12,"LLAVEDER":13,"IDENTIFICADOR":14,"INCLUDE":15,"LIBRERIA":16,"DECLARACION_MULTIPLE":17,"DECLARACION":18,"TERMINO":19,"COMA":20,"PTCOMA":21,"L_CORCHETES":22,"DOUBLE":23,"STACK":24,"HEAP":25,"INSTRUCCION":26,"ASIGNACION":27,"EXIT":28,"GOTO":29,"IF":30,"EXPRESION":31,"DOSPUNTOS":32,"TIPO_PRINT":33,"UNSET":34,"RETURN_INS":35,"IMPRIMIR":36,"IMPRIMIRF":37,"SNPRINT":38,"TEMPORALES":39,"IGUAL":40,"CORCHETEIZQ":41,"CORCHETEDER":42,"OPLOGICA":43,"OPBIT":44,"OPRELACIONAL":45,"MENOS":46,"NOT_BIT":47,"NOT":48,"OPARITMETICA":49,"TEMPORAL":50,"RA":51,"PILA":52,"ENTERO":53,"DECIMAL":54,"CADENA":55,"PUNTERO":56,"VALOR_RET":57,"AND_BIT":58,"UNARIO":59,"AND":60,"OR":61,"XOR":62,"MENORQUE":63,"MAYORQUE":64,"MENORIGUAL":65,"MAYORIGUAL":66,"IGUALQUE":67,"NOIGUAL":68,"MAS":69,"MULTIPLICACION":70,"DIVISION":71,"MODULO":72,"SHIFTDER":73,"OR_BIT":74,"XOR_BIT":75,"INT":76,"FLOAT":77,"CHAR":78,"VOID":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"MAIN",9:"PARIZQ",10:"PARDER",11:"LLAVEIZQ",13:"LLAVEDER",14:"IDENTIFICADOR",15:"INCLUDE",16:"LIBRERIA",20:"COMA",21:"PTCOMA",23:"DOUBLE",24:"STACK",25:"HEAP",28:"EXIT",29:"GOTO",30:"IF",32:"DOSPUNTOS",34:"UNSET",35:"RETURN_INS",36:"IMPRIMIR",37:"IMPRIMIRF",38:"SNPRINT",40:"IGUAL",41:"CORCHETEIZQ",42:"CORCHETEDER",46:"MENOS",47:"NOT_BIT",48:"NOT",50:"TEMPORAL",51:"RA",52:"PILA",53:"ENTERO",54:"DECIMAL",55:"CADENA",56:"PUNTERO",57:"VALOR_RET",58:"AND_BIT",60:"AND",61:"OR",62:"XOR",63:"MENORQUE",64:"MAYORQUE",65:"MENORIGUAL",66:"MAYORIGUAL",67:"IGUALQUE",68:"NOIGUAL",69:"MAS",70:"MULTIPLICACION",71:"DIVISION",72:"MODULO",73:"SHIFTDER",74:"OR_BIT",75:"XOR_BIT",76:"INT",77:"FLOAT",78:"CHAR",79:"VOID"},
productions_: [0,[3,2],[4,2],[4,1],[6,7],[6,7],[6,2],[6,1],[6,1],[17,3],[17,3],[17,2],[17,2],[18,4],[18,4],[18,4],[12,2],[12,1],[26,1],[26,2],[26,2],[26,1],[26,3],[26,2],[26,7],[26,6],[26,3],[26,2],[26,5],[26,4],[26,5],[26,4],[26,2],[26,3],[33,1],[33,1],[33,1],[27,3],[27,4],[27,3],[22,4],[22,3],[31,1],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,2],[31,3],[31,4],[19,1],[19,1],[19,1],[19,1],[19,2],[19,1],[19,1],[19,1],[19,1],[19,1],[19,2],[19,2],[19,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[39,1],[59,1],[59,1],[59,1],[45,1],[45,1],[45,1],[43,1],[43,1],[43,1],[43,1],[43,1],[43,1],[49,1],[49,1],[49,1],[49,1],[49,1],[44,1],[44,1],[44,1],[44,1],[44,1],[7,1],[7,1],[7,1],[7,1],[7,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 16:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 3: case 17:
this.$ = [$$[$0]];
break;
case 4: case 5:
this.$= new Funcion.default($$[$0-6]+" "+$$[$0-5]+" "+$$[$0-4]+" "+$$[$0-3]+" "+$$[$0-2]+"\n",$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 6: case 12:
this.$=$$[$0-1]+$$[$0]
break;
case 7: case 8: case 18: case 34: case 35: case 36: case 42: case 53: case 54: case 61: case 64: case 66: case 67: case 68: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97: case 98:
this.$=$$[$0]
break;
case 9:
this.$=$$[$0-2]+" "+$$[$0-1]+$$[$0]+" "
break;
case 10:
this.$=$$[$0-2]+" "+$$[$0-1]+$$[$0]
break;
case 11:
this.$=$$[$0-1]+$$[$0]+" "
break;
case 13: case 14: case 15:
this.$= new Declaracion.default($$[$0-3]+" "+$$[$0-2],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 19: case 62:
this.$=$$[$0-1]
break;
case 20:
this.$= new Exit.default(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 21:
this.$= new Exit.default(_$[$0].first_line,_$[$0].first_column);
break;
case 22:
this.$= new SaltoIncondicional.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 23:
this.$= new SaltoIncondicional.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 24:
this.$= new SaltoCondicional.default($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 25:
this.$= new SaltoCondicional.default($$[$0-3],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 26:
this.$= new Etiqueta.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 27:
this.$= new Etiqueta.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 28:
this.$= new Print.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 29:
this.$= new Print.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 30:
this.$= new Unset.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 31:
this.$= new Unset.default($$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 32:
this.$= new Sentencia.default(null,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 33:
this.$= new Sentencia.default($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 37:
this.$= new Asignacion.default($$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 38:
this.$= new AsignacionEstructura.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 39:
this.$= new Llamada.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 40:
$$[$0-3].push($$[$0-1]); this.$ = $$[$0-3];
break;
case 41:
this.$ = [$$[$0-1]];
break;
case 43:
this.$=$$[$0-2]+$$[$0-1]+$$[$0]
break;
case 44:
this.$= new logica.default($$[$0-2],$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 45:
this.$= new bit.default($$[$0-2],$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 46:
this.$= new relacional.default($$[$0-2],$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 47: case 48: case 49:
this.$= new unario.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 50:
this.$= new aritmetica.default($$[$0-2],$$[$0-1],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 51:
this.$= new conversion.default($$[$0-3],$$[$0-2],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 52: case 65:
this.$=new termino.default(new Tipo.default(Tipo.tipoDato.TEMPORAL),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 55:
this.$=new termino.default(new Tipo.default(Tipo.tipoDato.ENTERO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 56: case 63:
this.$= new Estructura.default($$[$0-1],$$[$0],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 57:
this.$ = new identificador.default($$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 58:
this.$=new termino.default(new Tipo.default(Tipo.tipoDato.DECIMAL),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 59:
this.$=new termino.default(new Tipo.default(Tipo.tipoDato.CADENA),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 60: case 69:
this.$=new termino.default(new Tipo.default(Tipo.tipoDato.PUNTERO),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 70:
this.$=new termino.default(new Tipo.default(Tipo.tipoDato.STACK),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
case 71:
this.$=new termino.default(new Tipo.default(Tipo.tipoDato.HEAP),$$[$0],_$[$0].first_line,_$[$0].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:$V0,14:$V1,15:$V2,17:6,18:7,19:13,23:$V3,24:$V4,25:$V5,31:25,39:24,46:$V6,47:$V7,48:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl},{1:[3]},{5:[1,32],6:33,7:4,9:$V0,14:$V1,15:$V2,17:6,18:7,19:13,23:$V3,24:$V4,25:$V5,31:25,39:24,46:$V6,47:$V7,48:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh,76:$Vi,77:$Vj,78:$Vk,79:$Vl},o($Vm,[2,3]),{8:[1,34],9:$V0,14:[1,35],19:36,24:$V4,25:$V5,31:25,39:24,46:$V6,47:$V7,48:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{16:[1,37]},o($Vm,[2,7]),o($Vm,[2,8]),o($Vn,[2,94]),o($Vn,[2,95]),o($Vn,[2,96]),o([8,9,14,46,47,48,50,51,52,53,54,55,56,57,58],$Vo,{24:[1,38],25:[1,39]}),o($Vn,[2,98]),{20:[1,40],21:[1,41],43:42,44:43,45:44,46:$Vp,49:45,58:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},o($VH,[2,52]),o($VH,[2,53]),o($VH,[2,54]),o($VI,[2,55]),o($VI,$VJ,{22:64,41:$VK}),o($VI,[2,58]),o($VI,[2,59]),o($VH,[2,60]),o($VH,[2,61]),{50:[1,66]},{22:67,41:$VK},o($VI,$VL),o($VM,[2,70]),o($VM,[2,71]),{9:$V0,14:$V1,19:68,24:$V4,25:$V5,31:25,39:24,46:$V6,47:$V7,48:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{9:$V0,14:$V1,19:69,24:$V4,25:$V5,31:25,39:24,46:$V6,47:$V7,48:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{9:$V0,14:$V1,19:70,24:$V4,25:$V5,31:25,39:24,46:$V6,47:$V7,48:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{7:71,23:[1,72],76:$Vi,77:$Vj,78:$Vk,79:$Vl},{1:[2,1]},o($Vm,[2,2]),{9:[1,73]},o([20,21,46,58,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],$VJ,{22:75,9:[1,74],41:$VK}),{20:[1,76],21:[1,77],43:42,44:43,45:44,46:$Vp,49:45,58:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},o($Vm,[2,6]),{22:78,41:$VK},{22:79,41:$VK},o($VN,[2,11],{39:24,31:25,19:80,9:$V0,14:$V1,24:$V4,25:$V5,46:$V6,47:$V7,48:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh}),o($Vm,[2,12]),{9:$V0,14:$V1,19:81,24:$V4,25:$V5,31:25,39:24,46:$V6,47:$V7,48:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{9:$V0,14:$V1,19:82,24:$V4,25:$V5,31:25,39:24,46:$V6,47:$V7,48:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{9:$V0,14:$V1,19:83,24:$V4,25:$V5,31:25,39:24,46:$V6,47:$V7,48:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{9:$V0,14:$V1,19:84,24:$V4,25:$V5,31:25,39:24,46:$V6,47:$V7,48:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},o($VO,[2,78]),o($VO,[2,79]),o($VO,[2,80]),o($VO,[2,81]),o($VO,[2,82]),o($VO,[2,83]),o($VO,[2,89]),o($VO,[2,91]),o($VO,[2,92]),o($VO,[2,93]),o($VO,[2,75]),o($VO,[2,76]),o($VO,[2,77]),o($VO,[2,84]),o($VO,[2,85]),o($VO,[2,86]),o($VO,[2,87]),o($VO,[2,88]),o($VI,$VP,{41:$VQ}),{9:$V0,14:$V1,19:87,24:$V4,25:$V5,31:86,39:24,46:$V6,47:$V7,48:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},o($VI,[2,62]),o($VI,[2,63],{41:$VQ}),o($VR,[2,47],{43:42,44:43,45:44,49:45,20:$VS,58:$Vq,62:$Vt,67:$Vy,73:$VE,74:$VF,75:$VG}),o($VR,[2,48],{43:42,44:43,45:44,49:45,20:$VS,58:$Vq,62:$Vt,67:$Vy,73:$VE,74:$VF,75:$VG}),o($VR,[2,49],{43:42,44:43,45:44,49:45,20:$VS,58:$Vq,62:$Vt,67:$Vy,73:$VE,74:$VF,75:$VG}),{10:[1,89]},{10:$Vo},{10:[1,90]},{10:[1,91]},o($VT,$VP,{21:[1,92],41:$VQ}),o($VN,[2,9],{39:24,31:25,19:80,9:$V0,14:$V1,24:$V4,25:$V5,46:$V6,47:$V7,48:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh}),o($Vm,[2,10]),{21:[1,93],41:$VQ},{21:[1,94],41:$VQ},o($VU,[2,43],{43:42,44:43,45:44,49:45,20:$VS,46:$Vp,58:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG}),o($VU,[2,44],{43:42,44:43,45:44,49:45,20:$VS,46:$Vp,58:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG}),o($VU,[2,45],{43:42,44:43,45:44,49:45,20:$VS,46:$Vp,58:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG}),o($VU,[2,46],{43:42,44:43,45:44,49:45,20:$VS,46:$Vp,58:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG}),o($VU,[2,50],{43:42,44:43,45:44,49:45,20:$VS,46:$Vp,58:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG}),{9:$V0,14:$V1,19:87,24:$V4,25:$V5,31:95,39:24,46:$V6,47:$V7,48:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},o($VT,$VL,{42:[1,96]}),o($VU,[2,42],{43:42,44:43,45:44,49:45,20:$VS,46:$Vp,58:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG}),{9:$V0,14:$V1,19:80,24:$V4,25:$V5,31:25,39:24,46:$V6,47:$V7,48:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{9:$V0,14:$V1,19:97,24:$V4,25:$V5,31:25,39:24,46:$V6,47:$V7,48:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{11:[1,98]},{11:[1,99]},o($Vm,[2,13]),o($Vm,[2,14]),o($Vm,[2,15]),o($VT,$VL,{42:[1,100]}),o($VV,[2,41]),o($VU,[2,51],{43:42,44:43,45:44,49:45,20:$VS,46:$Vp,58:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG}),{12:101,14:$VW,24:$V4,25:$V5,26:102,27:103,28:$VX,29:$VY,30:$VZ,33:108,34:$V_,35:$V$,36:$V01,37:$V11,38:$V21,39:111,50:$V31,51:$V41,52:$V51,56:$V61,57:$V71},{12:120,14:$VW,24:$V4,25:$V5,26:102,27:103,28:$VX,29:$VY,30:$VZ,33:108,34:$V_,35:$V$,36:$V01,37:$V11,38:$V21,39:111,50:$V31,51:$V41,52:$V51,56:$V61,57:$V71},o($VV,[2,40]),{13:[1,121],14:$VW,24:$V4,25:$V5,26:122,27:103,28:$VX,29:$VY,30:$VZ,33:108,34:$V_,35:$V$,36:$V01,37:$V11,38:$V21,39:111,50:$V31,51:$V41,52:$V51,56:$V61,57:$V71},o($V81,[2,17]),o($V81,[2,18],{21:[1,123]}),o($V81,[2,21],{21:[1,124]}),{14:[1,125]},{9:[1,126]},{9:[1,128],32:[1,127]},{9:[1,129]},{9:[1,130]},{9:$V0,14:$V1,19:87,21:[1,131],24:$V4,25:$V5,31:132,39:24,46:$V6,47:$V7,48:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{22:134,40:[1,133],41:$VK},{9:[2,34]},{9:[2,35]},{9:[2,36]},o($VM,[2,65]),o($VM,[2,66]),o($VM,[2,67]),o($VM,[2,68]),o($VM,[2,69]),{13:[1,135],14:$VW,24:$V4,25:$V5,26:122,27:103,28:$VX,29:$VY,30:$VZ,33:108,34:$V_,35:$V$,36:$V01,37:$V11,38:$V21,39:111,50:$V31,51:$V41,52:$V51,56:$V61,57:$V71},o($Vm,[2,4]),o($V81,[2,16]),o($V81,[2,19]),o($V81,[2,20]),o($V81,[2,23],{21:[1,136]}),{9:$V0,14:$V1,19:87,24:$V4,25:$V5,31:137,39:24,46:$V6,47:$V7,48:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},o($V81,[2,27],{21:[1,138]}),{10:[1,139]},{9:$V0,14:$V1,19:87,24:$V4,25:$V5,31:140,39:24,46:$V6,47:$V7,48:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{9:$V0,14:$V1,19:141,24:$V4,25:$V5,31:25,39:24,46:$V6,47:$V7,48:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},o($V81,[2,32]),o($VT,$VL,{21:[1,142]}),{9:$V0,14:$V1,19:87,24:$V4,25:$V5,31:143,39:24,46:$V6,47:$V7,48:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{40:[1,144],41:$VQ},o($Vm,[2,5]),o($V81,[2,22]),o($VT,$VL,{10:[1,145]}),o($V81,[2,26]),o([13,14,21,24,25,28,29,30,34,35,36,37,38,50,51,52,56,57],[2,39]),o($VT,$VL,{10:[1,146]}),{10:[1,147],20:$VS,43:42,44:43,45:44,46:$Vp,49:45,58:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,65:$Vw,66:$Vx,67:$Vy,68:$Vz,69:$VA,70:$VB,71:$VC,72:$VD,73:$VE,74:$VF,75:$VG},o($V81,[2,33]),o($VT,$VL,{13:$V91,14:$V91,21:$V91,24:$V91,25:$V91,28:$V91,29:$V91,30:$V91,34:$V91,35:$V91,36:$V91,37:$V91,38:$V91,50:$V91,51:$V91,52:$V91,56:$V91,57:$V91}),{9:$V0,14:$V1,19:87,24:$V4,25:$V5,31:148,39:24,46:$V6,47:$V7,48:$V8,50:$V9,51:$Va,52:$Vb,53:$Vc,54:$Vd,55:$Ve,56:$Vf,57:$Vg,58:$Vh},{29:[1,149]},o($V81,[2,29],{21:[1,150]}),o($V81,[2,31],{21:[1,151]}),o($VT,$VL,{13:$Va1,14:$Va1,21:$Va1,24:$Va1,25:$Va1,28:$Va1,29:$Va1,30:$Va1,34:$Va1,35:$Va1,36:$Va1,37:$Va1,38:$Va1,50:$Va1,51:$Va1,52:$Va1,56:$Va1,57:$Va1}),{14:[1,152]},o($V81,[2,28]),o($V81,[2,30]),o($V81,[2,25],{21:[1,153]}),o($V81,[2,24])],
defaultActions: {32:[2,1],72:[2,97],112:[2,34],113:[2,35],114:[2,36]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};



const CErrores= require("./Excepciones/Errores")
const CNodoErrores= require("./Excepciones/NodoErrores")
const inicio = require("../../../componentes/contenido-inicio/contenido-inicio.component")
const Tipo= require("./Simbolo/Tipo");
const aritmetica= require("./Expresion/Aritmetica");
const logica= require("./Expresion/Logica");
const bit= require("./Expresion/Bit");
const concatenacion= require("./Expresion/Concatenar");
const relacional= require("./Expresion/Relacional");
const conversion= require("./Expresion/Conversion");
const unario= require("./Expresion/Unario");
const Sentencia= require("./Expresion/Sentencia");
const termino= require("./Expresion/Termino");
const identificador= require("./Expresion/Identificador");
//instrucciones
const Llamada= require("./Instrucciones/Llamada");
const Asignacion= require("./Instrucciones/Asignacion");
const Declaracion= require("./Instrucciones/Declaracion");
const Funcion= require("./Instrucciones/Funcion");
const AsignacionEstructura= require("./Instrucciones/AsignacionEstructura");
const Estructura= require("./Instrucciones/Estructura");
const Etiqueta= require("./Instrucciones/Etiqueta");
const Exit= require("./Instrucciones/Exit");
const Print= require("./Instrucciones/Print");
const SaltoCondicional= require("./Instrucciones/SaltoCondicional");
const SaltoIncondicional= require("./Instrucciones/SaltoIncondicional");
const Unset= require("./Instrucciones/Unset");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:
break;
case 2:
break;
case 3:return 53
break;
case 4:return 76
break;
case 5:return 23
break;
case 6:return 77 
break;
case 7:return 78        
break;
case 8:return 29
break;
case 9:return 28
break;
case 10:return 'ABS'
break;
case 11:return 36
break;
case 12:return 37
break;
case 13:return 38
break;
case 14:return 34
break;
case 15:return 30
break;
case 16:return 62
break;
case 17:return 'READ'
break;
case 18:return 'ARRAY'
break;
case 19:return 25
break;
case 20:return "STACK"
break;
case 21:return 79
break;
case 22:return 8
break;
case 23:return "RETURN_INS"
break;
case 24:return 'NUMBER'
break;
case 25:return 50
break;
case 26:return 57
break;
case 27:return 52
break;
case 28:return 51
break;
case 29:return 56
break;
case 30:return 16
break;
case 31:return 15
break;
case 32:return 14;
break;
case 33: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 55; 
break;
case 34: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 'CARACTER'; 
break;
case 35:return 54;
break;
case 36:return 69
break;
case 37:return 46
break;
case 38:return 70
break;
case 39:return 71
break;
case 40:return 72
break;
case 41:return 67
break;
case 42:return 40
break;
case 43:return 65
break;
case 44:return 66
break;
case 45:return 63
break;
case 46:return 64
break;
case 47:return 68
break;
case 48:return 48
break;
case 49:return 62
break;
case 50:return 75
break;
case 51:return 47
break;
case 52:return 9
break;
case 53:return 10
break;
case 54:return 41
break;
case 55:return 42
break;
case 56:return 11
break;
case 57:return 13
break;
case 58:return 20
break;
case 59:return 'VALCHAR';
break;
case 60:return 'VALNUM';
break;
case 61:return 'VALDEC';
break;
case 62:return 58  
break;
case 63:return 74     
break;
case 64:return 60  
break;
case 65:return 61  
break;
case 66:return 21
break;
case 67:return 32
break;
case 68:return 73
break;
case 69:return 'SHIFTIZQ'
break;
case 70:return 5
break;
case 71:inicio.listaErrores.push(new CNodoErrores.default("Lexico","No se esperaba el caracter: "+yy_.yytext,yy_.yylloc.first_line,yy_.yylloc.first_column)); console.log("Lexico, No se esperaba el caracter: "+yy_.yytext +" Linea: "+ yy_.yylloc.first_line + "Columna: " + yy_.yylloc.first_column);
break;
}
},
rules: [/^(?:\s+)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\/\/.*)/i,/^(?:([0-9]+(\.[0-9]+)?))/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:float\b)/i,/^(?:char\b)/i,/^(?:goto\b)/i,/^(?:exit\b)/i,/^(?:abs\b)/i,/^(?:print\b)/i,/^(?:printf\b)/i,/^(?:snprintf\b)/i,/^(?:unset\b)/i,/^(?:if\b)/i,/^(?:xor\b)/i,/^(?:read\b)/i,/^(?:array\b)/i,/^(?:heap\b)/i,/^(?:stack\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:return\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[$][t]([a-zA-Z_0-9])+)/i,/^(?:[$][v]([0-9]+)?)/i,/^(?:[$][s]([0-9]+)?)/i,/^(?:[$][r][a]([0-9]+)?)/i,/^(?:[$][p])/i,/^(?:[<]([a-zA-Z"."]+)[>])/i,/^(?:#include\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_Ññáéíúó]*)/i,/^(?:"[^\"]*")/i,/^(?:'[^\']*')/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:==)/i,/^(?:=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:xor\b)/i,/^(?:\\\^)/i,/^(?:~)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:%c\b)/i,/^(?:%e\b)/i,/^(?:%d\b)/i,/^(?:&)/i,/^(?:\|)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:;)/i,/^(?::)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}