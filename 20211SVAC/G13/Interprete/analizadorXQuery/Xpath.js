/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XPath = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,27],$V1=[1,11],$V2=[1,28],$V3=[1,55],$V4=[1,16],$V5=[1,13],$V6=[1,24],$V7=[1,12],$V8=[1,25],$V9=[1,37],$Va=[1,15],$Vb=[1,73],$Vc=[1,17],$Vd=[1,18],$Ve=[1,19],$Vf=[1,21],$Vg=[1,22],$Vh=[1,38],$Vi=[1,39],$Vj=[1,63],$Vk=[1,65],$Vl=[1,66],$Vm=[1,67],$Vn=[1,68],$Vo=[1,69],$Vp=[1,70],$Vq=[1,71],$Vr=[1,72],$Vs=[1,57],$Vt=[1,58],$Vu=[1,59],$Vv=[1,60],$Vw=[1,61],$Vx=[1,62],$Vy=[1,56],$Vz=[1,2,8,10,12,13,22,33,37,41,50,51,52,67,68,69,71,72,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,126],$VA=[1,2,8,10,12,13,22,25,33,37,40,41,50,51,52,67,68,69,71,72,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,126],$VB=[1,2,8,10,12,13,22,25,33,37,40,41,67,68,69,71,72,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,126],$VC=[1,75],$VD=[1,76],$VE=[1,77],$VF=[1,78],$VG=[1,79],$VH=[1,80],$VI=[1,81],$VJ=[1,82],$VK=[1,83],$VL=[1,84],$VM=[1,85],$VN=[1,86],$VO=[1,87],$VP=[1,88],$VQ=[1,89],$VR=[1,90],$VS=[1,91],$VT=[1,98],$VU=[1,100],$VV=[1,2,8,10,12,13,15,20,22,25,33,37,40,41,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,75,78,80,85,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,120,126],$VW=[1,2,8,10,12,13,15,20,22,25,33,37,40,41,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,126],$VX=[1,2,8,10,12,13,15,20,22,25,33,37,40,41,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,75,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,126],$VY=[2,75],$VZ=[1,2,8,10,12,13,15,20,22,25,33,37,40,41,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,75,78,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,121,126],$V_=[1,108],$V$=[1,2,8,10,12,13,15,20,22,25,33,37,40,41,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,75,78,80,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,121,126],$V01=[1,110],$V11=[1,111],$V21=[1,2,8,10,12,13,15,20,22,25,33,37,40,41,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,75,78,80,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,121,126],$V31=[1,118],$V41=[1,119],$V51=[1,121],$V61=[1,120],$V71=[1,2,8,10,12,13,15,20,22,25,33,37,40,41,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,75,78,80,85,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,121,126],$V81=[1,127],$V91=[1,123],$Va1=[1,124],$Vb1=[1,125],$Vc1=[1,126],$Vd1=[1,2,8,10,12,13,15,20,22,25,33,37,40,41,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,75,78,80,85,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,121,126],$Ve1=[1,130],$Vf1=[1,131],$Vg1=[1,134],$Vh1=[1,2,8,10,12,13,15,20,22,25,33,37,40,41,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,75,78,80,85,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,120,121,126],$Vi1=[1,138],$Vj1=[2,131],$Vk1=[2,71],$Vl1=[1,8,25,40],$Vm1=[2,39],$Vn1=[2,102],$Vo1=[1,181],$Vp1=[12,13,50,51,52,67,68,69,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,126],$Vq1=[12,52],$Vr1=[1,2,8,10,12,13,15,20,22,25,33,37,40,41,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,126],$Vs1=[1,2,8,10,12,13,15,20,22,25,33,37,40,41,67,68,69,71,72,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,126],$Vt1=[1,215],$Vu1=[15,20],$Vv1=[1,232],$Vw1=[15,18,20,23,38],$Vx1=[1,250];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"XQuery":3,"LInstruccionesXQ":4,"InstruccionXQ":5,"Instruccion":6,"DFuncion":7,"R_DECLARE":8,"R_FUNC":9,"R_LOCAL":10,"DOSPUNTOS":11,"NOMBRE":12,"PARENTESISA":13,"L_PARAMF":14,"PARENTESISC":15,"RAS":16,"T":17,"INTERROGACIONC":18,"BloqueF":19,"COMA":20,"PARAMF":21,"DOLAR":22,"LLAVEA":23,"BloqueI":24,"LLAVEC":25,"SEMICOLON":26,"LInstrucciones":27,"Declaracion":28,"Asignacion":29,"SIf":30,"E":31,"Return":32,"R_RETURN":33,"LlamadaFuncion":34,"ParametrosLL":35,"LPLL":36,"RLET":37,"ASIGNAR":38,"L_Condiciones":39,"R_ELSE":40,"R_IF":41,"R_THEN":42,"Rxs":43,"R_INT":44,"R_DOBLE":45,"R_DECIMAL":46,"R_FLOAT":47,"R_STRING":48,"R_BOOLEAN":49,"MAS":50,"MENOS":51,"POR":52,"DIV":53,"MOD":54,"IGUAL":55,"DIFERENTE":56,"MAYOR":57,"MAYORIG":58,"MENOR":59,"MENORIG":60,"EQ":61,"NE":62,"GT":63,"GE":64,"LT":65,"LE":66,"INTEGER":67,"DECIMAL":68,"CADENA":69,"XPath":70,"RTRUE":71,"RFALSE":72,"Expr":73,"ExprSingle":74,"PIPE":75,"OrExpr":76,"AndExpr":77,"ROR":78,"ComparisonExpr":79,"RAND":80,"AdditiveExpr":81,"GeneralComp":82,"MultiplicativeExpr":83,"UnaryExpr":84,"IDIV":85,"PathExpr":86,"BARRA":87,"RelativePathExpr":88,"DOBLEBARRA":89,"StepExpr":90,"PostfixExpr":91,"AxisStep":92,"ReverseStep":93,"ForwardStep":94,"PredicateList":95,"Predicate":96,"AbbrevForwardStep":97,"ForwardAxis":98,"NameTest":99,"ARROBA":100,"RCHILD":101,"DOBLEDOSPUNTOS":102,"RDESCENDANT":103,"RATTRIBUTE":104,"RSELF":105,"RDESSELF":106,"RFOLLOWSIBLING":107,"RFOLLOW":108,"RNAMESPACE":109,"NodeTest":110,"AbbrevReverseStep":111,"ReverseAxis":112,"DOBLEPUNTO":113,"RPARENT":114,"RANCESTOR":115,"RPRECEDSIBLING":116,"RPRECED":117,"RANCESTORORSELF":118,"PrimaryExpr":119,"CORA":120,"CORB":121,"Literal":122,"FunctionCall":123,"ContextItemExpr":124,"ParenthesizedExpr":125,"PUNTO":126,"$accept":0,"$end":1},
terminals_: {2:"error",8:"R_DECLARE",9:"R_FUNC",10:"R_LOCAL",11:"DOSPUNTOS",12:"NOMBRE",13:"PARENTESISA",15:"PARENTESISC",16:"RAS",18:"INTERROGACIONC",20:"COMA",22:"DOLAR",23:"LLAVEA",25:"LLAVEC",26:"SEMICOLON",33:"R_RETURN",37:"RLET",38:"ASIGNAR",40:"R_ELSE",41:"R_IF",42:"R_THEN",43:"Rxs",44:"R_INT",45:"R_DOBLE",46:"R_DECIMAL",47:"R_FLOAT",48:"R_STRING",49:"R_BOOLEAN",50:"MAS",51:"MENOS",52:"POR",53:"DIV",54:"MOD",55:"IGUAL",56:"DIFERENTE",57:"MAYOR",58:"MAYORIG",59:"MENOR",60:"MENORIG",61:"EQ",62:"NE",63:"GT",64:"GE",65:"LT",66:"LE",67:"INTEGER",68:"DECIMAL",69:"CADENA",71:"RTRUE",72:"RFALSE",75:"PIPE",78:"ROR",80:"RAND",85:"IDIV",87:"BARRA",89:"DOBLEBARRA",100:"ARROBA",101:"RCHILD",102:"DOBLEDOSPUNTOS",103:"RDESCENDANT",104:"RATTRIBUTE",105:"RSELF",106:"RDESSELF",107:"RFOLLOWSIBLING",108:"RFOLLOW",109:"RNAMESPACE",113:"DOBLEPUNTO",114:"RPARENT",115:"RANCESTOR",116:"RPRECEDSIBLING",117:"RPRECED",118:"RANCESTORORSELF",120:"CORA",121:"CORB",126:"PUNTO"},
productions_: [0,[3,1],[4,2],[4,1],[5,1],[5,1],[7,12],[7,11],[7,9],[14,3],[14,1],[14,0],[21,5],[21,4],[21,2],[19,4],[27,2],[27,1],[6,1],[6,1],[6,1],[6,1],[6,1],[32,2],[32,1],[34,4],[35,3],[35,2],[36,3],[36,1],[28,8],[28,7],[28,5],[29,4],[30,3],[30,1],[39,8],[39,6],[24,1],[24,0],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,2],[31,1],[70,1],[70,1],[73,1],[73,3],[73,3],[73,3],[74,1],[76,1],[76,3],[77,1],[77,3],[79,1],[79,3],[82,1],[82,1],[82,1],[82,1],[82,1],[82,1],[81,1],[81,3],[81,3],[83,1],[83,3],[83,3],[83,3],[83,3],[84,1],[84,2],[84,2],[86,2],[86,2],[86,1],[86,1],[88,1],[88,3],[88,3],[90,1],[90,1],[92,1],[92,1],[92,2],[92,2],[95,1],[95,2],[94,1],[94,2],[97,2],[97,1],[98,2],[98,2],[98,2],[98,2],[98,2],[98,2],[98,2],[98,2],[110,1],[99,1],[99,1],[93,1],[93,2],[111,1],[112,2],[112,2],[112,2],[112,2],[112,2],[91,1],[91,2],[96,3],[119,1],[119,1],[119,1],[119,1],[122,1],[122,1],[122,1],[123,3],[124,1],[125,2],[125,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    this.$ = new AST($$[$0]);
    return this.$;
  
break;
case 2: case 16:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 17:
 this.$ = [$$[$0]] 
break;
case 4: case 5: case 18: case 19: case 20: case 21: case 22: case 72:
 this.$ = $$[$0]; 
break;
case 6:

      let auxDF0 = new FuncionXQ($$[$0-7], $$[$0-5], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
      auxDF0.setTipo($$[$0-2]);
      this.$ = auxDF0;
    
break;
case 7:

      let auxDF1 = new FuncionXQ($$[$0-6], $$[$0-4], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
      auxDF1.setTipo($$[$0-1]);
      this.$ = auxDF1;
    
break;
case 8:

      this.$ = new FuncionXQ($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 9: case 28:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 10: case 29:
 this.$ = [$$[$0]]; 
break;
case 11: case 27:
 this.$ = []; 
break;
case 12:

      let auxPF0 = new ParametroXQ($$[$0-3]);
      auxPF0.setTipo($$[$0-1]);
      this.$ = auxPF0;
    
break;
case 13:

      let auxPF1 = new ParametroXQ($$[$0-2]);
      auxPF1.setTipo($$[$0]);
      this.$ = auxPF1;
    
break;
case 14:

      this.$ = new ParametroXQ($$[$0]);
    
break;
case 15:
 this.$ = $$[$0-2]; 
break;
case 23:
 this.$ = new ReturnXQ($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 24:
 this.$ = new ReturnXQ(null, _$[$0].first_line, _$[$0].first_column); 
break;
case 25:

      this.$ = new LlamadaF($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 26: case 64:
 this.$ = $$[$0-1]; 
break;
case 30:
 
      let auxD0 = new DeclaracionXQ($$[$0-5], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
      auxD0.setTipo($$[$0-3]);
      this.$ = auxD0;
    
break;
case 31:
 
      let auxD1 = new DeclaracionXQ($$[$0-4], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
      auxD1.setTipo($$[$0-2]);
      this.$ = auxD1;
    
break;
case 32:

      this.$ = new DeclaracionXQ($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 33:
 
    this.$ = new AsignacionXQ($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, $$[$0]);
  
break;
case 34:
 this.$ = new If($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 35:
 this.$ = new If($$[$0], null, _$[$0].first_line, _$[$0].first_column); 
break;
case 36:

      let auxLC1 = new Condicion_If($$[$0-3], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column); 
      $$[$0-7].push(auxLC1);
      this.$ = $$[$0-7];
    
break;
case 37:
 
      let auxLC0 = new Condicion_If($$[$0-3], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column); 
      this.$ = [auxLC0]
    
break;
case 38:

      let auxBlI = new BloqueXQ();
      auxBlI.setDatos($$[$0], _$[$0].first_line, _$[$0].first_column);
      this.$ = auxBlI;
    
break;
case 39:
 
      this.$ = new BloqueXQ();
    
break;
case 40:
 this.$ = new TipoXQ(EnumTipo.entero); 
break;
case 41: case 42: case 43:
 this.$ = new TipoXQ(EnumTipo.doble); 
break;
case 44:
 this.$ = new TipoXQ(EnumTipo.cadena); 
break;
case 45:
 this.$ = new TipoXQ(EnumTipo.booleano); 
break;
case 46:
 this.$ = new SumaXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 47:
 this.$ = new RestaXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 48:
 this.$ = new MultiplicacionXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 49:
 this.$ = new DivisionXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 50:
 this.$ = new ModuloXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 51:
 this.$ = new NegativoXQ($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 52: case 58:
 this.$ = new IgualXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 53: case 59:
 this.$ = new NoIgualXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 54: case 60:
 this.$ = new MayorXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 55: case 61:
 this.$ = new MayorIgualXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 56: case 62:
 this.$ = new MenorXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 57: case 63:
 this.$ = new MenorIgualXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 65:
 this.$ = new LiteralXQ(new TipoXQ(EnumTipo.entero), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 66:
 this.$ = new LiteralXQ(new TipoXQ(EnumTipo.doble), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 67:
 this.$ = new LiteralXQ(new TipoXQ(EnumTipo.cadena), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 68:
 this.$ = new LiteralXQ(new TipoXQ(EnumTipo.XPath), $$[$0], _$[$0].first_column, _$[$0].first_column); 
break;
case 69: case 70:
 this.$ = new LiteralXQ(new TipoXQ(EnumTipo.booleano), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 71:
 this.$ = new IdXQ($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 73:
 
    grafo.generarPadre(1, "INICIO");grafo.generarHijos("Expr");
    var retornoErrores = Object.assign([], ListaErrores);
    ListaErrores = [];
    var retornoGrafo = Object.assign({}, grafo);
    grafo = new grafoCST();
    this.$ = new Comando($$[$0],retornoGrafo.pilaNodos,retornoGrafo.PilaEdges,retornoGrafo.GrahpvizNodo+retornoGrafo.GrahpvizEdges,retornoErrores,retornoGrafo.TablaGramatica);
    //return this.$ 
  
break;
case 74:
  
      ListaErrores.push({Error:"Error sintactico :"+yytext,tipo:"Sintactico",Linea:this._$.first_line,columna:this._$.first_column});
      var retornoErrores = Object.assign([], ListaErrores);
      ListaErrores = [];
      grafo = new grafoCST(); 
      this.$ = new Comando([],[],[],"",retornoErrores,[])
      //return new Comando([],[],[],"",retornoErrores,[])
    
break;
case 75:
 
    this.$=[];this.$.push($$[$0]); 
    grafo.generarPadre(1, "ExprSingle");
    grafo.generarHijos("ExprSingle");
    grafo.generarTexto(`expr = []; expr.push(ExprSingle.valor);`);
  
break;
case 76:
 
    this.$=$$[$0-2];this.$.push($$[$0]);
    grafo.generarPadre(3, "ExprSingle");
    grafo.generarPadre(1, "Expr");
    grafo.generarHijos("Expr",$$[$0-1],"ExprSingle");
    grafo.generarTexto(`expr.push(ExprSingle.valor);`);
  
break;
case 77:
 
    this.$=$$[$0-2];grafo.generarPadre(1, "Expr");
    ListaErrores.push({Error:"Error sintactico se recupero en:"+yytext,tipo:"Sintactico",Linea:this._$.first_line,columna:this._$.first_column}); 
    grafo.generarHijos("Expt",$$[$0-1],"error");
    grafo.generarTexto(`return expr; new Error();`); 
  
break;
case 78:
 
    this.$=[];this.$.push($$[$0]); grafo.generarPadre(3, "ExprSingle");
    grafo.generarHijos("error",$$[$0-1],"ExprSingle");
    ListaErrores.push({Error:"Error sintactico se recupero en:"+yytext,tipo:"Sintactico",Linea:this._$.first_line,columna:this._$.first_column}); 
    grafo.generarPadre(1, "error"); grafo.generarHijos("error",$$[$0-1]);
    grafo.generarTexto(`expr = []; new Error();`);
  
break;
case 79:
 
    this.$=$$[$0]; grafo.generarPadre(1, "OrExpr");
    grafo.generarHijos("OrExpr");
    grafo.generarTexto(`ExprSingle.valor = OrExpr.valor`);
  
break;
case 80:
 
    this.$ = $$[$0]; grafo.generarPadre(1,"AndExpr");
    grafo.generarHijos("AndExpr");
    grafo.generarTexto(`OrExpr.valor = AndExpr.valor`);
  
break;
case 81:
 
    this.$ = new Logical($$[$0-2],$$[$0-1],$$[$0]); grafo.generarPadre(3, "AndExpr");
    grafo.generarPadre(1, "OrExpr");
    grafo.generarHijos("OrExpr",$$[$0-1],"AndExpr");
    grafo.generarTexto(`OrExpr.valor = new Logical(OrExpr.valor,${$$[$0-1]},AndExpr.valor);`);
  
break;
case 82:
 
    this.$ = $$[$0]; grafo.generarPadre(1, "ComparisonExpr");
    grafo.generarHijos("ComparisonExpr");
    grafo.generarTexto(`AndExpr.valor = ComparisonExpr.valor`);
  
break;
case 83:
 
    this.$ = new Logical($$[$0-2],$$[$0-1],$$[$0]); grafo.generarPadre(3, "ComparisonExpr");
    grafo.generarPadre(1, "AndExpr");
    grafo.generarHijos("AndExpr",$$[$0-1],"ComparisonExpr");
    grafo.generarTexto(`AndExpr.valor = new Logical(AndExpr.valor,${$$[$0-1]},ComparisonExpr.valor);`);
  
break;
case 84:
 
    this.$=$$[$0]; grafo.generarPadre(1, "AdditiveExpr");
    grafo.generarHijos("StringConcatExpr");
    grafo.generarTexto(`ComparisonExpr.valor = AdditiveExpr.valor`);
  
break;
case 85:
 
    this.$ = new ComparisonExp($$[$0-2],$$[$0-1],$$[$0]); grafo.generarPadre(3, "AdditiveExpr");
    grafo.generarPadre(2, "GeneralComp");
    grafo.generarPadre(1, "AdditiveExpr");
    grafo.generarHijos("StringConcatExpr","GeneralComp","StringConcatExpr");
    grafo.generarTexto(`ComparisonExpr.valor = new ComparisonExp(AdditiveExpr.valor, GeneralComp.valor, AdditiveExpr.valor)`);
  
break;
case 86: case 87: case 88: case 89: case 90: case 91:
 this.$ = $$[$0]; grafo.generarHijos($$[$0]); grafo.generarTexto(`GeneralComp.valor = ${$$[$0]}`); 
break;
case 92:
 
    this.$=$$[$0]; grafo.generarPadre(1, "MultiplicativeExpr"); grafo.generarHijos("MultiplicativeExpr");
    grafo.generarTexto(`AdditiveExpr.valor = MultiplicativeExpr.valor`);
  
break;
case 93: case 94:
 
    this.$= new Arithmetic($$[$0-2],$$[$0-1],$$[$0]); grafo.generarPadre(3, "MultiplicativeExpr");
    grafo.generarPadre(1, "AdditiveExpr");
    grafo.generarHijos("AdditiveExpr",$$[$0-1],"MultiplicativeExpr");
    grafo.generarTexto(`AdditiveExpr.valor = new Arithmetic(AdditiveExpr.valor, ${$$[$0-1]}, MultiplicativeExpr.valor);`);
  
break;
case 95:
 
    this.$=$$[$0]; grafo.generarPadre(1, "UnaryExpr");
    grafo.generarHijos("UnaryExpr");
    grafo.generarTexto(`MultiplicativeExpr.valor = UnaryExpr.valor;`);
  
break;
case 96:
 
    this.$= new Arithmetic($$[$0-2],$$[$0-1],$$[$0]);
    grafo.generarPadre(3, "UnaryExpr");
    grafo.generarPadre(1, "MultiplicativeExpr");
    grafo.generarHijos("MultiplicativeExpr",$$[$0-1],"UnaryExpr");
    grafo.generarTexto(`MultiplicativeExpr.valor = new Arithmetic(MultiplicativeExpr.valor,${$$[$0-1]},UnaryExpr.valor);`);
  
break;
case 97: case 98: case 99:
 
    this.$= new Arithmetic($$[$0-2],$$[$0-1],$$[$0]); grafo.generarPadre(3, "UnaryExpr");
    grafo.generarPadre(1, "MultiplicativeExpr");
    grafo.generarHijos("MultiplicativeExpr",$$[$0-1],"UnaryExpr");
    grafo.generarTexto(`MultiplicativeExpr.valor = new Arithmetic(MultiplicativeExpr.valor,${$$[$0-1]},UnaryExpr.valor);`);
  
break;
case 100:
 
    this.$=$$[$0]; grafo.generarPadre(1, "PathExpr");
    grafo.generarHijos("PathExpr");
    grafo.generarTexto(`UnaryExpr.valor = PathExpr.valor;`);
  
break;
case 101:
 
    this.$=new Unary($$[$0-1], $$[$0]); grafo.generarPadre(2, "UnaryExpr");
    grafo.generarHijos($$[$0-1],"UnaryExp");
    grafo.generarTexto(`UnaryExp.valor = new Unary(${$$[$0-1]},UnaryExpr.valor);`);
  
break;
case 102:
 
    this.$=new Unary($$[$0-1], $$[$0]);
    grafo.generarPadre(2, "UnaryExpr");
    grafo.generarHijos($$[$0-1],"UnaryExp");
    grafo.generarTexto(`UnaryExp.valor = new Unary(${$$[$0-1]},UnaryExpr.valor);`);
  
break;
case 103:
 
    $$[$0][0].tipo=TipoPath.ABS;
    this.$=new PathExp($$[$0]); 
    grafo.generarPadre(2, "RelativePathExpr");
    grafo.generarHijos($$[$0-1],"RelativePathExpr");
    grafo.generarTexto(`path[0].tipo = Absoluto; PathExpr.valor = new PathExp(path.valor);`);
  
break;
case 104:
 
    $$[$0][0].tipo=TipoPath.REL;
    this.$=new PathExp($$[$0]);
    grafo.generarPadre(2, "RelativePathExpr");
    grafo.generarHijos($$[$0-1],"RelativePathExpr");
    grafo.generarTexto(`path[0].tipo = Relativo; PathExpr.valor = new PathExp(path.valor);`);
  
break;
case 105:
 
    this.$=new PathExp($$[$0]); 
    grafo.generarPadre(1, "RelativePathExpr");
    grafo.generarHijos("RelativePathExpr");
    grafo.generarTexto(`PathExpr.valor = new PathExp(path.valor);`);
  
break;
case 106:
 
    this.$=new PathExp([]);
    grafo.generarHijos($$[$0]);
    grafo.generarTexto(`PathExpr.valor = new PathExp();`);
  
break;
case 107:
 
    this.$ = []; this.$.push($$[$0]); grafo.generarPadre(1, "StepExpr");
    grafo.generarHijos("StepExpr");
    grafo.generarTexto(`path = []; path.push(StepExpr.valor);`);
  
break;
case 108:
 
    this.$ = $$[$0-2]; $$[$0].tipo=TipoPath.ABS; this.$.push($$[$0]); 
    grafo.generarPadre(3, "StepExpr");
    grafo.generarPadre(1, "RelativePathExpr");
    grafo.generarHijos("RelativePathExpr",$$[$0-1],"StepExpr");
    grafo.generarTexto(`StepExpr.tipo = Absoluto; path.push(StepExpr.valor); `);
  
break;
case 109:
 
    this.$ = $$[$0-2]; $$[$0].tipo=TipoPath.REL; this.$.push($$[$0]);
    grafo.generarPadre(3,"StepExpr");
    grafo.generarPadre(1, "RelativePathExpr");
    grafo.generarHijos("RelativePathExpr",$$[$0-1],"StepExpr");
    grafo.generarTexto(`StepExpr.tipo = Relativo; path.push(StepExpr.valor);`);
  
break;
case 110:
 this.$=$$[$0]; grafo.generarPadre(1, "PostfixExpr"); grafo.generarHijos("PostfixExpr"); grafo.generarTexto(`StepExpr.valor = PostfixExpr.valor;`); 
break;
case 111:
 this.$=$$[$0]; grafo.generarPadre(1, "AxisStep"); grafo.generarHijos("AxisStep"); grafo.generarTexto(`StepExpr.valor = AxisStep.valor`);  
break;
case 112:
 this.$=$$[$0]; grafo.generarPadre(1, "ReverseStep");grafo.generarHijos("ReverseStep"); grafo.generarTexto(`AxisStep.valor = ReverseStep.valor;`); 
break;
case 113:
 this.$=$$[$0]; grafo.generarPadre(1, "ForwardStep");grafo.generarHijos("ForwardStep"); grafo.generarTexto(`AxisStep.valor = ForwardStep.valor;`);
break;
case 114:
 
    this.$=$$[$0-1]; this.$.predicado=$$[$0]; grafo.generarPadre(2, "PredicateList");
    grafo.generarPadre(1, "ReverseStep"); 
    grafo.generarHijos("ReverseStep","PredicateList");
    grafo.generarTexto(`ReverseStep.predicado = PredicateList.valor; AxisStep.valor = ReverseStep;`);
  
break;
case 115:
 
    this.$=$$[$0-1]; this.$.predicado=$$[$0]; grafo.generarPadre(2, "PredicateList");
    grafo.generarPadre(1, "ForwardStep"); 
    grafo.generarHijos("ForwardStep","PredicateList");
    grafo.generarTexto(`ForwardStep.predicado = PredicateList.valor; AxisStep.valor = ForwardStep;`);
  
break;
case 116:
 
    this.$=[];this.$.push($$[$0]);
    grafo.generarPadre(1, "Predicate");
    grafo.generarHijos("Predicate");
    grafo.generarTexto(`predicateList = []; predicateList.push(Predicate.valor);`);  
  
break;
case 117:
 
    this.$=$$[$0-1];this.$.push($$[$0]); grafo.generarPadre(2, "Predicate");
    grafo.generarPadre(1, "PredicateList");
    grafo.generarHijos("PredicateList","Predicate");
    grafo.generarTexto(`predicateList.push(Predicate.valor);`);
  
break;
case 118:
 
    this.$=$$[$0]; grafo.generarPadre(1, "AbbrevForwardStep");
    grafo.generarHijos("AbbrevForwardStep");
    grafo.generarTexto(`ForwardStep.valor = AbbrevForwardStep.valor`);
  
break;
case 119:
 
    this.$=$$[$0-1]; this.$.nombre=$$[$0]; grafo.generarPadre(2, "NameTest");
    grafo.generarPadre(1, "ForwardAxis");
    grafo.generarHijos("ForwardAxis","NameTest");
    grafo.generarTexto(`ForwardAxis.nombre = NameTest.valor; ForwardStep.valor = ForwardAxis.valor`);
  
break;
case 120:
 
    this.$=new Atributo($$[$0],[],TipoPath.ABS);
    grafo.generarPadre(2, "NameTest");
    grafo.generarHijos($$[$0-1],"NameTest");
    grafo.generarTexto(`AbbrevForwardStep.valor = new Atributo(NameTest.valor);`);
  
break;
case 121:
 
    this.$=new Camino($$[$0],[],TipoPath.ABS);
    grafo.generarPadre(1, "NameTest");
    grafo.generarHijos("NameTest");
    grafo.generarTexto(`AbbrevForwardStep.valor = new Camino(NameTest.valor);`);
  
break;
case 122:
 this.$=new Child(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ForwardAxis.valor = new Child();`); 
break;
case 123:
 this.$=new Descendant(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ForwardAxis.valor = new Descendant();`); 
break;
case 124:
 this.$=new Attribute(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ForwardAxis.valor = new Attribute();`); 
break;
case 125:
 this.$=new Self(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ForwardAxis.valor = new Self();`); 
break;
case 126:
 this.$=new DescSelf(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ForwardAxis.valor = new DescSelf();`); 
break;
case 127:
 this.$=new FollowSibling(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ForwardAxis.valor = new FollowSibling();`); 
break;
case 128:
 this.$=new Follow(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ForwardAxis.valor = new Follow();`);  
break;
case 130:
 this.$=$$[$0]; grafo.generarPadre(1, "NameTest"); grafo.generarHijos("NameTest"); grafo.generarTexto(`NodeTest.valor = NameTest.valor;`); 
break;
case 131: case 132:
 this.$=$$[$0]; grafo.generarHijos($$[$0]); grafo.generarTexto(`NameTest.valor = ${$$[$0]};`); 
break;
case 133:
 
    this.$=$$[$0]; grafo.generarPadre(1, "AbbrevReverseStep");
    grafo.generarHijos("AbbrevReverseStep");
    grafo.generarTexto(`ReverseStep.valor = AbbrevReverseStep.valor`);
 
break;
case 134:
 this.$=$$[$0-1]; this.$.nombre=$$[$0];
    grafo.generarPadre(2, "NameTest");
    grafo.generarPadre(1, "ReverseAxis");
    grafo.generarHijos("ReverseAxis","NameTest");
    grafo.generarTexto(`ReverseAxis.nombre = NameTest; ReverseStep.valor = ReverseAxis;`);
  
break;
case 135:
 this.$=new CaminoInverso("*",[],TipoPath.ABS); grafo.generarHijos($$[$0]); grafo.generarTexto(`caminoInverso = new CaminoInverso(); caminoInverso.tipo = Absoluto; AbbrevReverseStep.valor = caminoInverso;`); 
break;
case 136:
 this.$=new Parent(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`parent = new Parent(); parent.tipo = Absoluto; ReverseAxis.valor = parent;`); 
break;
case 137:
 this.$=new Ancestor(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ancestor = new Ancestor(); ancestor.tipo = Absoluto; ReverseAxis.valor = ancestor;`); 
break;
case 138:
 this.$=new PrecedingSibling(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`precedingS = new PrecedingSibling(); precedingS.tipo = Absoluto; ReverseAxis.valor = precedingS;`); 
break;
case 139:
 this.$=new Preceding(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`preceding = new Preceding(); preceding.tipo = Absoluto; ReverseAxis.valor = preceding;`);
break;
case 140:
 this.$=new AncestorSelf(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ancestorS = new AncestorSelf(); ancestorS.tipo = Absoluto; ReverseAxis.valor = ancestorS;`); 
break;
case 141:
 
    this.$=$$[$0]; grafo.generarPadre(1, "PrimaryExpr"); 
    grafo.generarHijos("PrimaryExpr");
    grafo.generarTexto(`PostfixExpr.valor = PrimaryExpr.valor;`);
  
break;
case 142:
 this.$=$$[$0-1]; this.$.predicado = $$[$0]; grafo.generarPadre(2, "PredicateList");
    grafo.generarPadre(1, "PrimaryExpr");
    grafo.generarHijos("PrimaryExpr","PostfixExprL");
    grafo.generarTexto(`PrimaryExpr.predicado = predicateList.valor; PostfixExpr.valor = PrimaryExpr.valor`);
  
break;
case 143:
 
    this.$=$$[$0-1]; grafo.generarPadre(2, "ExprSingle");
    grafo.generarHijos($$[$0-2],"ExprSingle",$$[$0]);
    grafo.generarTexto(`Predicate.valor = ExprSingle.valor;`);
  
break;
case 144:
 this.$=$$[$0]; grafo.generarPadre(1, "Literal"); grafo.generarHijos("Literal"); grafo.generarTexto("PrimaryExpr.valor = literal.valor"); 
break;
case 145:
 this.$=$$[$0]; grafo.generarPadre(1, "FunctionCall"); grafo.generarHijos("FunctionCall"); grafo.generarTexto("PrimaryExpr.valor = functionCall.valor");
break;
case 146:
 this.$=$$[$0]; grafo.generarPadre(1, "ContextItemExpr"); grafo.generarHijos("ContextItemExpr"); grafo.generarTexto("PrimaryExpr.valor = contextItemExpr.valor");
break;
case 147:
 this.$=$$[$0]; grafo.generarPadre(1, "ParenthesizedExpr"); grafo.generarHijos("ParenthesizedExpr"); grafo.generarTexto("PrimaryExpr.valor = ParenthesizedExpr.valor"); 
break;
case 148:
 this.$=new Literal(Tipo.INTEGER,$$[$0]); grafo.generarHijos($$[$0]); grafo.generarTexto(`return literal = new Literal(${$$[$0]}); literal.tipo = INTEGER;`); 
break;
case 149:
 this.$=new Literal(Tipo.DECIMAL,$$[$0]); grafo.generarHijos($$[$0]); grafo.generarTexto(`return literal = new Literal(${$$[$0]}); literal.tipo = DECIMAL;`); 
break;
case 150:
 this.$=new Literal(Tipo.STRING,$$[$0]);  grafo.generarHijos($$[$0]); grafo.generarTexto(`return literal = new Literal(${$$[$0]}); literal.tipo = STRING;`); 
break;
case 151:

    this.$ = new CallFunction([],TipoPath.ABS,$$[$0-2]);
    grafo.generarHijos($$[$0-2],$$[$0-1],$$[$0]);
    grafo.generarTexto(`functionCall = new CallFunction(); functionCall.tipo = Absoluto;`);
  
break;
case 152:
 this.$=new ContextItemExpr([],TipoPath.ABS); grafo.generarHijos($$[$0]); grafo.generarTexto(`contextItemExpr =  new ContextItemExpr(); contextItemExpr.tipo = Absoluto;`);
break;
case 153:
 this.$=[]; grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ParenthesizedExpr.valor = [];`);
break;
case 154:
 this.$=$$[$0-1]; grafo.generarHijos($$[$0-2],$$[$0-1],$$[$0]); grafo.generarTexto(`ParenthesizedExpr.valor = ExprSingle.valor;`); 
break;
}
},
table: [{2:$V0,3:1,4:2,5:3,6:4,7:5,8:$V1,10:$V2,12:$V3,13:$V4,22:$V5,28:6,29:7,30:8,31:9,32:10,33:$V6,34:23,37:$V7,39:14,41:$V8,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{1:[3]},{1:[2,1],2:$V0,5:74,6:4,7:5,8:$V1,10:$V2,12:$V3,13:$V4,22:$V5,28:6,29:7,30:8,31:9,32:10,33:$V6,34:23,37:$V7,39:14,41:$V8,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},o($Vz,[2,3]),o($Vz,[2,4]),o($Vz,[2,5]),o($VA,[2,18]),o($VA,[2,19]),o($VA,[2,20]),o($VB,[2,21],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS}),o($VA,[2,22]),{9:[1,92]},{22:[1,93]},{12:[1,94]},o([1,2,8,10,12,13,22,25,33,37,41,50,51,52,67,68,69,71,72,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,126],[2,35],{40:[1,95]}),{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:96,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:97,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{2:$V0,10:$V2,12:$V3,13:$V4,15:$VU,22:$VT,31:99,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:101,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},o($VV,[2,65]),o($VV,[2,66]),o($VV,[2,67]),o($VW,[2,68]),o($VW,[2,69]),o($VW,[2,70]),o($VW,[2,72]),o([1,8,25,33,37,40,41],[2,24],{70:20,34:23,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,88:40,90:41,91:42,92:43,119:44,93:45,94:46,122:47,123:48,124:49,125:50,111:51,112:52,97:53,98:54,99:64,31:102,2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,71:$Vf,72:$Vg,87:$Vh,89:$Vi,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,126:$Vy}),{13:[1,103]},o($VW,[2,73],{75:[1,104]}),o($VW,[2,74],{75:[1,105]}),{11:[1,106]},o($VX,$VY),o([1,2,8,10,12,13,15,20,22,25,33,37,40,41,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,75,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,121,126],[2,79],{78:[1,107]}),o($VZ,[2,80],{80:$V_}),o($V$,[2,82]),o([1,2,8,10,12,13,15,20,22,25,33,37,40,41,52,53,54,61,62,63,64,65,66,67,68,69,71,72,75,78,80,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,121,126],[2,84],{82:109,50:$V01,51:$V11,55:[1,112],56:[1,113],57:[1,116],58:[1,117],59:[1,114],60:[1,115]}),o($V21,[2,92],{52:$V31,53:$V41,54:$V51,85:$V61}),o($V71,[2,95]),o($V71,[2,100]),{12:$V3,13:$V81,50:$V9,51:$V91,52:$Vb,67:$Va1,68:$Vb1,69:$Vc1,84:122,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},o([1,2,8,10,15,20,22,25,33,37,40,41,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,71,72,75,78,80,85,87,89,121],[2,106],{90:41,91:42,92:43,119:44,93:45,94:46,122:47,123:48,124:49,125:50,111:51,112:52,97:53,98:54,99:64,88:128,12:$V3,13:$V81,52:$Vb,67:$Va1,68:$Vb1,69:$Vc1,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,126:$Vy}),{12:$V3,13:$V81,52:$Vb,67:$Va1,68:$Vb1,69:$Vc1,88:129,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},o($Vd1,[2,105],{87:$Ve1,89:$Vf1}),o($V71,[2,107]),o($V71,[2,110]),o($V71,[2,111]),o($V71,[2,141],{95:132,96:133,120:$Vg1}),o($V71,[2,112],{96:133,95:135,120:$Vg1}),o($V71,[2,113],{96:133,95:136,120:$Vg1}),o($Vh1,[2,144]),o($Vh1,[2,145]),o($Vh1,[2,146]),o($Vh1,[2,147]),o($Vh1,[2,133]),{12:$Vi1,52:$Vb,99:137},o($Vh1,[2,118]),{12:$Vi1,52:$Vb,99:139},o([1,2,8,10,12,15,20,22,25,33,37,40,41,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,75,78,80,85,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,120,121,126],$Vj1,{13:[1,140]}),o($Vh1,[2,152]),o($Vh1,[2,135]),{102:[1,141]},{102:[1,142]},{102:[1,143]},{102:[1,144]},{102:[1,145]},{12:$Vi1,52:$Vb,99:146},o($Vh1,[2,121]),{102:[1,147]},{102:[1,148]},{102:[1,149]},{102:[1,150]},{102:[1,151]},{102:[1,152]},{102:[1,153]},{102:[1,154]},o($Vh1,[2,132]),o($Vz,[2,2]),{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:155,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:156,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:157,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:158,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:159,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:160,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:161,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:162,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:163,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:164,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:165,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:166,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:167,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:168,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:169,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:170,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:171,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{10:[1,172]},{12:[1,173]},o([1,2,8,10,12,13,22,25,33,37,40,41,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,126],$Vk1,{38:[1,174]}),o($Vl1,$Vm1,{28:6,29:7,30:8,31:9,32:10,39:14,70:20,34:23,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,88:40,90:41,91:42,92:43,119:44,93:45,94:46,122:47,123:48,124:49,125:50,111:51,112:52,97:53,98:54,99:64,24:175,27:177,6:178,2:$V0,10:$V2,12:$V3,13:$V4,22:$V5,33:$V6,37:$V7,41:[1,176],50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,71:$Vf,72:$Vg,87:$Vh,89:$Vi,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,126:$Vy}),o($VW,[2,51]),o([1,2,8,10,12,13,15,20,22,25,33,37,40,41,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,75,78,80,85,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,126],$Vn1),{12:[1,179]},{15:[1,180],50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS},o($Vh1,[2,153]),o([50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,75],$VY,{15:$Vo1}),o($VB,[2,23],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS}),{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:182,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{2:[1,184],12:$V3,13:$V81,50:$V9,51:$V91,52:$Vb,67:$Va1,68:$Vb1,69:$Vc1,74:183,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{12:$V3,13:$V81,50:$V9,51:$V91,52:$Vb,67:$Va1,68:$Vb1,69:$Vc1,74:185,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{12:[1,186]},{12:$V3,13:$V81,50:$V9,51:$V91,52:$Vb,67:$Va1,68:$Vb1,69:$Vc1,77:187,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{12:$V3,13:$V81,50:$V9,51:$V91,52:$Vb,67:$Va1,68:$Vb1,69:$Vc1,79:188,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{12:$V3,13:$V81,50:$V9,51:$V91,52:$Vb,67:$Va1,68:$Vb1,69:$Vc1,81:189,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{12:$V3,13:$V81,50:$V9,51:$V91,52:$Vb,67:$Va1,68:$Vb1,69:$Vc1,83:190,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{12:$V3,13:$V81,50:$V9,51:$V91,52:$Vb,67:$Va1,68:$Vb1,69:$Vc1,83:191,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},o($Vp1,[2,86]),o($Vp1,[2,87]),o($Vp1,[2,88]),o($Vp1,[2,89]),o($Vp1,[2,90]),o($Vp1,[2,91]),{12:$V3,13:$V81,50:$V9,51:$V91,52:$Vb,67:$Va1,68:$Vb1,69:$Vc1,84:192,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{12:$V3,13:$V81,50:$V9,51:$V91,52:$Vb,67:$Va1,68:$Vb1,69:$Vc1,84:193,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{12:$V3,13:$V81,50:$V9,51:$V91,52:$Vb,67:$Va1,68:$Vb1,69:$Vc1,84:194,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{12:$V3,13:$V81,50:$V9,51:$V91,52:$Vb,67:$Va1,68:$Vb1,69:$Vc1,84:195,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},o($V71,[2,101]),{12:$V3,13:$V81,50:$V9,51:$V91,52:$Vb,67:$Va1,68:$Vb1,69:$Vc1,84:196,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},o($Vh1,[2,148]),o($Vh1,[2,149]),o($Vh1,[2,150]),{12:$V3,13:$V81,15:$VU,50:$V9,51:$V91,52:$Vb,67:$Va1,68:$Vb1,69:$Vc1,74:197,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},o($Vd1,[2,103],{87:$Ve1,89:$Vf1}),o($Vd1,[2,104],{87:$Ve1,89:$Vf1}),{12:$V3,13:$V81,52:$Vb,67:$Va1,68:$Vb1,69:$Vc1,90:198,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{12:$V3,13:$V81,52:$Vb,67:$Va1,68:$Vb1,69:$Vc1,90:199,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},o($V71,[2,142],{96:200,120:$Vg1}),o($Vh1,[2,116]),{12:$V3,13:$V81,50:$V9,51:$V91,52:$Vb,67:$Va1,68:$Vb1,69:$Vc1,74:201,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},o($V71,[2,114],{96:200,120:$Vg1}),o($V71,[2,115],{96:200,120:$Vg1}),o($Vh1,[2,134]),o($Vh1,$Vj1),o($Vh1,[2,119]),{15:[1,202]},o($Vq1,[2,136]),o($Vq1,[2,137]),o($Vq1,[2,138]),o($Vq1,[2,139]),o($Vq1,[2,140]),o($Vh1,[2,120]),o($Vq1,[2,122]),o($Vq1,[2,123]),o($Vq1,[2,124]),o($Vq1,[2,125]),o($Vq1,[2,126]),o($Vq1,[2,127]),o($Vq1,[2,128]),o($Vq1,[2,129]),o($Vr1,[2,46],{52:$VE,53:$VF,54:$VG}),o($Vr1,[2,47],{52:$VE,53:$VF,54:$VG}),o($VW,[2,48]),o($VW,[2,49]),o($VW,[2,50]),o($Vs1,[2,52],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($Vs1,[2,53],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($Vs1,[2,54],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($Vs1,[2,55],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($Vs1,[2,56],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($Vs1,[2,57],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($Vs1,[2,58],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($Vs1,[2,59],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($Vs1,[2,60],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($Vs1,[2,61],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($Vs1,[2,62],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),o($Vs1,[2,63],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG}),{11:[1,203]},{16:[1,204],38:[1,205]},{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:206,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},o($VA,[2,34]),{13:[1,207]},o($Vl1,[2,38],{28:6,29:7,30:8,31:9,32:10,39:14,70:20,34:23,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,88:40,90:41,91:42,92:43,119:44,93:45,94:46,122:47,123:48,124:49,125:50,111:51,112:52,97:53,98:54,99:64,6:208,2:$V0,10:$V2,12:$V3,13:$V4,22:$V5,33:$V6,37:$V7,41:$V8,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,71:$Vf,72:$Vg,87:$Vh,89:$Vi,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,126:$Vy}),o($VA,[2,17]),o($VW,$Vk1),o($VW,[2,64]),o($Vh1,[2,154]),{15:[1,209],50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS},o($VX,[2,76]),o($VX,[2,77]),o($VX,[2,78]),{13:[1,211],35:210},o($VZ,[2,81],{80:$V_}),o($V$,[2,83]),o([1,2,8,10,12,13,15,20,22,25,33,37,40,41,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,72,75,78,80,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,121,126],[2,85],{50:$V01,51:$V11}),o($V21,[2,93],{52:$V31,53:$V41,54:$V51,85:$V61}),o($V21,[2,94],{52:$V31,53:$V41,54:$V51,85:$V61}),o($V71,[2,96]),o($V71,[2,97]),o($V71,[2,98]),o($V71,[2,99]),o($V71,$Vn1),{15:$Vo1},o($V71,[2,108]),o($V71,[2,109]),o($Vh1,[2,117]),{121:[1,212]},o($Vh1,[2,151]),{12:[1,213]},{17:214,43:$Vt1},{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:216,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},o($VB,[2,33],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS}),{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:217,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},o($VA,[2,16]),{42:[1,218]},o($VW,[2,25]),{2:$V0,10:$V2,12:$V3,13:$V4,15:[1,220],22:$VT,31:221,34:23,36:219,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},o($Vh1,[2,143]),{13:[1,222]},{18:[1,223],38:[1,224]},{11:[1,225]},o($VB,[2,32],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS}),{15:[1,226],50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS},o($Vl1,$Vm1,{28:6,29:7,30:8,31:9,32:10,39:14,70:20,34:23,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,88:40,90:41,91:42,92:43,119:44,93:45,94:46,122:47,123:48,124:49,125:50,111:51,112:52,97:53,98:54,99:64,27:177,6:178,24:227,2:$V0,10:$V2,12:$V3,13:$V4,22:$V5,33:$V6,37:$V7,41:$V8,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,71:$Vf,72:$Vg,87:$Vh,89:$Vi,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,126:$Vy}),{15:[1,228],20:[1,229]},o($VW,[2,27]),o($Vu1,[2,29],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS}),o($Vu1,[2,11],{14:230,21:231,22:$Vv1}),{38:[1,233]},{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:234,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{44:[1,235],45:[1,236],46:[1,237],47:[1,238],48:[1,239],49:[1,240]},{42:[1,241]},o($VA,[2,37]),o($VW,[2,26]),{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:242,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},{15:[1,243],20:[1,244]},o($Vu1,[2,10]),{12:[1,245]},{2:$V0,10:$V2,12:$V3,13:$V4,22:$VT,31:246,34:23,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},o($VB,[2,31],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS}),o($Vw1,[2,40]),o($Vw1,[2,41]),o($Vw1,[2,42]),o($Vw1,[2,43]),o($Vw1,[2,44]),o($Vw1,[2,45]),o($Vl1,$Vm1,{28:6,29:7,30:8,31:9,32:10,39:14,70:20,34:23,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,88:40,90:41,91:42,92:43,119:44,93:45,94:46,122:47,123:48,124:49,125:50,111:51,112:52,97:53,98:54,99:64,27:177,6:178,24:247,2:$V0,10:$V2,12:$V3,13:$V4,22:$V5,33:$V6,37:$V7,41:$V8,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,71:$Vf,72:$Vg,87:$Vh,89:$Vi,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,126:$Vy}),o($Vu1,[2,28],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS}),{16:[1,248],19:249,23:$Vx1},{21:251,22:$Vv1},o($Vu1,[2,14],{16:[1,252]}),o($VB,[2,30],{50:$VC,51:$VD,52:$VE,53:$VF,54:$VG,55:$VH,56:$VI,57:$VJ,58:$VK,59:$VL,60:$VM,61:$VN,62:$VO,63:$VP,64:$VQ,65:$VR,66:$VS}),o($VA,[2,36]),{17:253,43:$Vt1},o($Vz,[2,8]),{2:$V0,6:178,10:$V2,12:$V3,13:$V4,22:$V5,24:254,25:$Vm1,27:177,28:6,29:7,30:8,31:9,32:10,33:$V6,34:23,37:$V7,39:14,41:$V8,50:$V9,51:$Va,52:$Vb,67:$Vc,68:$Vd,69:$Ve,70:20,71:$Vf,72:$Vg,73:26,74:29,76:30,77:31,79:32,81:33,83:34,84:35,86:36,87:$Vh,88:40,89:$Vi,90:41,91:42,92:43,93:45,94:46,97:53,98:54,99:64,100:$Vj,101:$Vk,103:$Vl,104:$Vm,105:$Vn,106:$Vo,107:$Vp,108:$Vq,109:$Vr,111:51,112:52,113:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:44,122:47,123:48,124:49,125:50,126:$Vy},o($Vu1,[2,9]),{17:255,43:$Vt1},{18:[1,256],19:257,23:$Vx1},{25:[1,258]},o($Vu1,[2,13],{18:[1,259]}),{19:260,23:$Vx1},o($Vz,[2,7]),{26:[1,261]},o($Vu1,[2,12]),o($Vz,[2,6]),o($Vz,[2,15])],
defaultActions: {},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  const {Tipo,TipoPath,Comando} = require("./AST/Entorno");
  const {Logical} = require("./Expresion/Logical");
  const {Arithmetic, Unary} = require("./Expresion/Arithmetics")
  const {Literal,PathExp} = require("./Expresion/Expresiones");
  const { ComparisonExp } = require('./Expresion/Comparison')
  const { Atributo,Camino,Child,Descendant,Attribute,Self,DescSelf,FollowSibling,Follow } = require('./Expresion/axes')
  const { CaminoInverso,Parent,Ancestor,PrecedingSibling,AncestorSelf,Preceding } = require('./Expresion/axes')
  const { ContextItemExpr,CallFunction } = require('./Expresion/postfix')
  const { grafoCST } = require('../CST')
  
  const { AST } = require('./XQuery/ts/Arbol/AST')
  const { TipoXQ, EnumTipo } = require('./XQuery/ts/Entorno/TipoXQ')
  const { LiteralXQ } = require('./XQuery/ts/Expresiones/LiteralXQ')
  const { IdXQ } = require('./XQuery/ts/Expresiones/IdXQ')
  const { DeclaracionXQ } = require('./XQuery/ts/Instrucciones/DeclaracionXQ')
  const { AsignacionXQ } = require('./XQuery/ts/Instrucciones/AsignacionXQ')
  const { BloqueXQ } = require('./XQuery/ts/Instrucciones/Bloque')
  const { If } = require('./XQuery/ts/Instrucciones/If')
  const { Condicion_If } = require('./XQuery/ts/Instrucciones/Condicion_If')
  const { ParametroXQ } = require('./XQuery/ts/Funciones/ParametroXQ')
  const { FuncionXQ } = require('./XQuery/ts/Funciones/Funcion')
  const { ReturnXQ } = require('./XQuery/ts/Funciones/ReturnXQ')
  const { LlamadaF } = require('./XQuery/ts/Funciones/LlamadaF')
  const { SumaXQ } = require('./XQuery/ts/Operaciones/Aritmeticas/Suma')
  const { RestaXQ } = require('./XQuery/ts/Operaciones/Aritmeticas/Resta')
  const { MultiplicacionXQ } = require('./XQuery/ts/Operaciones/Aritmeticas/Multiplicacion')
  const { DivisionXQ } = require('./XQuery/ts/Operaciones/Aritmeticas/Division')
  const { ModuloXQ } = require('./XQuery/ts/Operaciones/Aritmeticas/Modulo')
  const { NegativoXQ } = require('./XQuery/ts/Operaciones/Aritmeticas/Negativo')
  const { IgualXQ } = require('./XQuery/ts/Operaciones/Relacionales/Igual')
  const { NoIgualXQ } = require('./XQuery/ts/Operaciones/Relacionales/NoIgual')
  const { MayorXQ } = require('./XQuery/ts/Operaciones/Relacionales/Mayor')
  const { MayorIgualXQ } = require('./XQuery/ts/Operaciones/Relacionales/MayorIgual')
  const { MenorXQ } = require('./XQuery/ts/Operaciones/Relacionales/Menor')
  const { MenorIgualXQ } = require('./XQuery/ts/Operaciones/Relacionales/MenorIgual')
    
  var grafo = new grafoCST(); 

  var ListaErrores = []
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2: this.begin("Comentario"); 
break;
case 3: this.popState(); 
break;
case 4:
break;
case 5:
break;
case 6:
break;
case 7:return "RLET"
break;
case 8:return "RAS"
break;
case 9:return "Rxs"
break;
case 10:return "ASIGNAR"
break;
case 11:return "LLAVEA"
break;
case 12:return "LLAVEC"
break;
case 13:return "SEMICOLON"
break;
case 14:return "RAT"
break;
case 15:return "RTRUE"
break;
case 16:return "RFALSE"
break;
case 17:return "R_INT"
break;
case 18:return "R_DOBLE"
break;
case 19:return "R_DECIMAL"
break;
case 20:return "R_FLOAT"
break;
case 21:return "R_STRING"
break;
case 22:return "R_BOOLEAN"
break;
case 23:return "R_IF"
break;
case 24:return "R_THEN"
break;
case 25:return "R_ELSE"
break;
case 26:return "R_DECLARE"
break;
case 27:return "R_FUNC"
break;
case 28:return "R_LOCAL"
break;
case 29:return "R_RETURN"
break;
case 30:return "ROR"
break;
case 31:return "RAND"
break;
case 32:return "IDIV"
break;
case 33:return "DIV"
break;
case 34:return "MOD"
break;
case 35:return "RFOR"
break;
case 36:return "RIN"
break;
case 37:return "RTO"
break;
case 38:return "EQ"
break;
case 39:return "NE"
break;
case 40:return "LT"
break;
case 41:return "LE"
break;
case 42:return "GT"
break;
case 43:return "GE"
break;
case 44:return "RCHILD"
break;
case 45:return "RDESSELF"
break;
case 46:return "RDESCENDANT"
break;
case 47:return "RATTRIBUTE"
break;
case 48:return "RSELF"
break;
case 49:return "RFOLLOWSIBLING"
break;
case 50:return "RFOLLOW"
break;
case 51:return "RNAMESPACE"
break;
case 52:return "RPARENT"
break;
case 53:return "RANCESTORORSELF"
break;
case 54:return "RANCESTOR"
break;
case 55:return "RPRECEDSIBLING"
break;
case 56:return "RPRECED"
break;
case 57:return "DECIMAL"
break;
case 58:return "INTEGER"
break;
case 59: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return "CADENA" 
break;
case 60:return "NOMBRE"
break;
case 61:return "DOBLEBARRA"
break;
case 62:return "BARRA"
break;
case 63:return "ARROBA"
break;
case 64:return "CORA"
break;
case 65:return "CORB"
break;
case 66:return "MAS"
break;
case 67:return "MENOS"
break;
case 68:return "DobleAsterisco"
break;
case 69:return "POR"
break;
case 70:return "MAYORIG"
break;
case 71:return "MENORIG"
break;
case 72:return "DIFERENTE"
break;
case 73:return "MENOR"
break;
case 74:return "MAYOR"
break;
case 75:return "IGUAL"
break;
case 76:return "PIPE"
break;
case 77:return "COMA"
break;
case 78:return "DOLAR"
break;
case 79:return "ADMIRACION"
break;
case 80:return "ARROBA"
break;
case 81:return "DOBLEPUNTO"
break;
case 82:return "PARENTESISA"
break;
case 83:return "PARENTESISC"
break;
case 84:return "INTERROGACIONC"
break;
case 85:return "PUNTO"
break;
case 86:return "DOBLEDOSPUNTOS"
break;
case 87:return "DOSPUNTOS"
break;
case 88: console.log(`LEXERR: ${yy_.yytext}. L:${yy_.yylloc.first_line} C:${yy_.yylloc.first_column}`); ListaErrores.push({Error:'Este es un error léxico: ' + yy_.yytext,tipo:"Lexico", Linea: yy_.yylloc.first_line , columna:yy_.yylloc.first_column}) 
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:\(:)/i,/^(?::\))/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:.)/i,/^(?:let\b)/i,/^(?:as\b)/i,/^(?:xs\b)/i,/^(?::=)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:at\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:decimal\b)/i,/^(?:float\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:declare\b)/i,/^(?:function\b)/i,/^(?:local\b)/i,/^(?:return\b)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:idiv\b)/i,/^(?:div\b)/i,/^(?:mod\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:to\b)/i,/^(?:eq\b)/i,/^(?:ne\b)/i,/^(?:lt\b)/i,/^(?:le\b)/i,/^(?:gt\b)/i,/^(?:ge\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:attribute\b)/i,/^(?:self\b)/i,/^(?:following-sibling\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:preceding-sibling\b)/i,/^(?:preceding\b)/i,/^(?:(\.[0-9]+)|([0-9]+\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:("[^"]*")|('[^']*'))/i,/^(?:([a-zA-ZñÑ_])([a-zA-ZñÑ0-9_-]|\.)*)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:@)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\|)/i,/^(?:,)/i,/^(?:\$)/i,/^(?:!)/i,/^(?:@)/i,/^(?:\.\.)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\?)/i,/^(?:\.)/i,/^(?:::)/i,/^(?::)/i,/^(?:.)/i],
conditions: {"Comentario":{"rules":[3,4,5,6],"inclusive":false},"INITIAL":{"rules":[0,1,2,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XPath;
exports.Parser = XPath.Parser;
exports.parse = function () { return XPath.parse.apply(XPath, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}