/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XPath = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,33],$V1=[1,11],$V2=[1,34],$V3=[1,61],$V4=[1,18],$V5=[1,13],$V6=[1,30],$V7=[1,12],$V8=[1,31],$V9=[1,25],$Va=[1,43],$Vb=[1,15],$Vc=[1,79],$Vd=[1,16],$Ve=[1,17],$Vf=[1,19],$Vg=[1,20],$Vh=[1,21],$Vi=[1,23],$Vj=[1,24],$Vk=[1,26],$Vl=[1,27],$Vm=[1,28],$Vn=[1,44],$Vo=[1,45],$Vp=[1,69],$Vq=[1,71],$Vr=[1,72],$Vs=[1,73],$Vt=[1,74],$Vu=[1,75],$Vv=[1,76],$Vw=[1,77],$Vx=[1,78],$Vy=[1,63],$Vz=[1,64],$VA=[1,65],$VB=[1,66],$VC=[1,67],$VD=[1,68],$VE=[1,62],$VF=[1,2,8,10,12,13,22,33,37,41,48,50,51,52,69,70,71,72,73,75,76,77,78,79,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,131],$VG=[1,2,8,10,12,13,22,25,33,37,40,41,48,50,51,52,69,70,71,72,73,75,76,77,78,79,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,131],$VH=[1,2,8,10,12,13,22,25,33,37,40,41,48,69,70,71,72,73,75,76,77,78,79,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,131],$VI=[1,81],$VJ=[1,82],$VK=[1,83],$VL=[1,84],$VM=[1,85],$VN=[1,86],$VO=[1,87],$VP=[1,88],$VQ=[1,89],$VR=[1,90],$VS=[1,91],$VT=[1,92],$VU=[1,93],$VV=[1,94],$VW=[1,95],$VX=[1,96],$VY=[1,97],$VZ=[1,98],$V_=[1,99],$V$=[1,106],$V01=[1,110],$V11=[1,2,8,10,12,13,15,20,22,25,33,37,40,41,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,82,90,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,125,131],$V21=[1,2,8,10,12,13,15,20,22,25,33,37,40,41,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,131],$V31=[1,2,8,10,12,13,15,20,22,25,33,37,40,41,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,82,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,131],$V41=[2,83],$V51=[1,2,8,10,12,13,15,20,22,25,33,37,40,41,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,68,69,70,71,72,73,75,76,77,78,79,82,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,126,131],$V61=[1,122],$V71=[1,2,8,10,12,13,15,20,22,25,33,37,40,41,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,82,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,126,131],$V81=[1,124],$V91=[1,125],$Va1=[1,2,8,10,12,13,15,20,22,25,33,37,40,41,48,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,82,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,126,131],$Vb1=[1,132],$Vc1=[1,133],$Vd1=[1,135],$Ve1=[1,134],$Vf1=[1,2,8,10,12,13,15,20,22,25,33,37,40,41,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,82,90,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,126,131],$Vg1=[1,141],$Vh1=[1,137],$Vi1=[1,138],$Vj1=[1,139],$Vk1=[1,140],$Vl1=[1,2,8,10,12,13,15,20,22,25,33,37,40,41,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,82,90,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,126,131],$Vm1=[1,144],$Vn1=[1,145],$Vo1=[1,148],$Vp1=[1,2,8,10,12,13,15,20,22,25,33,37,40,41,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,82,90,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,125,126,131],$Vq1=[1,152],$Vr1=[2,139],$Vs1=[2,75],$Vt1=[1,8,25,40],$Vu1=[2,39],$Vv1=[2,110],$Vw1=[1,197],$Vx1=[12,13,50,51,52,71,72,73,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,131],$Vy1=[12,52],$Vz1=[1,2,8,10,12,13,15,20,22,25,33,37,40,41,48,50,51,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,131],$VA1=[1,2,8,10,12,13,15,20,22,25,33,37,40,41,48,67,68,69,70,71,72,73,75,76,77,78,79,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,131],$VB1=[1,239],$VC1=[15,20],$VD1=[1,256],$VE1=[15,18,20,23,38],$VF1=[1,274];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"XQuery":3,"LInstruccionesXQ":4,"InstruccionXQ":5,"Instruccion":6,"DFuncion":7,"R_DECLARE":8,"R_FUNC":9,"R_LOCAL":10,"DOSPUNTOS":11,"NOMBRE":12,"PARENTESISA":13,"L_PARAMF":14,"PARENTESISC":15,"RAS":16,"T":17,"INTERROGACIONC":18,"BloqueF":19,"COMA":20,"PARAMF":21,"DOLAR":22,"LLAVEA":23,"BloqueI":24,"LLAVEC":25,"SEMICOLON":26,"LInstrucciones":27,"Declaracion":28,"Asignacion":29,"SIf":30,"E":31,"Return":32,"R_RETURN":33,"LlamadaFuncion":34,"ParametrosLL":35,"LPLL":36,"RLET":37,"ASIGNAR":38,"L_Condiciones":39,"R_ELSE":40,"R_IF":41,"R_THEN":42,"Rxs":43,"R_INT":44,"R_DOBLE":45,"R_DECIMAL":46,"R_FLOAT":47,"R_STRING":48,"R_BOOLEAN":49,"MAS":50,"MENOS":51,"POR":52,"DIV":53,"MOD":54,"IGUAL":55,"DIFERENTE":56,"MAYOR":57,"MAYORIG":58,"MENOR":59,"MENORIG":60,"EQ":61,"NE":62,"GT":63,"GE":64,"LT":65,"LE":66,"RAND":67,"ROR":68,"RNOT":69,"ADMIRACION":70,"INTEGER":71,"DECIMAL":72,"CADENA":73,"XPath":74,"RTRUE":75,"RFALSE":76,"R_TOSTRING":77,"R_NUMBER":78,"R_TONUMBER":79,"Expr":80,"ExprSingle":81,"PIPE":82,"OrExpr":83,"AndExpr":84,"ComparisonExpr":85,"AdditiveExpr":86,"GeneralComp":87,"MultiplicativeExpr":88,"UnaryExpr":89,"IDIV":90,"PathExpr":91,"BARRA":92,"RelativePathExpr":93,"DOBLEBARRA":94,"StepExpr":95,"PostfixExpr":96,"AxisStep":97,"ReverseStep":98,"ForwardStep":99,"PredicateList":100,"Predicate":101,"AbbrevForwardStep":102,"ForwardAxis":103,"NameTest":104,"ARROBA":105,"RCHILD":106,"DOBLEDOSPUNTOS":107,"RDESCENDANT":108,"RATTRIBUTE":109,"RSELF":110,"RDESSELF":111,"RFOLLOWSIBLING":112,"RFOLLOW":113,"RNAMESPACE":114,"NodeTest":115,"AbbrevReverseStep":116,"ReverseAxis":117,"DOBLEPUNTO":118,"RPARENT":119,"RANCESTOR":120,"RPRECEDSIBLING":121,"RPRECED":122,"RANCESTORORSELF":123,"PrimaryExpr":124,"CORA":125,"CORB":126,"Literal":127,"FunctionCall":128,"ContextItemExpr":129,"ParenthesizedExpr":130,"PUNTO":131,"$accept":0,"$end":1},
terminals_: {2:"error",8:"R_DECLARE",9:"R_FUNC",10:"R_LOCAL",11:"DOSPUNTOS",12:"NOMBRE",13:"PARENTESISA",15:"PARENTESISC",16:"RAS",18:"INTERROGACIONC",20:"COMA",22:"DOLAR",23:"LLAVEA",25:"LLAVEC",26:"SEMICOLON",33:"R_RETURN",37:"RLET",38:"ASIGNAR",40:"R_ELSE",41:"R_IF",42:"R_THEN",43:"Rxs",44:"R_INT",45:"R_DOBLE",46:"R_DECIMAL",47:"R_FLOAT",48:"R_STRING",49:"R_BOOLEAN",50:"MAS",51:"MENOS",52:"POR",53:"DIV",54:"MOD",55:"IGUAL",56:"DIFERENTE",57:"MAYOR",58:"MAYORIG",59:"MENOR",60:"MENORIG",61:"EQ",62:"NE",63:"GT",64:"GE",65:"LT",66:"LE",67:"RAND",68:"ROR",69:"RNOT",70:"ADMIRACION",71:"INTEGER",72:"DECIMAL",73:"CADENA",75:"RTRUE",76:"RFALSE",77:"R_TOSTRING",78:"R_NUMBER",79:"R_TONUMBER",82:"PIPE",90:"IDIV",92:"BARRA",94:"DOBLEBARRA",105:"ARROBA",106:"RCHILD",107:"DOBLEDOSPUNTOS",108:"RDESCENDANT",109:"RATTRIBUTE",110:"RSELF",111:"RDESSELF",112:"RFOLLOWSIBLING",113:"RFOLLOW",114:"RNAMESPACE",118:"DOBLEPUNTO",119:"RPARENT",120:"RANCESTOR",121:"RPRECEDSIBLING",122:"RPRECED",123:"RANCESTORORSELF",125:"CORA",126:"CORB",131:"PUNTO"},
productions_: [0,[3,1],[4,2],[4,1],[5,1],[5,1],[7,12],[7,11],[7,9],[14,3],[14,1],[14,0],[21,5],[21,4],[21,2],[19,4],[27,2],[27,1],[6,1],[6,1],[6,1],[6,1],[6,1],[32,2],[32,1],[34,4],[35,3],[35,2],[36,3],[36,1],[28,8],[28,7],[28,5],[29,4],[30,3],[30,1],[39,8],[39,6],[24,1],[24,0],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,3],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,2],[31,4],[31,4],[31,4],[31,4],[31,1],[74,1],[74,1],[80,1],[80,3],[80,3],[80,3],[81,1],[83,1],[83,3],[84,1],[84,3],[85,1],[85,3],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[86,1],[86,3],[86,3],[88,1],[88,3],[88,3],[88,3],[88,3],[89,1],[89,2],[89,2],[91,2],[91,2],[91,1],[91,1],[93,1],[93,3],[93,3],[95,1],[95,1],[97,1],[97,1],[97,2],[97,2],[100,1],[100,2],[99,1],[99,2],[102,2],[102,1],[103,2],[103,2],[103,2],[103,2],[103,2],[103,2],[103,2],[103,2],[115,1],[104,1],[104,1],[98,1],[98,2],[116,1],[117,2],[117,2],[117,2],[117,2],[117,2],[96,1],[96,2],[101,3],[124,1],[124,1],[124,1],[124,1],[127,1],[127,1],[127,1],[128,3],[129,1],[130,2],[130,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    this.$ = new AST($$[$0]);
    return this.$;
  
break;
case 2: case 16:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3: case 17:
 this.$ = [$$[$0]] 
break;
case 4: case 5: case 18: case 19: case 20: case 21: case 22: case 80:
 this.$ = $$[$0]; 
break;
case 6:

      let auxDF0 = new FuncionXQ($$[$0-7], $$[$0-5], $$[$0], _$[$0-7].first_line, _$[$0-7].first_column);
      auxDF0.setTipo($$[$0-2]);
      this.$ = auxDF0;
    
break;
case 7:

      let auxDF1 = new FuncionXQ($$[$0-6], $$[$0-4], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column);
      auxDF1.setTipo($$[$0-1]);
      this.$ = auxDF1;
    
break;
case 8:

      this.$ = new FuncionXQ($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
    
break;
case 9: case 28:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 10: case 29:
 this.$ = [$$[$0]]; 
break;
case 11: case 27:
 this.$ = []; 
break;
case 12:

      let auxPF0 = new ParametroXQ($$[$0-3]);
      auxPF0.setTipo($$[$0-1]);
      this.$ = auxPF0;
    
break;
case 13:

      let auxPF1 = new ParametroXQ($$[$0-2]);
      auxPF1.setTipo($$[$0]);
      this.$ = auxPF1;
    
break;
case 14:

      this.$ = new ParametroXQ($$[$0]);
    
break;
case 15:
 this.$ = $$[$0-2]; 
break;
case 23:
 this.$ = new ReturnXQ($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 24:
 this.$ = new ReturnXQ(null, _$[$0].first_line, _$[$0].first_column); 
break;
case 25:

      this.$ = new LlamadaF($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
    
break;
case 26: case 68:
 this.$ = $$[$0-1]; 
break;
case 30:
 
      let auxD0 = new DeclaracionXQ($$[$0-5], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
      auxD0.setTipo($$[$0-3]);
      this.$ = auxD0;
    
break;
case 31:
 
      let auxD1 = new DeclaracionXQ($$[$0-4], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column);
      auxD1.setTipo($$[$0-2]);
      this.$ = auxD1;
    
break;
case 32:

      this.$ = new DeclaracionXQ($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
    
break;
case 33:
 
    this.$ = new AsignacionXQ($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column, $$[$0]);
  
break;
case 34:
 this.$ = new If($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 35:
 this.$ = new If($$[$0], null, _$[$0].first_line, _$[$0].first_column); 
break;
case 36:

      let auxLC1 = new Condicion_If($$[$0-3], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column); 
      $$[$0-7].push(auxLC1);
      this.$ = $$[$0-7];
    
break;
case 37:
 
      let auxLC0 = new Condicion_If($$[$0-3], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column); 
      this.$ = [auxLC0]
    
break;
case 38:

      let auxBlI = new BloqueXQ();
      auxBlI.setDatos($$[$0], _$[$0].first_line, _$[$0].first_column);
      this.$ = auxBlI;
    
break;
case 39:
 
      this.$ = new BloqueXQ();
    
break;
case 40:
 this.$ = new TipoXQ(EnumTipo.entero); 
break;
case 41: case 42: case 43:
 this.$ = new TipoXQ(EnumTipo.doble); 
break;
case 44:
 this.$ = new TipoXQ(EnumTipo.cadena); 
break;
case 45:
 this.$ = new TipoXQ(EnumTipo.booleano); 
break;
case 46:
 this.$ = new SumaXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 47:
 this.$ = new RestaXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 48:
 this.$ = new MultiplicacionXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 49:
 this.$ = new DivisionXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 50:
 this.$ = new ModuloXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 51:
 this.$ = new NegativoXQ($$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 52: case 58:
 this.$ = new IgualXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 53: case 59:
 this.$ = new NoIgualXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 54: case 60:
 this.$ = new MayorXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 55: case 61:
 this.$ = new MayorIgualXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 56: case 62:
 this.$ = new MenorXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 57: case 63:
 this.$ = new MenorIgualXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 64:
 this.$ = new AndXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 65:
 this.$ = new OrXQ($$[$0-2], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 66: case 67:
 this.$ = new NotXQ($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 69:
 this.$ = new LiteralXQ(new TipoXQ(EnumTipo.entero), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 70:
 this.$ = new LiteralXQ(new TipoXQ(EnumTipo.doble), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 71:
 this.$ = new LiteralXQ(new TipoXQ(EnumTipo.cadena), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 72:
 this.$ = new LiteralXQ(new TipoXQ(EnumTipo.XPath), $$[$0], _$[$0].first_column, _$[$0].first_column); 
break;
case 73: case 74:
 this.$ = new LiteralXQ(new TipoXQ(EnumTipo.booleano), $$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 75:
 this.$ = new IdXQ($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 76:
 this.$ = new ToStringXQ($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 77:
this.$ = new ToStringXQ($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 78:
 this.$ = new ToNumberXQ($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 79:
this.$ = new ToNumberXQ($$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 81:
 
    grafo.generarPadre(1, "INICIO");grafo.generarHijos("Expr");
    var retornoErrores = Object.assign([], ListaErrores);
    ListaErrores = [];
    var retornoGrafo = Object.assign({}, grafo);
    grafo = new grafoCST();
    this.$ = new Comando($$[$0],retornoGrafo.pilaNodos,retornoGrafo.PilaEdges,retornoGrafo.GrahpvizNodo+retornoGrafo.GrahpvizEdges,retornoErrores,retornoGrafo.TablaGramatica);
    //return this.$ 
  
break;
case 82:
  
      ListaErrores.push({Error:"Error sintactico :"+yytext,tipo:"Sintactico",Linea:this._$.first_line,columna:this._$.first_column});
      var retornoErrores = Object.assign([], ListaErrores);
      ListaErrores = [];
      grafo = new grafoCST(); 
      this.$ = new Comando([],[],[],"",retornoErrores,[])
      //return new Comando([],[],[],"",retornoErrores,[])
    
break;
case 83:
 
    this.$=[];this.$.push($$[$0]); 
    grafo.generarPadre(1, "ExprSingle");
    grafo.generarHijos("ExprSingle");
    grafo.generarTexto(`expr = []; expr.push(ExprSingle.valor);`);
  
break;
case 84:
 
    this.$=$$[$0-2];this.$.push($$[$0]);
    grafo.generarPadre(3, "ExprSingle");
    grafo.generarPadre(1, "Expr");
    grafo.generarHijos("Expr",$$[$0-1],"ExprSingle");
    grafo.generarTexto(`expr.push(ExprSingle.valor);`);
  
break;
case 85:
 
    this.$=$$[$0-2];grafo.generarPadre(1, "Expr");
    ListaErrores.push({Error:"Error sintactico se recupero en:"+yytext,tipo:"Sintactico",Linea:this._$.first_line,columna:this._$.first_column}); 
    grafo.generarHijos("Expt",$$[$0-1],"error");
    grafo.generarTexto(`return expr; new Error();`); 
  
break;
case 86:
 
    this.$=[];this.$.push($$[$0]); grafo.generarPadre(3, "ExprSingle");
    grafo.generarHijos("error",$$[$0-1],"ExprSingle");
    ListaErrores.push({Error:"Error sintactico se recupero en:"+yytext,tipo:"Sintactico",Linea:this._$.first_line,columna:this._$.first_column}); 
    grafo.generarPadre(1, "error"); grafo.generarHijos("error",$$[$0-1]);
    grafo.generarTexto(`expr = []; new Error();`);
  
break;
case 87:
 
    this.$=$$[$0]; grafo.generarPadre(1, "OrExpr");
    grafo.generarHijos("OrExpr");
    grafo.generarTexto(`ExprSingle.valor = OrExpr.valor`);
  
break;
case 88:
 
    this.$ = $$[$0]; grafo.generarPadre(1,"AndExpr");
    grafo.generarHijos("AndExpr");
    grafo.generarTexto(`OrExpr.valor = AndExpr.valor`);
  
break;
case 89:
 
    this.$ = new Logical($$[$0-2],$$[$0-1],$$[$0]); grafo.generarPadre(3, "AndExpr");
    grafo.generarPadre(1, "OrExpr");
    grafo.generarHijos("OrExpr",$$[$0-1],"AndExpr");
    grafo.generarTexto(`OrExpr.valor = new Logical(OrExpr.valor,${$$[$0-1]},AndExpr.valor);`);
  
break;
case 90:
 
    this.$ = $$[$0]; grafo.generarPadre(1, "ComparisonExpr");
    grafo.generarHijos("ComparisonExpr");
    grafo.generarTexto(`AndExpr.valor = ComparisonExpr.valor`);
  
break;
case 91:
 
    this.$ = new Logical($$[$0-2],$$[$0-1],$$[$0]); grafo.generarPadre(3, "ComparisonExpr");
    grafo.generarPadre(1, "AndExpr");
    grafo.generarHijos("AndExpr",$$[$0-1],"ComparisonExpr");
    grafo.generarTexto(`AndExpr.valor = new Logical(AndExpr.valor,${$$[$0-1]},ComparisonExpr.valor);`);
  
break;
case 92:
 
    this.$=$$[$0]; grafo.generarPadre(1, "AdditiveExpr");
    grafo.generarHijos("StringConcatExpr");
    grafo.generarTexto(`ComparisonExpr.valor = AdditiveExpr.valor`);
  
break;
case 93:
 
    this.$ = new ComparisonExp($$[$0-2],$$[$0-1],$$[$0]); grafo.generarPadre(3, "AdditiveExpr");
    grafo.generarPadre(2, "GeneralComp");
    grafo.generarPadre(1, "AdditiveExpr");
    grafo.generarHijos("StringConcatExpr","GeneralComp","StringConcatExpr");
    grafo.generarTexto(`ComparisonExpr.valor = new ComparisonExp(AdditiveExpr.valor, GeneralComp.valor, AdditiveExpr.valor)`);
  
break;
case 94: case 95: case 96: case 97: case 98: case 99:
 this.$ = $$[$0]; grafo.generarHijos($$[$0]); grafo.generarTexto(`GeneralComp.valor = ${$$[$0]}`); 
break;
case 100:
 
    this.$=$$[$0]; grafo.generarPadre(1, "MultiplicativeExpr"); grafo.generarHijos("MultiplicativeExpr");
    grafo.generarTexto(`AdditiveExpr.valor = MultiplicativeExpr.valor`);
  
break;
case 101: case 102:
 
    this.$= new Arithmetic($$[$0-2],$$[$0-1],$$[$0]); grafo.generarPadre(3, "MultiplicativeExpr");
    grafo.generarPadre(1, "AdditiveExpr");
    grafo.generarHijos("AdditiveExpr",$$[$0-1],"MultiplicativeExpr");
    grafo.generarTexto(`AdditiveExpr.valor = new Arithmetic(AdditiveExpr.valor, ${$$[$0-1]}, MultiplicativeExpr.valor);`);
  
break;
case 103:
 
    this.$=$$[$0]; grafo.generarPadre(1, "UnaryExpr");
    grafo.generarHijos("UnaryExpr");
    grafo.generarTexto(`MultiplicativeExpr.valor = UnaryExpr.valor;`);
  
break;
case 104:
 
    this.$= new Arithmetic($$[$0-2],$$[$0-1],$$[$0]);
    grafo.generarPadre(3, "UnaryExpr");
    grafo.generarPadre(1, "MultiplicativeExpr");
    grafo.generarHijos("MultiplicativeExpr",$$[$0-1],"UnaryExpr");
    grafo.generarTexto(`MultiplicativeExpr.valor = new Arithmetic(MultiplicativeExpr.valor,${$$[$0-1]},UnaryExpr.valor);`);
  
break;
case 105: case 106: case 107:
 
    this.$= new Arithmetic($$[$0-2],$$[$0-1],$$[$0]); grafo.generarPadre(3, "UnaryExpr");
    grafo.generarPadre(1, "MultiplicativeExpr");
    grafo.generarHijos("MultiplicativeExpr",$$[$0-1],"UnaryExpr");
    grafo.generarTexto(`MultiplicativeExpr.valor = new Arithmetic(MultiplicativeExpr.valor,${$$[$0-1]},UnaryExpr.valor);`);
  
break;
case 108:
 
    this.$=$$[$0]; grafo.generarPadre(1, "PathExpr");
    grafo.generarHijos("PathExpr");
    grafo.generarTexto(`UnaryExpr.valor = PathExpr.valor;`);
  
break;
case 109:
 
    this.$=new Unary($$[$0-1], $$[$0]); grafo.generarPadre(2, "UnaryExpr");
    grafo.generarHijos($$[$0-1],"UnaryExp");
    grafo.generarTexto(`UnaryExp.valor = new Unary(${$$[$0-1]},UnaryExpr.valor);`);
  
break;
case 110:
 
    this.$=new Unary($$[$0-1], $$[$0]);
    grafo.generarPadre(2, "UnaryExpr");
    grafo.generarHijos($$[$0-1],"UnaryExp");
    grafo.generarTexto(`UnaryExp.valor = new Unary(${$$[$0-1]},UnaryExpr.valor);`);
  
break;
case 111:
 
    $$[$0][0].tipo=TipoPath.ABS;
    this.$=new PathExp($$[$0]); 
    grafo.generarPadre(2, "RelativePathExpr");
    grafo.generarHijos($$[$0-1],"RelativePathExpr");
    grafo.generarTexto(`path[0].tipo = Absoluto; PathExpr.valor = new PathExp(path.valor);`);
  
break;
case 112:
 
    $$[$0][0].tipo=TipoPath.REL;
    this.$=new PathExp($$[$0]);
    grafo.generarPadre(2, "RelativePathExpr");
    grafo.generarHijos($$[$0-1],"RelativePathExpr");
    grafo.generarTexto(`path[0].tipo = Relativo; PathExpr.valor = new PathExp(path.valor);`);
  
break;
case 113:
 
    this.$=new PathExp($$[$0]); 
    grafo.generarPadre(1, "RelativePathExpr");
    grafo.generarHijos("RelativePathExpr");
    grafo.generarTexto(`PathExpr.valor = new PathExp(path.valor);`);
  
break;
case 114:
 
    this.$=new PathExp([]);
    grafo.generarHijos($$[$0]);
    grafo.generarTexto(`PathExpr.valor = new PathExp();`);
  
break;
case 115:
 
    this.$ = []; this.$.push($$[$0]); grafo.generarPadre(1, "StepExpr");
    grafo.generarHijos("StepExpr");
    grafo.generarTexto(`path = []; path.push(StepExpr.valor);`);
  
break;
case 116:
 
    this.$ = $$[$0-2]; $$[$0].tipo=TipoPath.ABS; this.$.push($$[$0]); 
    grafo.generarPadre(3, "StepExpr");
    grafo.generarPadre(1, "RelativePathExpr");
    grafo.generarHijos("RelativePathExpr",$$[$0-1],"StepExpr");
    grafo.generarTexto(`StepExpr.tipo = Absoluto; path.push(StepExpr.valor); `);
  
break;
case 117:
 
    this.$ = $$[$0-2]; $$[$0].tipo=TipoPath.REL; this.$.push($$[$0]);
    grafo.generarPadre(3,"StepExpr");
    grafo.generarPadre(1, "RelativePathExpr");
    grafo.generarHijos("RelativePathExpr",$$[$0-1],"StepExpr");
    grafo.generarTexto(`StepExpr.tipo = Relativo; path.push(StepExpr.valor);`);
  
break;
case 118:
 this.$=$$[$0]; grafo.generarPadre(1, "PostfixExpr"); grafo.generarHijos("PostfixExpr"); grafo.generarTexto(`StepExpr.valor = PostfixExpr.valor;`); 
break;
case 119:
 this.$=$$[$0]; grafo.generarPadre(1, "AxisStep"); grafo.generarHijos("AxisStep"); grafo.generarTexto(`StepExpr.valor = AxisStep.valor`);  
break;
case 120:
 this.$=$$[$0]; grafo.generarPadre(1, "ReverseStep");grafo.generarHijos("ReverseStep"); grafo.generarTexto(`AxisStep.valor = ReverseStep.valor;`); 
break;
case 121:
 this.$=$$[$0]; grafo.generarPadre(1, "ForwardStep");grafo.generarHijos("ForwardStep"); grafo.generarTexto(`AxisStep.valor = ForwardStep.valor;`);
break;
case 122:
 
    this.$=$$[$0-1]; this.$.predicado=$$[$0]; grafo.generarPadre(2, "PredicateList");
    grafo.generarPadre(1, "ReverseStep"); 
    grafo.generarHijos("ReverseStep","PredicateList");
    grafo.generarTexto(`ReverseStep.predicado = PredicateList.valor; AxisStep.valor = ReverseStep;`);
  
break;
case 123:
 
    this.$=$$[$0-1]; this.$.predicado=$$[$0]; grafo.generarPadre(2, "PredicateList");
    grafo.generarPadre(1, "ForwardStep"); 
    grafo.generarHijos("ForwardStep","PredicateList");
    grafo.generarTexto(`ForwardStep.predicado = PredicateList.valor; AxisStep.valor = ForwardStep;`);
  
break;
case 124:
 
    this.$=[];this.$.push($$[$0]);
    grafo.generarPadre(1, "Predicate");
    grafo.generarHijos("Predicate");
    grafo.generarTexto(`predicateList = []; predicateList.push(Predicate.valor);`);  
  
break;
case 125:
 
    this.$=$$[$0-1];this.$.push($$[$0]); grafo.generarPadre(2, "Predicate");
    grafo.generarPadre(1, "PredicateList");
    grafo.generarHijos("PredicateList","Predicate");
    grafo.generarTexto(`predicateList.push(Predicate.valor);`);
  
break;
case 126:
 
    this.$=$$[$0]; grafo.generarPadre(1, "AbbrevForwardStep");
    grafo.generarHijos("AbbrevForwardStep");
    grafo.generarTexto(`ForwardStep.valor = AbbrevForwardStep.valor`);
  
break;
case 127:
 
    this.$=$$[$0-1]; this.$.nombre=$$[$0]; grafo.generarPadre(2, "NameTest");
    grafo.generarPadre(1, "ForwardAxis");
    grafo.generarHijos("ForwardAxis","NameTest");
    grafo.generarTexto(`ForwardAxis.nombre = NameTest.valor; ForwardStep.valor = ForwardAxis.valor`);
  
break;
case 128:
 
    this.$=new Atributo($$[$0],[],TipoPath.ABS);
    grafo.generarPadre(2, "NameTest");
    grafo.generarHijos($$[$0-1],"NameTest");
    grafo.generarTexto(`AbbrevForwardStep.valor = new Atributo(NameTest.valor);`);
  
break;
case 129:
 
    this.$=new Camino($$[$0],[],TipoPath.ABS);
    grafo.generarPadre(1, "NameTest");
    grafo.generarHijos("NameTest");
    grafo.generarTexto(`AbbrevForwardStep.valor = new Camino(NameTest.valor);`);
  
break;
case 130:
 this.$=new Child(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ForwardAxis.valor = new Child();`); 
break;
case 131:
 this.$=new Descendant(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ForwardAxis.valor = new Descendant();`); 
break;
case 132:
 this.$=new Attribute(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ForwardAxis.valor = new Attribute();`); 
break;
case 133:
 this.$=new Self(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ForwardAxis.valor = new Self();`); 
break;
case 134:
 this.$=new DescSelf(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ForwardAxis.valor = new DescSelf();`); 
break;
case 135:
 this.$=new FollowSibling(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ForwardAxis.valor = new FollowSibling();`); 
break;
case 136:
 this.$=new Follow(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ForwardAxis.valor = new Follow();`);  
break;
case 138:
 this.$=$$[$0]; grafo.generarPadre(1, "NameTest"); grafo.generarHijos("NameTest"); grafo.generarTexto(`NodeTest.valor = NameTest.valor;`); 
break;
case 139: case 140:
 this.$=$$[$0]; grafo.generarHijos($$[$0]); grafo.generarTexto(`NameTest.valor = ${$$[$0]};`); 
break;
case 141:
 
    this.$=$$[$0]; grafo.generarPadre(1, "AbbrevReverseStep");
    grafo.generarHijos("AbbrevReverseStep");
    grafo.generarTexto(`ReverseStep.valor = AbbrevReverseStep.valor`);
 
break;
case 142:
 this.$=$$[$0-1]; this.$.nombre=$$[$0];
    grafo.generarPadre(2, "NameTest");
    grafo.generarPadre(1, "ReverseAxis");
    grafo.generarHijos("ReverseAxis","NameTest");
    grafo.generarTexto(`ReverseAxis.nombre = NameTest; ReverseStep.valor = ReverseAxis;`);
  
break;
case 143:
 this.$=new CaminoInverso("*",[],TipoPath.ABS); grafo.generarHijos($$[$0]); grafo.generarTexto(`caminoInverso = new CaminoInverso(); caminoInverso.tipo = Absoluto; AbbrevReverseStep.valor = caminoInverso;`); 
break;
case 144:
 this.$=new Parent(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`parent = new Parent(); parent.tipo = Absoluto; ReverseAxis.valor = parent;`); 
break;
case 145:
 this.$=new Ancestor(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ancestor = new Ancestor(); ancestor.tipo = Absoluto; ReverseAxis.valor = ancestor;`); 
break;
case 146:
 this.$=new PrecedingSibling(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`precedingS = new PrecedingSibling(); precedingS.tipo = Absoluto; ReverseAxis.valor = precedingS;`); 
break;
case 147:
 this.$=new Preceding(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`preceding = new Preceding(); preceding.tipo = Absoluto; ReverseAxis.valor = preceding;`);
break;
case 148:
 this.$=new AncestorSelf(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ancestorS = new AncestorSelf(); ancestorS.tipo = Absoluto; ReverseAxis.valor = ancestorS;`); 
break;
case 149:
 
    this.$=$$[$0]; grafo.generarPadre(1, "PrimaryExpr"); 
    grafo.generarHijos("PrimaryExpr");
    grafo.generarTexto(`PostfixExpr.valor = PrimaryExpr.valor;`);
  
break;
case 150:
 this.$=$$[$0-1]; this.$.predicado = $$[$0]; grafo.generarPadre(2, "PredicateList");
    grafo.generarPadre(1, "PrimaryExpr");
    grafo.generarHijos("PrimaryExpr","PostfixExprL");
    grafo.generarTexto(`PrimaryExpr.predicado = predicateList.valor; PostfixExpr.valor = PrimaryExpr.valor`);
  
break;
case 151:
 
    this.$=$$[$0-1]; grafo.generarPadre(2, "ExprSingle");
    grafo.generarHijos($$[$0-2],"ExprSingle",$$[$0]);
    grafo.generarTexto(`Predicate.valor = ExprSingle.valor;`);
  
break;
case 152:
 this.$=$$[$0]; grafo.generarPadre(1, "Literal"); grafo.generarHijos("Literal"); grafo.generarTexto("PrimaryExpr.valor = literal.valor"); 
break;
case 153:
 this.$=$$[$0]; grafo.generarPadre(1, "FunctionCall"); grafo.generarHijos("FunctionCall"); grafo.generarTexto("PrimaryExpr.valor = functionCall.valor");
break;
case 154:
 this.$=$$[$0]; grafo.generarPadre(1, "ContextItemExpr"); grafo.generarHijos("ContextItemExpr"); grafo.generarTexto("PrimaryExpr.valor = contextItemExpr.valor");
break;
case 155:
 this.$=$$[$0]; grafo.generarPadre(1, "ParenthesizedExpr"); grafo.generarHijos("ParenthesizedExpr"); grafo.generarTexto("PrimaryExpr.valor = ParenthesizedExpr.valor"); 
break;
case 156:
 this.$=new Literal(Tipo.INTEGER,$$[$0]); grafo.generarHijos($$[$0]); grafo.generarTexto(`return literal = new Literal(${$$[$0]}); literal.tipo = INTEGER;`); 
break;
case 157:
 this.$=new Literal(Tipo.DECIMAL,$$[$0]); grafo.generarHijos($$[$0]); grafo.generarTexto(`return literal = new Literal(${$$[$0]}); literal.tipo = DECIMAL;`); 
break;
case 158:
 this.$=new Literal(Tipo.STRING,$$[$0]);  grafo.generarHijos($$[$0]); grafo.generarTexto(`return literal = new Literal(${$$[$0]}); literal.tipo = STRING;`); 
break;
case 159:

    this.$ = new CallFunction([],TipoPath.ABS,$$[$0-2]);
    grafo.generarHijos($$[$0-2],$$[$0-1],$$[$0]);
    grafo.generarTexto(`functionCall = new CallFunction(); functionCall.tipo = Absoluto;`);
  
break;
case 160:
 this.$=new ContextItemExpr([],TipoPath.ABS); grafo.generarHijos($$[$0]); grafo.generarTexto(`contextItemExpr =  new ContextItemExpr(); contextItemExpr.tipo = Absoluto;`);
break;
case 161:
 this.$=[]; grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ParenthesizedExpr.valor = [];`);
break;
case 162:
 this.$=$$[$0-1]; grafo.generarHijos($$[$0-2],$$[$0-1],$$[$0]); grafo.generarTexto(`ParenthesizedExpr.valor = ExprSingle.valor;`); 
break;
}
},
table: [{2:$V0,3:1,4:2,5:3,6:4,7:5,8:$V1,10:$V2,12:$V3,13:$V4,22:$V5,28:6,29:7,30:8,31:9,32:10,33:$V6,34:29,37:$V7,39:14,41:$V8,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{1:[3]},{1:[2,1],2:$V0,5:80,6:4,7:5,8:$V1,10:$V2,12:$V3,13:$V4,22:$V5,28:6,29:7,30:8,31:9,32:10,33:$V6,34:29,37:$V7,39:14,41:$V8,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},o($VF,[2,3]),o($VF,[2,4]),o($VF,[2,5]),o($VG,[2,18]),o($VG,[2,19]),o($VG,[2,20]),o($VH,[2,21],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_}),o($VG,[2,22]),{9:[1,100]},{22:[1,101]},{12:[1,102]},o([1,2,8,10,12,13,22,25,33,37,41,48,50,51,52,69,70,71,72,73,75,76,77,78,79,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,131],[2,35],{40:[1,103]}),{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:104,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:105,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:107,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:108,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,15:$V01,22:$V$,31:109,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:111,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},o($V11,[2,69]),o($V11,[2,70]),o($V11,[2,71]),o($V21,[2,72]),o($V21,[2,73]),o($V21,[2,74]),{13:[1,112]},{13:[1,113]},{13:[1,114]},{13:[1,115]},o($V21,[2,80]),o([1,8,25,33,37,40,41],[2,24],{74:22,34:29,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,93:46,95:47,96:48,97:49,124:50,98:51,99:52,127:53,128:54,129:55,130:56,116:57,117:58,102:59,103:60,104:70,31:116,2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,92:$Vn,94:$Vo,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,131:$VE}),{13:[1,117]},o($V21,[2,81],{82:[1,118]}),o($V21,[2,82],{82:[1,119]}),{11:[1,120]},o($V31,$V41),o([1,2,8,10,12,13,15,20,22,25,33,37,40,41,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,70,71,72,73,75,76,77,78,79,82,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,126,131],[2,87],{68:[1,121]}),o($V51,[2,88],{67:$V61}),o($V71,[2,90]),o([1,2,8,10,12,13,15,20,22,25,33,37,40,41,48,52,53,54,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,82,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,126,131],[2,92],{87:123,50:$V81,51:$V91,55:[1,126],56:[1,127],57:[1,130],58:[1,131],59:[1,128],60:[1,129]}),o($Va1,[2,100],{52:$Vb1,53:$Vc1,54:$Vd1,90:$Ve1}),o($Vf1,[2,103]),o($Vf1,[2,108]),{12:$V3,13:$Vg1,50:$Va,51:$Vh1,52:$Vc,71:$Vi1,72:$Vj1,73:$Vk1,89:136,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},o([1,2,8,10,15,20,22,25,33,37,40,41,48,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,75,76,77,78,79,82,90,92,94,126],[2,114],{95:47,96:48,97:49,124:50,98:51,99:52,127:53,128:54,129:55,130:56,116:57,117:58,102:59,103:60,104:70,93:142,12:$V3,13:$Vg1,52:$Vc,71:$Vi1,72:$Vj1,73:$Vk1,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,131:$VE}),{12:$V3,13:$Vg1,52:$Vc,71:$Vi1,72:$Vj1,73:$Vk1,93:143,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},o($Vl1,[2,113],{92:$Vm1,94:$Vn1}),o($Vf1,[2,115]),o($Vf1,[2,118]),o($Vf1,[2,119]),o($Vf1,[2,149],{100:146,101:147,125:$Vo1}),o($Vf1,[2,120],{101:147,100:149,125:$Vo1}),o($Vf1,[2,121],{101:147,100:150,125:$Vo1}),o($Vp1,[2,152]),o($Vp1,[2,153]),o($Vp1,[2,154]),o($Vp1,[2,155]),o($Vp1,[2,141]),{12:$Vq1,52:$Vc,104:151},o($Vp1,[2,126]),{12:$Vq1,52:$Vc,104:153},o([1,2,8,10,12,15,20,22,25,33,37,40,41,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,82,90,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,125,126,131],$Vr1,{13:[1,154]}),o($Vp1,[2,160]),o($Vp1,[2,143]),{107:[1,155]},{107:[1,156]},{107:[1,157]},{107:[1,158]},{107:[1,159]},{12:$Vq1,52:$Vc,104:160},o($Vp1,[2,129]),{107:[1,161]},{107:[1,162]},{107:[1,163]},{107:[1,164]},{107:[1,165]},{107:[1,166]},{107:[1,167]},{107:[1,168]},o($Vp1,[2,140]),o($VF,[2,2]),{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:169,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:170,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:171,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:172,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:173,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:174,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:175,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:176,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:177,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:178,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:179,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:180,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:181,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:182,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:183,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:184,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:185,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:186,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:187,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{10:[1,188]},{12:[1,189]},o([1,2,8,10,12,13,22,25,33,37,40,41,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,131],$Vs1,{38:[1,190]}),o($Vt1,$Vu1,{28:6,29:7,30:8,31:9,32:10,39:14,74:22,34:29,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,93:46,95:47,96:48,97:49,124:50,98:51,99:52,127:53,128:54,129:55,130:56,116:57,117:58,102:59,103:60,104:70,24:191,27:193,6:194,2:$V0,10:$V2,12:$V3,13:$V4,22:$V5,33:$V6,37:$V7,41:[1,192],48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,92:$Vn,94:$Vo,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,131:$VE}),o($V21,[2,51]),o([1,2,8,10,12,13,15,20,22,25,33,37,40,41,48,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,82,90,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,131],$Vv1),{12:[1,195]},o($V21,[2,66]),o([1,2,8,10,12,13,15,20,22,25,33,37,40,41,48,69,70,71,72,73,75,76,77,78,79,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,131],[2,67],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_}),{15:[1,196],50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_},o($Vp1,[2,161]),o([50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,82],$V41,{15:$Vw1}),{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:198,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:199,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:200,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:201,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},o($VH,[2,23],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_}),{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:202,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{2:[1,204],12:$V3,13:$Vg1,50:$Va,51:$Vh1,52:$Vc,71:$Vi1,72:$Vj1,73:$Vk1,81:203,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{12:$V3,13:$Vg1,50:$Va,51:$Vh1,52:$Vc,71:$Vi1,72:$Vj1,73:$Vk1,81:205,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{12:[1,206]},{12:$V3,13:$Vg1,50:$Va,51:$Vh1,52:$Vc,71:$Vi1,72:$Vj1,73:$Vk1,84:207,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{12:$V3,13:$Vg1,50:$Va,51:$Vh1,52:$Vc,71:$Vi1,72:$Vj1,73:$Vk1,85:208,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{12:$V3,13:$Vg1,50:$Va,51:$Vh1,52:$Vc,71:$Vi1,72:$Vj1,73:$Vk1,86:209,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{12:$V3,13:$Vg1,50:$Va,51:$Vh1,52:$Vc,71:$Vi1,72:$Vj1,73:$Vk1,88:210,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{12:$V3,13:$Vg1,50:$Va,51:$Vh1,52:$Vc,71:$Vi1,72:$Vj1,73:$Vk1,88:211,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},o($Vx1,[2,94]),o($Vx1,[2,95]),o($Vx1,[2,96]),o($Vx1,[2,97]),o($Vx1,[2,98]),o($Vx1,[2,99]),{12:$V3,13:$Vg1,50:$Va,51:$Vh1,52:$Vc,71:$Vi1,72:$Vj1,73:$Vk1,89:212,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{12:$V3,13:$Vg1,50:$Va,51:$Vh1,52:$Vc,71:$Vi1,72:$Vj1,73:$Vk1,89:213,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{12:$V3,13:$Vg1,50:$Va,51:$Vh1,52:$Vc,71:$Vi1,72:$Vj1,73:$Vk1,89:214,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{12:$V3,13:$Vg1,50:$Va,51:$Vh1,52:$Vc,71:$Vi1,72:$Vj1,73:$Vk1,89:215,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},o($Vf1,[2,109]),{12:$V3,13:$Vg1,50:$Va,51:$Vh1,52:$Vc,71:$Vi1,72:$Vj1,73:$Vk1,89:216,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},o($Vp1,[2,156]),o($Vp1,[2,157]),o($Vp1,[2,158]),{12:$V3,13:$Vg1,15:$V01,50:$Va,51:$Vh1,52:$Vc,71:$Vi1,72:$Vj1,73:$Vk1,81:217,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},o($Vl1,[2,111],{92:$Vm1,94:$Vn1}),o($Vl1,[2,112],{92:$Vm1,94:$Vn1}),{12:$V3,13:$Vg1,52:$Vc,71:$Vi1,72:$Vj1,73:$Vk1,95:218,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{12:$V3,13:$Vg1,52:$Vc,71:$Vi1,72:$Vj1,73:$Vk1,95:219,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},o($Vf1,[2,150],{101:220,125:$Vo1}),o($Vp1,[2,124]),{12:$V3,13:$Vg1,50:$Va,51:$Vh1,52:$Vc,71:$Vi1,72:$Vj1,73:$Vk1,81:221,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},o($Vf1,[2,122],{101:220,125:$Vo1}),o($Vf1,[2,123],{101:220,125:$Vo1}),o($Vp1,[2,142]),o($Vp1,$Vr1),o($Vp1,[2,127]),{15:[1,222]},o($Vy1,[2,144]),o($Vy1,[2,145]),o($Vy1,[2,146]),o($Vy1,[2,147]),o($Vy1,[2,148]),o($Vp1,[2,128]),o($Vy1,[2,130]),o($Vy1,[2,131]),o($Vy1,[2,132]),o($Vy1,[2,133]),o($Vy1,[2,134]),o($Vy1,[2,135]),o($Vy1,[2,136]),o($Vy1,[2,137]),o($Vz1,[2,46],{52:$VK,53:$VL,54:$VM}),o($Vz1,[2,47],{52:$VK,53:$VL,54:$VM}),o($V21,[2,48]),o($V21,[2,49]),o($V21,[2,50]),o($VA1,[2,52],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM}),o($VA1,[2,53],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM}),o($VA1,[2,54],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM}),o($VA1,[2,55],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM}),o($VA1,[2,56],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM}),o($VA1,[2,57],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM}),o($VA1,[2,58],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM}),o($VA1,[2,59],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM}),o($VA1,[2,60],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM}),o($VA1,[2,61],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM}),o($VA1,[2,62],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM}),o($VA1,[2,63],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM}),o($VA1,[2,64],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY}),o([1,2,8,10,12,13,15,20,22,25,33,37,40,41,48,68,69,70,71,72,73,75,76,77,78,79,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,131],[2,65],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ}),{11:[1,223]},{16:[1,224],38:[1,225]},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:226,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},o($VG,[2,34]),{13:[1,227]},o($Vt1,[2,38],{28:6,29:7,30:8,31:9,32:10,39:14,74:22,34:29,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,93:46,95:47,96:48,97:49,124:50,98:51,99:52,127:53,128:54,129:55,130:56,116:57,117:58,102:59,103:60,104:70,6:228,2:$V0,10:$V2,12:$V3,13:$V4,22:$V5,33:$V6,37:$V7,41:$V8,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,92:$Vn,94:$Vo,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,131:$VE}),o($VG,[2,17]),o($V21,$Vs1),o($V21,[2,68]),o($Vp1,[2,162]),{15:[1,229],50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_},{15:[1,230],50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_},{15:[1,231],50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_},{15:[1,232],50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_},{15:[1,233],50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_},o($V31,[2,84]),o($V31,[2,85]),o($V31,[2,86]),{13:[1,235],35:234},o($V51,[2,89],{67:$V61}),o($V71,[2,91]),o([1,2,8,10,12,13,15,20,22,25,33,37,40,41,48,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,82,92,94,105,106,108,109,110,111,112,113,114,118,119,120,121,122,123,126,131],[2,93],{50:$V81,51:$V91}),o($Va1,[2,101],{52:$Vb1,53:$Vc1,54:$Vd1,90:$Ve1}),o($Va1,[2,102],{52:$Vb1,53:$Vc1,54:$Vd1,90:$Ve1}),o($Vf1,[2,104]),o($Vf1,[2,105]),o($Vf1,[2,106]),o($Vf1,[2,107]),o($Vf1,$Vv1),{15:$Vw1},o($Vf1,[2,116]),o($Vf1,[2,117]),o($Vp1,[2,125]),{126:[1,236]},o($Vp1,[2,159]),{12:[1,237]},{17:238,43:$VB1},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:240,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},o($VH,[2,33],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_}),{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:241,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},o($VG,[2,16]),o($V21,[2,76]),o($V21,[2,77]),o($V21,[2,78]),o($V21,[2,79]),{42:[1,242]},o($V21,[2,25]),{2:$V0,10:$V2,12:$V3,13:$V4,15:[1,244],22:$V$,31:245,34:29,36:243,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},o($Vp1,[2,151]),{13:[1,246]},{18:[1,247],38:[1,248]},{11:[1,249]},o($VH,[2,32],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_}),{15:[1,250],50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_},o($Vt1,$Vu1,{28:6,29:7,30:8,31:9,32:10,39:14,74:22,34:29,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,93:46,95:47,96:48,97:49,124:50,98:51,99:52,127:53,128:54,129:55,130:56,116:57,117:58,102:59,103:60,104:70,27:193,6:194,24:251,2:$V0,10:$V2,12:$V3,13:$V4,22:$V5,33:$V6,37:$V7,41:$V8,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,92:$Vn,94:$Vo,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,131:$VE}),{15:[1,252],20:[1,253]},o($V21,[2,27]),o($VC1,[2,29],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_}),o($VC1,[2,11],{14:254,21:255,22:$VD1}),{38:[1,257]},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:258,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{44:[1,259],45:[1,260],46:[1,261],47:[1,262],48:[1,263],49:[1,264]},{42:[1,265]},o($VG,[2,37]),o($V21,[2,26]),{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:266,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},{15:[1,267],20:[1,268]},o($VC1,[2,10]),{12:[1,269]},{2:$V0,10:$V2,12:$V3,13:$V4,22:$V$,31:270,34:29,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},o($VH,[2,31],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_}),o($VE1,[2,40]),o($VE1,[2,41]),o($VE1,[2,42]),o($VE1,[2,43]),o($VE1,[2,44]),o($VE1,[2,45]),o($Vt1,$Vu1,{28:6,29:7,30:8,31:9,32:10,39:14,74:22,34:29,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,93:46,95:47,96:48,97:49,124:50,98:51,99:52,127:53,128:54,129:55,130:56,116:57,117:58,102:59,103:60,104:70,27:193,6:194,24:271,2:$V0,10:$V2,12:$V3,13:$V4,22:$V5,33:$V6,37:$V7,41:$V8,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,92:$Vn,94:$Vo,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,131:$VE}),o($VC1,[2,28],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_}),{16:[1,272],19:273,23:$VF1},{21:275,22:$VD1},o($VC1,[2,14],{16:[1,276]}),o($VH,[2,30],{50:$VI,51:$VJ,52:$VK,53:$VL,54:$VM,55:$VN,56:$VO,57:$VP,58:$VQ,59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_}),o($VG,[2,36]),{17:277,43:$VB1},o($VF,[2,8]),{2:$V0,6:194,10:$V2,12:$V3,13:$V4,22:$V5,24:278,25:$Vu1,27:193,28:6,29:7,30:8,31:9,32:10,33:$V6,34:29,37:$V7,39:14,41:$V8,48:$V9,50:$Va,51:$Vb,52:$Vc,69:$Vd,70:$Ve,71:$Vf,72:$Vg,73:$Vh,74:22,75:$Vi,76:$Vj,77:$Vk,78:$Vl,79:$Vm,80:32,81:35,83:36,84:37,85:38,86:39,88:40,89:41,91:42,92:$Vn,93:46,94:$Vo,95:47,96:48,97:49,98:51,99:52,102:59,103:60,104:70,105:$Vp,106:$Vq,108:$Vr,109:$Vs,110:$Vt,111:$Vu,112:$Vv,113:$Vw,114:$Vx,116:57,117:58,118:$Vy,119:$Vz,120:$VA,121:$VB,122:$VC,123:$VD,124:50,127:53,128:54,129:55,130:56,131:$VE},o($VC1,[2,9]),{17:279,43:$VB1},{18:[1,280],19:281,23:$VF1},{25:[1,282]},o($VC1,[2,13],{18:[1,283]}),{19:284,23:$VF1},o($VF,[2,7]),{26:[1,285]},o($VC1,[2,12]),o($VF,[2,6]),o($VF,[2,15])],
defaultActions: {},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  const {Tipo,TipoPath,Comando} = require("./AST/Entorno");
  const {Logical} = require("./Expresion/Logical");
  const {Arithmetic, Unary} = require("./Expresion/Arithmetics")
  const {Literal,PathExp} = require("./Expresion/Expresiones");
  const { ComparisonExp } = require('./Expresion/Comparison')
  const { Atributo,Camino,Child,Descendant,Attribute,Self,DescSelf,FollowSibling,Follow } = require('./Expresion/axes')
  const { CaminoInverso,Parent,Ancestor,PrecedingSibling,AncestorSelf,Preceding } = require('./Expresion/axes')
  const { ContextItemExpr,CallFunction } = require('./Expresion/postfix')
  const { grafoCST } = require('../CST')
  
  const { AST } = require('./XQuery/ts/Arbol/AST')
  const { TipoXQ, EnumTipo } = require('./XQuery/ts/Entorno/TipoXQ')
  const { LiteralXQ } = require('./XQuery/ts/Expresiones/LiteralXQ')
  const { IdXQ } = require('./XQuery/ts/Expresiones/IdXQ')
  const { DeclaracionXQ } = require('./XQuery/ts/Instrucciones/DeclaracionXQ')
  const { AsignacionXQ } = require('./XQuery/ts/Instrucciones/AsignacionXQ')
  const { BloqueXQ } = require('./XQuery/ts/Instrucciones/Bloque')
  const { If } = require('./XQuery/ts/Instrucciones/If')
  const { Condicion_If } = require('./XQuery/ts/Instrucciones/Condicion_If')
  const { ParametroXQ } = require('./XQuery/ts/Funciones/ParametroXQ')
  const { FuncionXQ } = require('./XQuery/ts/Funciones/Funcion')
  const { ReturnXQ } = require('./XQuery/ts/Funciones/ReturnXQ')
  const { LlamadaF } = require('./XQuery/ts/Funciones/LlamadaF')
  const { SumaXQ } = require('./XQuery/ts/Operaciones/Aritmeticas/Suma')
  const { RestaXQ } = require('./XQuery/ts/Operaciones/Aritmeticas/Resta')
  const { MultiplicacionXQ } = require('./XQuery/ts/Operaciones/Aritmeticas/Multiplicacion')
  const { DivisionXQ } = require('./XQuery/ts/Operaciones/Aritmeticas/Division')
  const { ModuloXQ } = require('./XQuery/ts/Operaciones/Aritmeticas/Modulo')
  const { NegativoXQ } = require('./XQuery/ts/Operaciones/Aritmeticas/Negativo')
  const { IgualXQ } = require('./XQuery/ts/Operaciones/Relacionales/Igual')
  const { NoIgualXQ } = require('./XQuery/ts/Operaciones/Relacionales/NoIgual')
  const { MayorXQ } = require('./XQuery/ts/Operaciones/Relacionales/Mayor')
  const { MayorIgualXQ } = require('./XQuery/ts/Operaciones/Relacionales/MayorIgual')
  const { MenorXQ } = require('./XQuery/ts/Operaciones/Relacionales/Menor')
  const { MenorIgualXQ } = require('./XQuery/ts/Operaciones/Relacionales/MenorIgual')
  const { AndXQ } = require('./XQuery/ts/Operaciones/Logicas/And')
  const { OrXQ } = require('./XQuery/ts/Operaciones/Logicas/Or')
  const { NotXQ } = require('./XQuery/ts/Operaciones/Logicas/Not')
  const { ToStringXQ } = require('./XQuery/ts/Funciones/Nativas/ToString')
  const { ToNumberXQ } = require('./XQuery/ts/Funciones/Nativas/ToNumber')
    
  var grafo = new grafoCST(); 

  var ListaErrores = []
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2: this.begin("Comentario"); 
break;
case 3: this.popState(); 
break;
case 4:
break;
case 5:
break;
case 6:
break;
case 7:return "RLET"
break;
case 8:return "RAS"
break;
case 9:return "Rxs"
break;
case 10:return "ASIGNAR"
break;
case 11:return "LLAVEA"
break;
case 12:return "LLAVEC"
break;
case 13:return "SEMICOLON"
break;
case 14:return "RAT"
break;
case 15:return "RTRUE"
break;
case 16:return "RFALSE"
break;
case 17:return "R_INT"
break;
case 18:return "R_DOBLE"
break;
case 19:return "R_DECIMAL"
break;
case 20:return "R_FLOAT"
break;
case 21:return "R_STRING"
break;
case 22:return "R_BOOLEAN"
break;
case 23:return "R_IF"
break;
case 24:return "R_THEN"
break;
case 25:return "R_ELSE"
break;
case 26:return "R_DECLARE"
break;
case 27:return "R_FUNC"
break;
case 28:return "R_LOCAL"
break;
case 29:return "R_RETURN"
break;
case 30:return "R_TOSTRING"
break;
case 31:return "R_TOSTRING"
break;
case 32:return "R_NUMBER"
break;
case 33:return "R_TONUMBER"
break;
case 34:return "R_TONUMBER"
break;
case 35:return "ROR"
break;
case 36:return "RAND"
break;
case 37:return "RNOT"
break;
case 38:return "IDIV"
break;
case 39:return "DIV"
break;
case 40:return "MOD"
break;
case 41:return "RFOR"
break;
case 42:return "RIN"
break;
case 43:return "RTO"
break;
case 44:return "EQ"
break;
case 45:return "NE"
break;
case 46:return "LT"
break;
case 47:return "LE"
break;
case 48:return "GT"
break;
case 49:return "GE"
break;
case 50:return "RCHILD"
break;
case 51:return "RDESSELF"
break;
case 52:return "RDESCENDANT"
break;
case 53:return "RATTRIBUTE"
break;
case 54:return "RSELF"
break;
case 55:return "RFOLLOWSIBLING"
break;
case 56:return "RFOLLOW"
break;
case 57:return "RNAMESPACE"
break;
case 58:return "RPARENT"
break;
case 59:return "RANCESTORORSELF"
break;
case 60:return "RANCESTOR"
break;
case 61:return "RPRECEDSIBLING"
break;
case 62:return "RPRECED"
break;
case 63:return "DECIMAL"
break;
case 64:return "INTEGER"
break;
case 65: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return "CADENA" 
break;
case 66:return "NOMBRE"
break;
case 67:return "DOBLEBARRA"
break;
case 68:return "BARRA"
break;
case 69:return "ARROBA"
break;
case 70:return "CORA"
break;
case 71:return "CORB"
break;
case 72:return "MAS"
break;
case 73:return "MENOS"
break;
case 74:return "DobleAsterisco"
break;
case 75:return "POR"
break;
case 76:return "MAYORIG"
break;
case 77:return "MENORIG"
break;
case 78:return "DIFERENTE"
break;
case 79:return "MENOR"
break;
case 80:return "MAYOR"
break;
case 81:return "IGUAL"
break;
case 82:return "PIPE"
break;
case 83:return "COMA"
break;
case 84:return "DOLAR"
break;
case 85:return "ADMIRACION"
break;
case 86:return "ARROBA"
break;
case 87:return "DOBLEPUNTO"
break;
case 88:return "PARENTESISA"
break;
case 89:return "PARENTESISC"
break;
case 90:return "INTERROGACIONC"
break;
case 91:return "PUNTO"
break;
case 92:return "DOBLEDOSPUNTOS"
break;
case 93:return "DOSPUNTOS"
break;
case 94: console.log(`LEXERR: ${yy_.yytext}. L:${yy_.yylloc.first_line} C:${yy_.yylloc.first_column}`); ListaErrores.push({Error:'Este es un error léxico: ' + yy_.yytext,tipo:"Lexico", Linea: yy_.yylloc.first_line , columna:yy_.yylloc.first_column}) 
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:\(:)/i,/^(?::\))/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:.)/i,/^(?:let\b)/i,/^(?:as\b)/i,/^(?:xs\b)/i,/^(?::=)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:at\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:decimal\b)/i,/^(?:float\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:declare\b)/i,/^(?:function\b)/i,/^(?:local\b)/i,/^(?:return\b)/i,/^(?:toString\b)/i,/^(?:tostring\b)/i,/^(?:number\b)/i,/^(?:toNumber\b)/i,/^(?:tonumber\b)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:not\b)/i,/^(?:idiv\b)/i,/^(?:div\b)/i,/^(?:mod\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:to\b)/i,/^(?:eq\b)/i,/^(?:ne\b)/i,/^(?:lt\b)/i,/^(?:le\b)/i,/^(?:gt\b)/i,/^(?:ge\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:attribute\b)/i,/^(?:self\b)/i,/^(?:following-sibling\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:preceding-sibling\b)/i,/^(?:preceding\b)/i,/^(?:(\.[0-9]+)|([0-9]+\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:("[^"]*")|('[^']*'))/i,/^(?:([a-zA-ZñÑ_])([a-zA-ZñÑ0-9_-]|\.)*)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:@)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\|)/i,/^(?:,)/i,/^(?:\$)/i,/^(?:!)/i,/^(?:@)/i,/^(?:\.\.)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\?)/i,/^(?:\.)/i,/^(?:::)/i,/^(?::)/i,/^(?:.)/i],
conditions: {"Comentario":{"rules":[3,4,5,6],"inclusive":false},"INITIAL":{"rules":[0,1,2,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XPath;
exports.Parser = XPath.Parser;
exports.parse = function () { return XPath.parse.apply(XPath, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}