/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var xpathGramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,18],$V2=[1,15],$V3=[1,17],$V4=[1,21],$V5=[1,23],$V6=[1,24],$V7=[1,16],$V8=[1,20],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,29],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[1,36],$Vk=[1,37],$Vl=[1,38],$Vm=[5,135],$Vn=[1,48],$Vo=[1,47],$Vp=[1,46],$Vq=[1,52],$Vr=[1,45],$Vs=[1,51],$Vt=[1,53],$Vu=[1,54],$Vv=[1,55],$Vw=[1,62],$Vx=[1,63],$Vy=[5,14,15,21,23,26,28,43,48,53,54,55,57,58,71,77,84,85,86,87,88,94,101,103,108,109,110,111,113,114,116,154],$Vz=[5,14,15,21,23,28,35,43,45,46,54,57,61,62,68,71,77,84,85,86,87,88,94,101,103,108,109,110,111,113,114,116,125,126,127,128,129,130,131,135,140,141,145,146,149,154,157,158,159,160,161,162,163,164,165,166,167,168,169],$VA=[2,159],$VB=[1,69],$VC=[71,94,101,103,110],$VD=[5,14,15,21,23,28,35,43,45,46,54,57,61,62,68,71,77,84,85,86,87,88,94,101,103,108,109,110,111,113,114,116,125,126,127,128,129,130,131,135,140,141,145,146,147,149,154,157,158,159,160,161,162,163,164,165,166,167,168,169],$VE=[1,73],$VF=[1,76],$VG=[1,90],$VH=[1,94],$VI=[1,101],$VJ=[1,108],$VK=[1,100],$VL=[1,103],$VM=[1,107],$VN=[1,99],$VO=[1,104],$VP=[1,105],$VQ=[1,106],$VR=[45,46],$VS=[1,112],$VT=[28,71,94,101,103,110],$VU=[5,14,15,21,23,28,35,36,43,45,46,54,57,61,62,68,71,77,84,85,86,87,88,94,101,103,108,109,110,111,113,114,116,120,121,122,125,126,127,128,129,130,131,135,140,141,145,146,147,148,149,154,157,158,159,160,161,162,163,164,165,166,167,168,169],$VV=[5,14,15,21,23,28,43,57,71,77,84,85,86,87,88,94,101,103,108,109,110,111,113,114,116,154],$VW=[1,140],$VX=[1,123],$VY=[1,134],$VZ=[1,135],$V_=[1,136],$V$=[1,137],$V01=[1,138],$V11=[1,128],$V21=[71,94,101,103,110,114,116],$V31=[1,149],$V41=[1,151],$V51=[1,155],$V61=[1,157],$V71=[1,147],$V81=[1,153],$V91=[1,154],$Va1=[1,156],$Vb1=[1,158],$Vc1=[1,148],$Vd1=[1,150],$Ve1=[1,152],$Vf1=[1,169],$Vg1=[1,167],$Vh1=[1,175],$Vi1=[1,174],$Vj1=[1,176],$Vk1=[1,178],$Vl1=[1,179],$Vm1=[1,168],$Vn1=[1,170],$Vo1=[1,171],$Vp1=[1,177],$Vq1=[1,172],$Vr1=[1,173],$Vs1=[23,35,36,43,46,68,114,116,120,121,122,129,130,131,148],$Vt1=[5,14,15,21,23,28,35,36,43,46,57,68,71,77,84,85,86,87,88,94,101,103,108,109,110,111,113,114,116,120,121,122,129,130,131,148,154],$Vu1=[2,188],$Vv1=[15,45,46],$Vw1=[1,198],$Vx1=[1,201],$Vy1=[1,199],$Vz1=[1,200],$VA1=[1,202],$VB1=[1,203],$VC1=[5,14,15,21,23,28,35,36,43,57,71,77,84,85,86,87,88,94,101,103,108,109,110,111,113,114,116,120,121,122,154],$VD1=[14,15,21,43,71,77,84,85,86,87,88,94,111,154],$VE1=[2,79],$VF1=[1,220],$VG1=[1,246],$VH1=[1,250],$VI1=[1,248],$VJ1=[1,249],$VK1=[1,252],$VL1=[1,251],$VM1=[23,28],$VN1=[23,36,43,46,68,114,116,120,129,130,131,148],$VO1=[23,43,46,68,114,116,129,130,131,148],$VP1=[15,26,43,48,53,54,55,58],$VQ1=[5,14,15,21,23,28,36,43,57,71,77,84,85,86,87,88,94,101,103,108,109,110,111,113,114,116,120,154],$VR1=[14,15,21,23,43,57,71,77,84,85,86,87,88,94,111,154],$VS1=[1,291],$VT1=[2,19],$VU1=[23,28,55],$VV1=[23,28,34,35,36,55];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"XPath":4,"EOF":5,"XQUERY":6,"FLWORExpr":7,"DirectConstructor":8,"AnnotatedDecl":9,"declare":10,"VarDecl":11,"FunctionDecl":12,"variable":13,"$":14,"nodename":15,":=":16,"VarValue":17,"ExprSingle":18,"function":19,"FunctionName":20,"lparen":21,"EParamList":22,"rparen":23,"TypeDeclaration":24,"FunctionBody":25,":":26,"ParamList":27,",":28,"Param":29,"as":30,"SequenceType":31,"ItemType":32,"OccurrenceIndicator":33,"?":34,"*":35,"+":36,"xsString":37,"xsDate":38,"xsDecimal":39,"xsBoolean":40,"EnclosedExpr":41,"DirElemConstructor":42,"<":43,"DirAttributeList":44,"BARRASIMPLE":45,">":46,"EDirElemContent":47,"</":48,"LDirElemContent":49,"DirElemContent":50,"CommonContent":51,"PredefinedEntityRef":52,"CharRef":53,"DOT":54,"{":55,"Expr":56,"}":57,"&":58,"REF":59,"semicolon":60,"lt":61,"gt":62,"amp":63,"quot":64,"apos":65,"LAtr":66,"Atr":67,"=":68,"STRING_LITERAL":69,"ForClause":70,"for":71,"LForBinding":72,"ForBinding":73,"in":74,"SENTENCIA":75,"IfExpr":76,"entero":77,"to":78,"NativeFuntion":79,"XPARAM":80,"LPathExpresion":81,"PathExpresion":82,"NativeFunctionName":83,"uppercase":84,"lowercase":85,"tostring":86,"tonumber":87,"substring":88,"InitialClause":89,"ELIntermediateClause":90,"ReturnClause":91,"QuantifiedExpr":92,"LetClause":93,"let":94,"LLetBinding":95,"LetBinding":96,"LIntermediateClause":97,"IntermediateClause":98,"WhereClause":99,"OrderByClause":100,"where":101,"LComparisonExpr":102,"order":103,"by":104,"OrderSpecList":105,"OrderSpec":106,"OrderModifier":107,"ascending":108,"descending":109,"return":110,"if":111,"then":112,"else":113,"and":114,"ComparisonExpr":115,"or":116,"ComparisonValue":117,"numberLiteral":118,"XOPERACION":119,"-":120,"mod":121,"div":122,"GeneralComp":123,"ValueComp":124,"eq":125,"ne":126,"le":127,"ge":128,"!=":129,"<=":130,">=":131,"XCOMPARISON":132,"PARAMETRO":133,"LSENTENCIA":134,"|":135,"NODO_NO_PREDICABLE":136,"NODO_PREDICABLE":137,"predicate":138,"NODO":139,"BARRAS":140,"DOBLEDOT":141,"AXIS":142,"ATRIBUTO":143,"FUNCION_NO_OPERABLE":144,"node":145,"text":146,"[":147,"]":148,"arroba":149,"FUNCION_OPERABLE":150,"last":151,"position":152,"OPERACION":153,"DoubleLiteral":154,"NOMBRE_AXIS":155,"PARAMETRO_AXIS":156,"ancestor":157,"ancestor-or-self":158,"attribute":159,"child":160,"descendant":161,"descendant-or-self":162,"following":163,"following-sibling":164,"namespace":165,"parent":166,"preceding":167,"preceding-sibling":168,"self":169,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"declare",13:"variable",14:"$",15:"nodename",16:":=",19:"function",21:"lparen",23:"rparen",26:":",28:",",30:"as",34:"?",35:"*",36:"+",37:"xsString",38:"xsDate",39:"xsDecimal",40:"xsBoolean",43:"<",45:"BARRASIMPLE",46:">",48:"</",53:"CharRef",54:"DOT",55:"{",57:"}",58:"&",60:"semicolon",61:"lt",62:"gt",63:"amp",64:"quot",65:"apos",68:"=",69:"STRING_LITERAL",71:"for",74:"in",77:"entero",78:"to",84:"uppercase",85:"lowercase",86:"tostring",87:"tonumber",88:"substring",94:"let",101:"where",103:"order",104:"by",108:"ascending",109:"descending",110:"return",111:"if",112:"then",113:"else",114:"and",116:"or",120:"-",121:"mod",122:"div",125:"eq",126:"ne",127:"le",128:"ge",129:"!=",130:"<=",131:">=",135:"|",140:"BARRAS",141:"DOBLEDOT",145:"node",146:"text",147:"[",148:"]",149:"arroba",151:"last",152:"position",154:"DoubleLiteral",157:"ancestor",158:"ancestor-or-self",159:"attribute",160:"child",161:"descendant",162:"descendant-or-self",163:"following",164:"following-sibling",165:"namespace",166:"parent",167:"preceding",168:"preceding-sibling",169:"self"},
productions_: [0,[3,2],[3,2],[6,1],[6,1],[6,1],[9,2],[9,2],[11,5],[17,1],[12,7],[20,3],[20,1],[22,1],[22,0],[27,3],[27,1],[29,3],[24,2],[24,0],[31,2],[33,1],[33,1],[33,1],[33,0],[32,1],[32,1],[32,1],[32,1],[25,1],[8,1],[42,5],[42,8],[47,1],[47,0],[49,2],[49,1],[50,1],[50,1],[51,1],[51,1],[51,1],[51,1],[51,1],[51,1],[41,3],[52,3],[59,1],[59,1],[59,1],[59,1],[59,1],[44,1],[44,0],[66,2],[66,1],[67,3],[70,2],[72,3],[72,1],[73,4],[18,1],[18,1],[18,5],[18,1],[18,1],[18,1],[18,1],[81,3],[81,1],[82,3],[79,4],[83,1],[83,1],[83,1],[83,1],[83,1],[83,1],[7,3],[92,2],[89,1],[89,1],[93,2],[95,3],[95,1],[96,4],[90,1],[90,0],[97,2],[97,1],[98,1],[98,1],[98,1],[99,2],[100,3],[105,3],[105,1],[106,2],[107,1],[107,1],[107,0],[91,2],[76,8],[56,2],[56,1],[102,3],[102,3],[102,1],[115,3],[115,4],[80,1],[80,1],[80,1],[119,3],[119,3],[119,3],[119,3],[119,3],[119,3],[117,1],[117,1],[124,1],[124,1],[124,1],[124,1],[124,1],[124,1],[123,1],[123,1],[123,1],[123,1],[123,1],[123,1],[132,3],[4,1],[134,3],[134,1],[75,2],[75,3],[75,2],[139,1],[139,1],[139,1],[139,1],[139,1],[139,1],[139,1],[137,1],[137,1],[137,1],[137,1],[137,1],[137,1],[136,1],[136,1],[136,1],[144,3],[144,3],[138,3],[138,0],[143,2],[143,2],[150,3],[150,3],[133,1],[133,1],[133,1],[133,1],[133,1],[133,3],[133,1],[133,1],[133,1],[153,3],[153,3],[153,3],[153,3],[153,3],[153,3],[153,3],[153,3],[153,3],[153,3],[153,3],[153,3],[153,3],[153,3],[118,1],[118,1],[142,4],[155,1],[155,1],[155,1],[155,1],[155,1],[155,1],[155,1],[155,1],[155,1],[155,1],[155,1],[155,1],[155,1],[156,1],[156,1],[156,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 salida = []; typeof console !== 'undefined' ? console.log($$[$0-1]) : print($$[$0-1]);
          return $$[$0-1]; 
break;
case 113: case 173:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.Mas);
break;
case 114: case 174:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.Menos);
break;
case 115: case 175:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.Por);
break;
case 116: case 176:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.Mod);
break;
case 117: case 177:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.Div);
break;
case 134:
this.$ = salida; salida = []; return this.$;
break;
case 135:
 salida.push($$[$0]);
break;
case 136:
  salida.push($$[$0]);
break;
case 137:
this.$ = new sentenciaXpath($$[$0],null,$$[$0-1]);
break;
case 138:
this.$ = new sentenciaXpath($$[$0-1],$$[$0],$$[$0-2]);
break;
case 139:
      
                                if($$[$0-1] != TipoNodo.ID && $$[$0] != null) {console.log("Error toquen no debe llever predicado");}
                                else{
                                        this.$ = new sentenciaXpath($$[$0-1],$$[$0],null);
                                }
                        
break;
case 140: case 154:
this.$ = new NodoXpath(TipoNodo.Descendiente,$$[$0],null);
break;
case 141: case 155:
this.$ = new NodoXpath(TipoNodo.Raiz,$$[$0],null);
break;
case 142: case 147: case 205:
this.$ = new NodoXpath(TipoNodo.Asterisco,$$[$0],null);
break;
case 143: case 148: case 203:
this.$ = new NodoXpath(TipoNodo.ID,$$[$0],null);
break;
case 144:
this.$ = new NodoXpath(TipoNodo.NodoPadre,$$[$0],null); 
break;
case 145: case 152:
this.$ = new NodoXpath(TipoNodo.AutoReferencia,$$[$0],null);
break;
case 146: case 149: case 153: case 160: case 161: case 164: case 165: case 190: case 191: case 192: case 193: case 194: case 195: case 196: case 197: case 198: case 199: case 200: case 201: case 202: case 204:
this.$ = $$[$0];
break;
case 150:
this.$ = new NodoXpath(TipoNodo.Atributo,$$[$0],null);
break;
case 151:
this.$ = new NodoXpath(TipoNodo.NodoPadre,$$[$0],null);
break;
case 156:
this.$ = new NodoXpath(TipoNodo.Funcion_Node,$$[$0-2],null);
break;
case 157:
this.$ = new NodoXpath(TipoNodo.Funcion_Text,$$[$0-2],null);
break;
case 158:
this.$ = $$[$0-1];
break;
case 159:
this.$ = null;
break;
case 162:
this.$ = new ParametroOperacionXpath(null,$$[$0-2],TipoParametro.Funtion_Last); console.log($$[$0-2]);
break;
case 163:
this.$ = new ParametroOperacionXpath(null,$$[$0-2],TipoParametro.Funtion_Position);
break;
case 166:
this.$ = new ParametroOperacionXpath($$[$0],'',TipoParametro.Operacion);
break;
case 167:
this.$ = new ParametroOperacionXpath(null,$$[$0],TipoParametro.DosPuntos);
break;
case 168:
this.$ = new ParametroOperacionXpath(null,$$[$0],TipoParametro.Punto);
break;
case 169:
this.$ = new ParametroOperacionXpath(null,$$[$0-2] + '@' + $$[$0],TipoParametro.Nodo);
break;
case 170:
this.$ = new ParametroOperacionXpath(null,$$[$0],TipoParametro.Atributo);
break;
case 171:
this.$ = new ParametroOperacionXpath(null,$$[$0],TipoParametro.Cadena);
break;
case 172:
this.$ = new ParametroOperacionXpath(null,$$[$0],TipoParametro.Nodo);
break;
case 178:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.MenorIgual);
break;
case 179:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.MayorIgual);
break;
case 180:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.Mayor);
break;
case 181:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.Menor);
break;
case 182:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.Igual);
break;
case 183:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.Diferente);
break;
case 184:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.And);
break;
case 185:
this.$ = new OperacionXpath($$[$0-2],$$[$0],TipoOperador.Or);
break;
case 186:
this.$ = $$[$0-1].Operacion;
break;
case 187:
this.$ = new ParametroOperacionXpath(null,$$[$0],TipoParametro.Decimal);
break;
case 188:
this.$ = new ParametroOperacionXpath(null,$$[$0],TipoParametro.Entero);
break;
case 189:
this.$ = new NodoXpath(TipoNodo.Axis,$$[$0-3],$$[$0]); 
break;
}
},
table: [{3:1,4:2,6:3,7:5,8:6,9:7,10:[1,11],15:$V0,35:$V1,42:10,43:$V2,45:$V3,54:$V4,70:13,71:$V5,75:8,89:9,93:14,94:$V6,134:4,139:12,140:$V7,141:$V8,142:22,155:25,157:$V9,158:$Va,159:$Vb,160:$Vc,161:$Vd,162:$Ve,163:$Vf,164:$Vg,165:$Vh,166:$Vi,167:$Vj,168:$Vk,169:$Vl},{1:[3]},{5:[1,39]},{5:[1,40]},{5:[2,134],135:[1,41]},{5:[2,3]},{5:[2,4]},{5:[2,5]},o($Vm,[2,136],{155:25,136:42,137:43,144:44,142:49,143:50,15:$Vn,35:$Vo,45:$Vp,54:$Vq,140:$Vr,141:$Vs,145:$Vt,146:$Vu,149:$Vv,157:$V9,158:$Va,159:$Vb,160:$Vc,161:$Vd,162:$Ve,163:$Vf,164:$Vg,165:$Vh,166:$Vi,167:$Vj,168:$Vk,169:$Vl}),{70:13,71:$V5,89:59,90:56,93:14,94:$V6,97:57,98:58,99:60,100:61,101:$Vw,103:$Vx,110:[2,87]},o($Vy,[2,30]),{11:64,12:65,13:[1,66],19:[1,67]},o($Vz,$VA,{138:68,147:$VB}),o($VC,[2,80]),o($VC,[2,81]),{15:[1,70]},o($VD,[2,140]),o($VD,[2,141]),o($VD,[2,142]),o($VD,[2,143]),o($VD,[2,144]),o($VD,[2,145]),o($VD,[2,146]),{14:$VE,72:71,73:72},{14:$VF,95:74,96:75},{26:[1,77]},{26:[2,190]},{26:[2,191]},{26:[2,192]},{26:[2,193]},{26:[2,194]},{26:[2,195]},{26:[2,196]},{26:[2,197]},{26:[2,198]},{26:[2,199]},{26:[2,200]},{26:[2,201]},{26:[2,202]},{1:[2,1]},{1:[2,2]},{15:$V0,35:$V1,45:$V3,54:$V4,75:78,139:12,140:$V7,141:$V8,142:22,155:25,157:$V9,158:$Va,159:$Vb,160:$Vc,161:$Vd,162:$Ve,163:$Vf,164:$Vg,165:$Vh,166:$Vi,167:$Vj,168:$Vk,169:$Vl},o($Vz,[2,137]),o($Vz,$VA,{138:79,147:$VB}),o($Vz,[2,153]),o($Vz,[2,154]),o($Vz,[2,155]),o($VD,[2,147]),o($VD,[2,148]),o($VD,[2,149]),o($VD,[2,150]),o($VD,[2,151]),o($VD,[2,152]),{21:[1,80]},{21:[1,81]},{15:[1,82],35:[1,83]},{91:84,110:[1,85]},{70:13,71:$V5,89:59,93:14,94:$V6,98:86,99:60,100:61,101:$Vw,103:$Vx,110:[2,86]},o($VC,[2,89]),o($VC,[2,90]),o($VC,[2,91]),o($VC,[2,92]),{14:$VG,92:89,102:87,115:88},{104:[1,91]},{5:[2,6]},{5:[2,7]},{14:[1,92]},{15:$VH,20:93},o($Vz,[2,139]),{15:$VI,21:$VJ,54:$VK,69:$VL,77:$VM,118:97,133:95,141:$VN,143:102,149:$Vv,150:96,151:$VO,152:$VP,153:98,154:$VQ},o($VR,[2,53],{44:109,66:110,67:111,15:$VS}),o($VC,[2,57],{28:[1,113]}),o($VT,[2,59]),{15:[1,114]},o($VC,[2,82],{28:[1,115]}),o($VT,[2,84]),{15:[1,116]},{26:[1,117]},o($Vm,[2,135],{155:25,136:42,137:43,144:44,142:49,143:50,15:$Vn,35:$Vo,45:$Vp,54:$Vq,140:$Vr,141:$Vs,145:$Vt,146:$Vu,149:$Vv,157:$V9,158:$Va,159:$Vb,160:$Vc,161:$Vd,162:$Ve,163:$Vf,164:$Vg,165:$Vh,166:$Vi,167:$Vj,168:$Vk,169:$Vl}),o($Vz,[2,138]),{23:[1,118]},{23:[1,119]},o($VU,[2,160]),o($VU,[2,161]),o($VV,[2,78]),{7:121,8:124,14:$VW,15:$VH,18:120,20:139,21:$VX,42:10,43:$V2,70:13,71:$V5,76:122,77:$VM,79:125,80:126,81:127,82:133,83:129,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:9,92:131,93:14,94:$V6,111:$V11,118:130,119:132,154:$VQ},o($VC,[2,88]),o($VC,[2,93],{114:[1,141],116:[1,142]}),o($V21,[2,107]),{15:$V0,35:$V1,43:$V31,45:$V3,46:$V41,54:$V4,61:$V51,62:$V61,68:$V71,75:144,117:143,123:145,124:146,125:$V81,126:$V91,127:$Va1,128:$Vb1,129:$Vc1,130:$Vd1,131:$Ve1,139:12,140:$V7,141:$V8,142:22,155:25,157:$V9,158:$Va,159:$Vb,160:$Vc,161:$Vd,162:$Ve,163:$Vf,164:$Vg,165:$Vh,166:$Vi,167:$Vj,168:$Vk,169:$Vl},{15:[1,159]},{7:121,8:124,14:$VW,15:$VH,18:162,20:139,21:$VX,42:10,43:$V2,70:13,71:$V5,76:122,77:$VM,79:125,80:126,81:127,82:133,83:129,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:9,92:131,93:14,94:$V6,105:160,106:161,111:$V11,118:130,119:132,154:$VQ},{15:[1,163]},{21:[1,164]},{21:[2,12],26:[1,165]},{35:$Vf1,36:$Vg1,43:$Vh1,46:$Vi1,68:$Vj1,114:$Vk1,116:$Vl1,120:$Vm1,121:$Vn1,122:$Vo1,129:$Vp1,130:$Vq1,131:$Vr1,148:[1,166]},o($Vs1,[2,164]),o($Vs1,[2,165]),o($Vs1,[2,166]),o($Vs1,[2,167]),o($Vs1,[2,168]),o($Vs1,[2,172],{45:[1,180]}),o($Vs1,[2,170]),o($Vs1,[2,171]),{21:[1,181]},{21:[1,182]},o($Vt1,[2,187]),o($Vt1,$Vu1),{15:$VI,21:$VJ,54:$VK,69:$VL,77:$VM,118:97,133:183,141:$VN,143:102,149:$Vv,150:96,151:$VO,152:$VP,153:98,154:$VQ},{45:[1,184],46:[1,185]},o($VR,[2,52],{67:186,15:$VS}),o($Vv1,[2,55]),{68:[1,187]},{14:$VE,73:188},{74:[1,189]},{14:$VF,96:190},{16:[1,191]},{15:[1,193],35:[1,195],144:194,145:$Vt,146:$Vu,156:192},o($VD,[2,156]),o($VD,[2,157]),o($VV,[2,101]),o($VV,[2,61]),o($VV,[2,62]),{14:$VG,21:$Vw1,77:[1,196],80:197,92:131,118:130,119:132,154:$VQ},o($VV,[2,64]),o($VV,[2,65]),o($VV,[2,66],{35:$Vx1,36:$Vy1,120:$Vz1,121:$VA1,122:$VB1}),o([5,14,15,21,23,43,57,71,77,84,85,86,87,88,94,101,103,108,109,110,111,113,114,116,154],[2,67],{28:[1,204]}),{21:[1,205]},{21:[1,206]},o($VC1,[2,110]),o($VC1,[2,111]),o($VC1,[2,112]),o($VV,[2,69]),{21:[2,72]},{21:[2,73]},{21:[2,74]},{21:[2,75]},{21:[2,76]},{21:[2,77]},{15:[1,207]},{14:$VG,92:89,115:208},{14:$VG,92:89,115:209},{7:121,8:124,14:$VW,15:$VH,18:210,20:139,21:$VX,42:10,43:$V2,70:13,71:$V5,76:122,77:$VM,79:125,80:126,81:127,82:133,83:129,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:9,92:131,93:14,94:$V6,111:$V11,118:130,119:132,154:$VQ},{15:$Vn,35:$Vo,43:$V31,45:$Vp,46:$V41,54:$Vq,61:$V51,62:$V61,68:$V71,117:211,123:145,124:146,125:$V81,126:$V91,127:$Va1,128:$Vb1,129:$Vc1,130:$Vd1,131:$Ve1,136:42,137:43,140:$Vr,141:$Vs,142:49,143:50,144:44,145:$Vt,146:$Vu,149:$Vv,155:25,157:$V9,158:$Va,159:$Vb,160:$Vc,161:$Vd,162:$Ve,163:$Vf,164:$Vg,165:$Vh,166:$Vi,167:$Vj,168:$Vk,169:$Vl},o($VD1,[2,119]),o($VD1,[2,120]),o($VD1,[2,127]),o($VD1,[2,128]),o($VD1,[2,129]),o($VD1,[2,130]),o($VD1,[2,131]),o($VD1,[2,132]),o($VD1,[2,121]),o($VD1,[2,122]),o($VD1,[2,123]),o($VD1,[2,124]),o($VD1,[2,125]),o($VD1,[2,126]),o([5,14,15,21,23,28,35,36,43,45,46,54,57,61,62,68,71,77,84,85,86,87,88,94,101,103,108,109,110,111,113,114,116,120,121,122,125,126,127,128,129,130,131,140,141,154,157,158,159,160,161,162,163,164,165,166,167,168,169],$VE1),o($VC,[2,94],{28:[1,212]}),o($VT,[2,96]),o($VT,[2,100],{107:213,108:[1,214],109:[1,215]}),{16:[1,216]},{14:$VF1,22:217,23:[2,14],27:218,29:219},{15:[1,221]},o($Vz,[2,158]),{15:$VI,21:$VJ,54:$VK,69:$VL,77:$VM,118:97,133:222,141:$VN,143:102,149:$Vv,150:96,151:$VO,152:$VP,153:98,154:$VQ},{15:$VI,21:$VJ,54:$VK,69:$VL,77:$VM,118:97,133:223,141:$VN,143:102,149:$Vv,150:96,151:$VO,152:$VP,153:98,154:$VQ},{15:$VI,21:$VJ,54:$VK,69:$VL,77:$VM,118:97,133:224,141:$VN,143:102,149:$Vv,150:96,151:$VO,152:$VP,153:98,154:$VQ},{15:$VI,21:$VJ,54:$VK,69:$VL,77:$VM,118:97,133:225,141:$VN,143:102,149:$Vv,150:96,151:$VO,152:$VP,153:98,154:$VQ},{15:$VI,21:$VJ,54:$VK,69:$VL,77:$VM,118:97,133:226,141:$VN,143:102,149:$Vv,150:96,151:$VO,152:$VP,153:98,154:$VQ},{15:$VI,21:$VJ,54:$VK,69:$VL,77:$VM,118:97,133:227,141:$VN,143:102,149:$Vv,150:96,151:$VO,152:$VP,153:98,154:$VQ},{15:$VI,21:$VJ,54:$VK,69:$VL,77:$VM,118:97,133:228,141:$VN,143:102,149:$Vv,150:96,151:$VO,152:$VP,153:98,154:$VQ},{15:$VI,21:$VJ,54:$VK,69:$VL,77:$VM,118:97,133:229,141:$VN,143:102,149:$Vv,150:96,151:$VO,152:$VP,153:98,154:$VQ},{15:$VI,21:$VJ,54:$VK,69:$VL,77:$VM,118:97,133:230,141:$VN,143:102,149:$Vv,150:96,151:$VO,152:$VP,153:98,154:$VQ},{15:$VI,21:$VJ,54:$VK,69:$VL,77:$VM,118:97,133:231,141:$VN,143:102,149:$Vv,150:96,151:$VO,152:$VP,153:98,154:$VQ},{15:$VI,21:$VJ,54:$VK,69:$VL,77:$VM,118:97,133:232,141:$VN,143:102,149:$Vv,150:96,151:$VO,152:$VP,153:98,154:$VQ},{15:$VI,21:$VJ,54:$VK,69:$VL,77:$VM,118:97,133:233,141:$VN,143:102,149:$Vv,150:96,151:$VO,152:$VP,153:98,154:$VQ},{15:$VI,21:$VJ,54:$VK,69:$VL,77:$VM,118:97,133:234,141:$VN,143:102,149:$Vv,150:96,151:$VO,152:$VP,153:98,154:$VQ},{143:235,149:$Vv},{23:[1,236]},{23:[1,237]},{23:[1,238],35:$Vf1,36:$Vg1,43:$Vh1,46:$Vi1,68:$Vj1,114:$Vk1,116:$Vl1,120:$Vm1,121:$Vn1,122:$Vo1,129:$Vp1,130:$Vq1,131:$Vr1},{46:[1,239]},{8:243,15:$VG1,26:$VH1,41:247,42:10,43:$V2,47:240,48:[2,34],49:241,50:242,51:244,52:245,53:$VI1,54:$VJ1,55:$VK1,58:$VL1},o($Vv1,[2,54]),{69:[1,253]},o($VT,[2,58]),{15:$V0,35:$V1,45:$V3,54:$V4,75:254,139:12,140:$V7,141:$V8,142:22,155:25,157:$V9,158:$Va,159:$Vb,160:$Vc,161:$Vd,162:$Ve,163:$Vf,164:$Vg,165:$Vh,166:$Vi,167:$Vj,168:$Vk,169:$Vl},o($VT,[2,83]),{7:121,8:124,14:$VW,15:$VH,18:255,20:139,21:$VX,42:10,43:$V2,70:13,71:$V5,76:122,77:$VM,79:125,80:126,81:127,82:133,83:129,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:9,92:131,93:14,94:$V6,111:$V11,118:130,119:132,154:$VQ},o($VD,[2,189]),o($VD,[2,203]),o($VD,[2,204]),o($VD,[2,205]),o([23,35,36,120,121,122],$Vu1,{78:[1,256]}),{23:[1,257],35:$Vx1,36:$Vy1,120:$Vz1,121:$VA1,122:$VB1},{14:$VG,21:$Vw1,77:$VM,80:197,92:131,118:130,119:132,154:$VQ},{14:$VG,21:$Vw1,77:$VM,80:258,92:131,118:130,119:132,154:$VQ},{14:$VG,21:$Vw1,77:$VM,80:259,92:131,118:130,119:132,154:$VQ},{14:$VG,21:$Vw1,77:$VM,80:260,92:131,118:130,119:132,154:$VQ},{14:$VG,21:$Vw1,77:$VM,80:261,92:131,118:130,119:132,154:$VQ},{14:$VG,21:$Vw1,77:$VM,80:262,92:131,118:130,119:132,154:$VQ},{14:[1,264],82:263},{7:121,8:124,14:$VW,15:$VH,18:266,20:139,21:$VX,42:10,43:$V2,56:265,70:13,71:$V5,76:122,77:$VM,79:125,80:126,81:127,82:133,83:129,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:9,92:131,93:14,94:$V6,111:$V11,118:130,119:132,154:$VQ},{7:121,8:124,14:$VW,15:$VH,18:267,20:139,21:$VX,42:10,43:$V2,70:13,71:$V5,76:122,77:$VM,79:125,80:126,81:127,82:133,83:129,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:9,92:131,93:14,94:$V6,111:$V11,118:130,119:132,154:$VQ},o([5,14,21,23,28,36,43,57,71,77,84,85,86,87,88,94,101,103,108,109,110,111,113,114,116,120,121,122,154],$VE1,{139:12,142:22,155:25,75:268,15:$V0,35:$V1,45:$V3,54:$V4,140:$V7,141:$V8,157:$V9,158:$Va,159:$Vb,160:$Vc,161:$Vd,162:$Ve,163:$Vf,164:$Vg,165:$Vh,166:$Vi,167:$Vj,168:$Vk,169:$Vl}),o($V21,[2,105]),o($V21,[2,106]),o($V21,[2,108]),{7:121,8:124,14:$VW,15:$VH,18:269,20:139,21:$VX,42:10,43:$V2,70:13,71:$V5,76:122,77:$VM,79:125,80:126,81:127,82:133,83:129,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:9,92:131,93:14,94:$V6,111:$V11,118:130,119:132,154:$VQ},{7:121,8:124,14:$VW,15:$VH,18:162,20:139,21:$VX,42:10,43:$V2,70:13,71:$V5,76:122,77:$VM,79:125,80:126,81:127,82:133,83:129,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:9,92:131,93:14,94:$V6,106:270,111:$V11,118:130,119:132,154:$VQ},o($VT,[2,97]),o($VT,[2,98]),o($VT,[2,99]),{7:121,8:124,14:$VW,15:$VH,17:271,18:272,20:139,21:$VX,42:10,43:$V2,70:13,71:$V5,76:122,77:$VM,79:125,80:126,81:127,82:133,83:129,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:9,92:131,93:14,94:$V6,111:$V11,118:130,119:132,154:$VQ},{23:[1,273]},{23:[2,13],28:[1,274]},o($VM1,[2,16]),{15:[1,275]},{21:[2,11]},o($VN1,[2,173],{35:$Vf1,121:$Vn1,122:$Vo1}),o($VN1,[2,174],{35:$Vf1,121:$Vn1,122:$Vo1}),o($Vs1,[2,175]),o($Vs1,[2,176]),o($Vs1,[2,177]),o($VO1,[2,178],{35:$Vf1,36:$Vg1,120:$Vm1,121:$Vn1,122:$Vo1}),o($VO1,[2,179],{35:$Vf1,36:$Vg1,120:$Vm1,121:$Vn1,122:$Vo1}),o($VO1,[2,180],{35:$Vf1,36:$Vg1,120:$Vm1,121:$Vn1,122:$Vo1}),o($VO1,[2,181],{35:$Vf1,36:$Vg1,120:$Vm1,121:$Vn1,122:$Vo1}),o($VO1,[2,182],{35:$Vf1,36:$Vg1,120:$Vm1,121:$Vn1,122:$Vo1}),o($VO1,[2,183],{35:$Vf1,36:$Vg1,120:$Vm1,121:$Vn1,122:$Vo1}),o([23,114,116,148],[2,184],{35:$Vf1,36:$Vg1,43:$Vh1,46:$Vi1,68:$Vj1,120:$Vm1,121:$Vn1,122:$Vo1,129:$Vp1,130:$Vq1,131:$Vr1}),o([23,116,148],[2,185],{35:$Vf1,36:$Vg1,43:$Vh1,46:$Vi1,68:$Vj1,114:$Vk1,120:$Vm1,121:$Vn1,122:$Vo1,129:$Vp1,130:$Vq1,131:$Vr1}),o($Vs1,[2,169]),o($Vs1,[2,162]),o($Vs1,[2,163]),o($Vs1,[2,186]),o($Vy,[2,31]),{48:[1,276]},{8:243,15:$VG1,26:$VH1,41:247,42:10,43:$V2,48:[2,33],50:277,51:244,52:245,53:$VI1,54:$VJ1,55:$VK1,58:$VL1},o($VP1,[2,36]),o($VP1,[2,37]),o($VP1,[2,38]),o($VP1,[2,39]),o($VP1,[2,40]),o($VP1,[2,41]),o($VP1,[2,42]),o($VP1,[2,43]),o($VP1,[2,44]),{59:278,61:[1,279],62:[1,280],63:[1,281],64:[1,282],65:[1,283]},{7:121,8:124,14:$VW,15:$VH,18:266,20:139,21:$VX,42:10,43:$V2,56:284,70:13,71:$V5,76:122,77:$VM,79:125,80:126,81:127,82:133,83:129,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:9,92:131,93:14,94:$V6,111:$V11,118:130,119:132,154:$VQ},o($Vv1,[2,56]),o($VT,[2,60],{155:25,136:42,137:43,144:44,142:49,143:50,15:$Vn,35:$Vo,45:$Vp,54:$Vq,140:$Vr,141:$Vs,145:$Vt,146:$Vu,149:$Vv,157:$V9,158:$Va,159:$Vb,160:$Vc,161:$Vd,162:$Ve,163:$Vf,164:$Vg,165:$Vh,166:$Vi,167:$Vj,168:$Vk,169:$Vl}),o($VT,[2,85]),{77:[1,285]},o($VC1,[2,118]),o($VQ1,[2,113],{35:$Vx1,121:$VA1,122:$VB1}),o($VQ1,[2,114],{35:$Vx1,121:$VA1,122:$VB1}),o($VC1,[2,115]),o($VC1,[2,116]),o($VC1,[2,117]),o($VV,[2,68]),{15:[1,286]},{7:121,8:124,14:$VW,15:$VH,18:288,20:139,21:$VX,23:[1,287],42:10,43:$V2,70:13,71:$V5,76:122,77:$VM,79:125,80:126,81:127,82:133,83:129,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:9,92:131,93:14,94:$V6,111:$V11,118:130,119:132,154:$VQ},o($VR1,[2,104]),{23:[1,289]},o([5,14,21,23,28,43,57,71,77,84,85,86,87,88,94,101,103,108,109,110,111,113,114,116,154],[2,70],{155:25,136:42,137:43,144:44,142:49,143:50,15:$Vn,35:$Vo,45:$Vp,54:$Vq,140:$Vr,141:$Vs,145:$Vt,146:$Vu,149:$Vv,157:$V9,158:$Va,159:$Vb,160:$Vc,161:$Vd,162:$Ve,163:$Vf,164:$Vg,165:$Vh,166:$Vi,167:$Vj,168:$Vk,169:$Vl}),o($V21,[2,109]),o($VT,[2,95]),{5:[2,8]},{5:[2,9]},{24:290,30:$VS1,55:$VT1},{14:$VF1,29:292},o($VM1,$VT1,{24:293,30:$VS1}),{15:[1,294]},o($VP1,[2,35]),{60:[1,295]},{60:[2,47]},{60:[2,48]},{60:[2,49]},{60:[2,50]},{60:[2,51]},{7:121,8:124,14:$VW,15:$VH,18:288,20:139,21:$VX,42:10,43:$V2,57:[1,296],70:13,71:$V5,76:122,77:$VM,79:125,80:126,81:127,82:133,83:129,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:9,92:131,93:14,94:$V6,111:$V11,118:130,119:132,154:$VQ},{23:[1,297]},{15:$V0,35:$V1,45:$V3,54:$V4,75:268,139:12,140:$V7,141:$V8,142:22,155:25,157:$V9,158:$Va,159:$Vb,160:$Vc,161:$Vd,162:$Ve,163:$Vf,164:$Vg,165:$Vh,166:$Vi,167:$Vj,168:$Vk,169:$Vl},{112:[1,298]},o($VR1,[2,103]),o($VV,[2,71]),{25:299,41:300,55:$VK1},{31:301,32:302,37:[1,303],38:[1,304],39:[1,305],40:[1,306]},o($VM1,[2,15]),o($VM1,[2,17]),{46:[1,307]},o($VP1,[2,46]),o([5,15,26,43,48,53,54,55,58],[2,45]),o($VV,[2,63]),{7:121,8:124,14:$VW,15:$VH,18:308,20:139,21:$VX,42:10,43:$V2,70:13,71:$V5,76:122,77:$VM,79:125,80:126,81:127,82:133,83:129,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:9,92:131,93:14,94:$V6,111:$V11,118:130,119:132,154:$VQ},{5:[2,10]},{5:[2,29]},o($VU1,[2,18]),o($VU1,[2,24],{33:309,34:[1,310],35:[1,311],36:[1,312]}),o($VV1,[2,25]),o($VV1,[2,26]),o($VV1,[2,27]),o($VV1,[2,28]),o($Vy,[2,32]),{113:[1,313]},o($VU1,[2,20]),o($VU1,[2,21]),o($VU1,[2,22]),o($VU1,[2,23]),{7:121,8:124,14:$VW,15:$VH,18:314,20:139,21:$VX,42:10,43:$V2,70:13,71:$V5,76:122,77:$VM,79:125,80:126,81:127,82:133,83:129,84:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,89:9,92:131,93:14,94:$V6,111:$V11,118:130,119:132,154:$VQ},o($VV,[2,102])],
defaultActions: {5:[2,3],6:[2,4],7:[2,5],26:[2,190],27:[2,191],28:[2,192],29:[2,193],30:[2,194],31:[2,195],32:[2,196],33:[2,197],34:[2,198],35:[2,199],36:[2,200],37:[2,201],38:[2,202],39:[2,1],40:[2,2],64:[2,6],65:[2,7],134:[2,72],135:[2,73],136:[2,74],137:[2,75],138:[2,76],139:[2,77],221:[2,11],271:[2,8],272:[2,9],279:[2,47],280:[2,48],281:[2,49],282:[2,50],283:[2,51],299:[2,10],300:[2,29]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

        const {sentenciaXpath} = require("../Estructuras/sentenciaXpath.js");
        const {parametroXpath} = require("../Estructuras/parametroXpath.js");
        const {ParametroOperacionXpath} = require("../Estructuras/ParametroOperacionXpath.js");
        const {OperacionXpath} = require("../Estructuras/OperacionXpath.js");
        const {NodoXpath} = require("../Estructuras/NodoXpath.js");
        const {TipoParametro, TipoOperador, TipoNodo} = require("../Estructuras/tipificacion.js");
        let salida = [];
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 140;
break;
case 2:// comentario simple línea
break;
case 3:// comentario multiple líneas
break;
case 4:return 77
break;
case 5:return 69
break;
case 6:return 'CARACTER_LITERAL'
break;
case 7:return 158;
break;
case 8:return 157;
break;
case 9:return 159;
break;
case 10:return 160;
break;
case 11:return 162;
break;
case 12:return 161;
break;
case 13:return 164;
break;
case 14:return 163;
break;
case 15:return 165;
break;
case 16:return 166;
break;
case 17:return 168;
break;
case 18:return 167;
break;
case 19:return 169;
break;
case 20:return 151;
break;
case 21:return 152;
break;
case 22:return 146;
break;
case 23:return 145;
break;
case 24:return 122;
break;
case 25:return 121;
break;
case 26:return 36;
break;
case 27:return 120;
break;
case 28:return 35;
break;
case 29:return 14;
break;
case 30:return 58;
break;
case 31:return 'comillas';
break;
case 32:return 48;
break;
case 33:return 130;
break;
case 34:return 131;
break;
case 35:return 43;
break;
case 36:return 46;
break;
case 37:return 68;
break;
case 38:return 'equal';
break;
case 39:return 129;
break;
case 40:return 16;
break;
case 41:return 114;
break;
case 42:return 116;
break;
case 43:return 'not';
break;
case 44:return 71;
break;
case 45:return 74;
break;
case 46:return 101;
break;
case 47:return 110;
break;
case 48:return 103;
break;
case 49:return 104;
break;
case 50:return 125
break;
case 51:return 126
break;
case 52:return 61
break;
case 53:return 127
break;
case 54:return 62
break;
case 55:return 128
break;
case 56:return 94
break;
case 57:return 78
break;
case 58:return 108
break;
case 59:return 109
break;
case 60:return 63
break;
case 61:return 64
break;
case 62:return 65
break;
case 63:return 85
break;
case 64:return 84
break;
case 65:return 86
break;
case 66:return 87
break;
case 67:return 88
break;
case 68:return 10
break;
case 69:return 13
break;
case 70:return 19
break;
case 71:return 37
break;
case 72:return 38
break;
case 73:return 39
break;
case 74:return 40
break;
case 75:return 30
break;
case 76:return 26;
break;
case 77:return 28;
break;
case 78:return 34;
break;
case 79:return 60;
break;
case 80:return 112;
break;
case 81:return 113;
break;
case 82:return 147;
break;
case 83:return 148;
break;
case 84:return 55;
break;
case 85:return 57;
break;
case 86:return 149;
break;
case 87:return 114;
break;
case 88:return 135;
break;
case 89:return 21;
break;
case 90:return 23;
break;
case 91:return 154;
break;
case 92:return 'IntegerLiteral';
break;
case 93:return 'string';
break;
case 94:return 15;
break;
case 95:return 45;
break;
case 96:return 141
break;
case 97:return 54
break;
case 98:return 53;
break;
case 99:return 5
break;
case 100:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:([0-9]+(\.[0-9]+)?))/i,/^(?:(("(\\"|[^"]|\n)*")))/i,/^(?:(('[^']*')))/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:following-sibling\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:preceding-sibling\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:last\b)/i,/^(?:position\b)/i,/^(?:text\b)/i,/^(?:node\b)/i,/^(?:div\b)/i,/^(?:mod\b)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\$)/i,/^(?:&)/i,/^(?:")/i,/^(?:<\/)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?::=)/i,/^(?:and\b)/i,/^(?:or\b)/i,/^(?:!)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:where\b)/i,/^(?:return\b)/i,/^(?:order\b)/i,/^(?:by\b)/i,/^(?:eq\b)/i,/^(?:ne\b)/i,/^(?:lt\b)/i,/^(?:le\b)/i,/^(?:gt\b)/i,/^(?:ge\b)/i,/^(?:let\b)/i,/^(?:to\b)/i,/^(?:ascending\b)/i,/^(?:descending\b)/i,/^(?:amp\b)/i,/^(?:quot\b)/i,/^(?:apos\b)/i,/^(?:lower-case\b)/i,/^(?:upper-case\b)/i,/^(?:string\b)/i,/^(?:number\b)/i,/^(?:substring\b)/i,/^(?:declare\b)/i,/^(?:variable\b)/i,/^(?:function\b)/i,/^(?:xs:string\b)/i,/^(?:xs:date\b)/i,/^(?:xs:decimal\b)/i,/^(?:xs:boolean\b)/i,/^(?:as\b)/i,/^(?::)/i,/^(?:,)/i,/^(?:\?)/i,/^(?:;)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:@)/i,/^(?:&&)/i,/^(?:\|)/i,/^(?:\()/i,/^(?:\))/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:"[^\"]*")/i,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ]*)/i,/^(?:\/)/i,/^(?:\.\.)/i,/^(?:\.)/i,/^(?:[a-zA-Z0-9áéíúóàèìòÁÉÍÓÚÀÈÌÒÙñÑ_!@#$%+^'`"*()/¡:;.,~-¤Ã-])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = xpathGramatica;
exports.Parser = xpathGramatica.Parser;
exports.parse = function () { return xpathGramatica.parse.apply(xpathGramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}