/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XQuery_GramaticaAsc = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,12],$V2=[1,13],$V3=[1,14],$V4=[1,15],$V5=[2,40],$V6=[54,56,59,61,62],$V7=[1,27],$V8=[30,31],$V9=[1,31],$Va=[5,37],$Vb=[1,41],$Vc=[22,54,56,59,61,62],$Vd=[15,30,31],$Ve=[1,67],$Vf=[1,71],$Vg=[1,68],$Vh=[1,69],$Vi=[1,70],$Vj=[2,79],$Vk=[1,76],$Vl=[1,88],$Vm=[1,90],$Vn=[1,82],$Vo=[1,83],$Vp=[1,84],$Vq=[1,85],$Vr=[1,86],$Vs=[1,87],$Vt=[1,94],$Vu=[1,93],$Vv=[1,91],$Vw=[1,92],$Vx=[22,54,56,59,61,62,81],$Vy=[1,102],$Vz=[1,105],$VA=[1,107],$VB=[1,106],$VC=[5,18,37,67],$VD=[15,28,41,42,43],$VE=[28,36],$VF=[5,18,22,28,31,37,54,56,59,60,61,62,67,81,86,90,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],$VG=[1,122],$VH=[1,125],$VI=[1,126],$VJ=[1,127],$VK=[1,128],$VL=[1,129],$VM=[1,130],$VN=[1,131],$VO=[1,132],$VP=[1,133],$VQ=[1,134],$VR=[1,135],$VS=[1,136],$VT=[1,137],$VU=[1,145],$VV=[1,147],$VW=[1,148],$VX=[1,140],$VY=[1,141],$VZ=[1,142],$V_=[1,143],$V$=[1,144],$V01=[1,146],$V11=[1,149],$V21=[1,150],$V31=[1,151],$V41=[1,152],$V51=[1,153],$V61=[1,154],$V71=[1,155],$V81=[1,156],$V91=[1,157],$Va1=[1,158],$Vb1=[18,28,31,54,56,59,60,61,62,86,90,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],$Vc1=[5,18,22,28,30,31,37,54,56,59,60,61,62,67,81,86,90,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],$Vd1=[2,112],$Ve1=[1,174],$Vf1=[1,203],$Vg1=[18,22],$Vh1=[18,28,31,54,56,59,60,61,62,86,111,112,114,115,116,117,118,120,121,122,123,124,125],$Vi1=[18,28,31,54,56,59,60,61,62,86,114,115,116,117,118,120,121,122,123,124,125],$Vj1=[1,265],$Vk1=[1,268],$Vl1=[1,266],$Vm1=[1,267],$Vn1=[1,285],$Vo1=[1,286],$Vp1=[1,287],$Vq1=[5,18,22],$Vr1=[1,298],$Vs1=[1,302],$Vt1=[1,303],$Vu1=[5,37,67];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"INSTRUCCIONES":4,"EOF":5,"DEFINICIONXQUERY":6,"ETIQUETA":7,"LISTADEFINICIONES":8,"FLWOR":9,"USERFUNCTION":10,"declare":11,"function":12,"PREFIX":13,"dospuntos":14,"identifier":15,"parA":16,"PARAMETROS":17,"parC":18,"as":19,"DATATYPE":20,"LISTAPARAM":21,"coma":22,"PARAM":23,"decimal":24,"string":25,"boolean":26,"local":27,"lt":28,"LISTAATRIBUTOS":29,"diag":30,"gt":31,"TEXTCONTENT":32,"HTML":33,"LISTAVARIABLECALL":34,"VARIABLECALL":35,"llaveA":36,"llaveC":37,"dolar":38,"LISTANODOS":39,"TEXT":40,"content":41,"DoubleLiteral":42,"IntegerLiteral":43,"LISTAOP":44,"RETURNTYPE":45,"LISTADECLARACIONES":46,"DECLARACIONFOR":47,"in":48,"LISTACONSULTAS":49,"to":50,"at":51,"LISTAOPCIONALES":52,"OPCIONAL":53,"where":54,"EXPRESION":55,"order":56,"by":57,"LISTASORT":58,"let":59,"igual":60,"for":61,"return":62,"IFDEF":63,"if":64,"then":65,"TIPOIF":66,"else":67,"CONDICION":68,"DECRETURN":69,"FUNCIONXQUERY":70,"data":71,"uppercase":72,"substring":73,"ATRIBUTOS":74,"ATRIBUTO":75,"asig":76,"cadena":77,"cadena2":78,"SORT":79,"CONSULTA":80,"andSelect":81,"MASTIPOS":82,"NODO":83,"TIPONODO":84,"corA":85,"corC":86,"AXES":87,"attr":88,"PREDICATE":89,"asterisco":90,"dot":91,"FUNCIONES":92,"ancestor":93,"NODETEST":94,"ancestorSelf":95,"attribute":96,"child":97,"descendant":98,"descendantSelf":99,"following":100,"followingSib":101,"namespace":102,"parent":103,"preced":104,"precedSib":105,"self":106,"textFunc":107,"nodeFunc":108,"PRIMITIVA":109,"OPERACION":110,"mas":111,"menos":112,"div":113,"lte":114,"gte":115,"nequal":116,"or":117,"and":118,"mod":119,"reserv_eq":120,"reserv_ne":121,"reserv_lt":122,"reserv_le":123,"reserv_gt":124,"reserv_ge":125,"lastFunc":126,"positionFunc":127,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"declare",12:"function",14:"dospuntos",15:"identifier",16:"parA",18:"parC",19:"as",22:"coma",24:"decimal",25:"string",26:"boolean",27:"local",28:"lt",30:"diag",31:"gt",33:"HTML",36:"llaveA",37:"llaveC",38:"dolar",41:"content",42:"DoubleLiteral",43:"IntegerLiteral",48:"in",50:"to",51:"at",54:"where",56:"order",57:"by",59:"let",60:"igual",61:"for",62:"return",64:"if",65:"then",67:"else",71:"data",72:"uppercase",73:"substring",76:"asig",77:"cadena",78:"cadena2",81:"andSelect",85:"corA",86:"corC",88:"attr",90:"asterisco",91:"dot",93:"ancestor",95:"ancestorSelf",96:"attribute",97:"child",98:"descendant",99:"descendantSelf",100:"following",101:"followingSib",102:"namespace",103:"parent",104:"preced",105:"precedSib",106:"self",107:"textFunc",108:"nodeFunc",111:"mas",112:"menos",113:"div",114:"lte",115:"gte",116:"nequal",117:"or",118:"and",119:"mod",120:"reserv_eq",121:"reserv_ne",122:"reserv_lt",123:"reserv_le",124:"reserv_gt",125:"reserv_ge",126:"lastFunc",127:"positionFunc"},
productions_: [0,[3,2],[4,1],[4,1],[8,2],[8,1],[6,1],[6,1],[10,10],[17,1],[17,0],[21,3],[21,1],[23,3],[20,1],[20,1],[20,1],[13,1],[7,5],[7,9],[7,9],[7,8],[7,9],[34,2],[34,1],[35,3],[35,5],[32,2],[32,1],[40,1],[40,1],[40,1],[40,1],[9,2],[46,3],[46,1],[47,4],[47,8],[47,7],[44,1],[44,0],[52,2],[52,1],[53,5],[53,6],[53,3],[53,6],[53,10],[53,2],[45,4],[45,2],[45,2],[63,11],[66,3],[66,1],[66,2],[68,1],[68,1],[69,5],[69,3],[69,3],[70,6],[70,6],[70,10],[29,1],[29,0],[74,2],[74,1],[75,3],[75,3],[58,3],[58,1],[79,3],[49,3],[49,1],[80,2],[80,2],[80,1],[39,2],[39,0],[83,2],[83,3],[83,2],[83,3],[84,1],[84,4],[84,1],[84,1],[82,3],[82,3],[82,2],[82,3],[82,2],[82,1],[87,4],[87,4],[87,4],[87,4],[87,4],[87,4],[87,4],[87,4],[87,4],[87,4],[87,4],[87,4],[87,4],[94,2],[94,2],[94,2],[94,2],[89,3],[89,0],[55,1],[55,1],[110,3],[110,3],[110,3],[110,3],[110,3],[110,3],[110,3],[110,3],[110,3],[110,3],[110,3],[110,3],[110,3],[110,3],[110,3],[110,3],[110,3],[110,3],[110,3],[110,3],[109,1],[109,1],[109,1],[109,1],[109,2],[109,2],[109,1],[109,2],[109,1],[92,1],[92,1],[92,1],[92,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = $$[$0-1]; return this.$; 
break;
case 2: case 3: case 6: case 7: case 9: case 14: case 15: case 16: case 17: case 28: case 39: case 54: case 57: case 64: case 77: case 146:
 this.$ = $$[$0];
break;
case 4:
 $$[$0-1].push($$[$0]);this.$ = $$[$0-1];
break;
case 5: case 12: case 67: case 71:
 this.$ = [$$[$0]];
break;
case 8:
 this.$ = $$[$0-9];
break;
case 10:
 this.$ = ""
break;
case 11:
 $$[$0-2].push($$[$0-2]); this.$ = $$[$0-2];
break;
case 13:
 this.$ = $$[$0-2];
break;
case 18:
 this.$ = new Html($$[$0-3], $$[$0-2], '', [], [], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 19:
 this.$ = new Html($$[$0-7], $$[$0-6], $$[$0-4], [], [], false, _$[$0-8].first_line, _$[$0-8].first_column)
break;
case 20:
 this.$ = new Html($$[$0-7], $$[$0-6], '', $$[$0-4], [], false, _$[$0-8].first_line, _$[$0-8].first_column)
break;
case 21:
 this.$ = new Html($$[$0-6], $$[$0-5], '', [], [],  false, _$[$0-7].first_line, _$[$0-7].first_column)
break;
case 22:
 this.$ = new Html($$[$0-7], $$[$0-6], '', [], $$[$0-4], true, _$[$0-8].first_line, _$[$0-8].first_column)
break;
case 23: case 41: case 66:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 24: case 42:
 this.$ = [$$[$0]]
break;
case 25:
 this.$ = new VarCall(undefined, undefined, $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 26:
 this.$ = new VarCall($$[$0-2], $$[$0-1], undefined, _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 27:
 $$[$0-1] = $$[$0-1] + " " + $$[$0]; this.$ = $$[$0-1];
break;
case 29: case 30:
 this.$ = $$[$0].toString().replaceAll("\"","");
break;
case 31: case 32:
 this.$ = $$[$0].toString().replaceAll("\"",""); 
break;
case 33:
 this.$ = new Flwor($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 34:
 $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2];
break;
case 35:
 this.$ = [$$[$0]]; 
break;
case 36:
 this.$ = new DeclaracionFor(TipoFor.NORMAL, $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 37:
 this.$ = new DeclaracionFor(TipoFor.ITERATIVO, $$[$0-6], null, _$[$0-7].first_line, _$[$0-7].first_column, undefined, +$$[$0-3], +$$[$0-1]);
break;
case 38:
 this.$ = new DeclaracionFor(TipoFor.AT, $$[$0-5], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column, $$[$0-2])
break;
case 40: case 65: case 112:
 this.$ = [];
break;
case 43:
 this.$ = new Where($$[$0-1],$$[$0], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 44:
 this.$ = new Where($$[$0-2], $$[$0-1], false, _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 45:
 this.$ = new OrderBy($$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 46:
 this.$ = new Let($$[$0-3], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 47:
 this.$ = new Let($$[$0-7], null, _$[$0-9].first_line, _$[$0-9].first_column, $$[$0-3], $$[$0-2])
break;
case 48:
 this.$ = new For($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 49:
 this.$ = new Return($$[$0-1], $$[$0], undefined, undefined, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 50:
 this.$ = new Return(undefined, undefined, $$[$0], undefined, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 51:
 this.$ = new Return(undefined, undefined, undefined, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 52:
this.$ = new IfThenElse($$[$0-7], $$[$0-5], $$[$0-2], $$[$0], _$[$0-10].first_line, _$[$0-10].first_column);
break;
case 53:
 this.$ = $$[$0-1];
break;
case 55:
 this.$ = null;
break;
case 56:
 this.$ = new CondicionIf(undefined, undefined, $$[$0], undefined, _$[$0].first_line, _$[$0].first_column);
break;
case 58:
  this.$ = new CondicionIf($$[$0-3], $$[$0-2], undefined, undefined, _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 59:
 this.$ = new CondicionIf(undefined, undefined, undefined, $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 60:
 this.$ = new CondicionIf($$[$0-1], $$[$0], undefined, undefined, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 61:
 this.$ = new FuncionXQuery(TipoFuncionXQ.DATA, $$[$0-2], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 62:
 this.$ = new FuncionXQuery(TipoFuncionXQ.UPPERCASE, $$[$0-2],$$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 63:
 this.$ = new FuncionXQuery(TipoFuncionXQ.SUBSTRING, $$[$0-6], $$[$0-5], _$[$0-9].first_line, _$[$0-9].first_column, +$$[$0-3], +$$[$0-1])
break;
case 68: case 69:
 this.$ = new Atributo($$[$0-2].toString().replaceAll("\"",""), $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 70:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 72:
 this.$ = new Sort($$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 73:
 this.$ = [new Consulta($$[$0-2], _$[$0-2].first_line, _$[$0-2].first_column)]; this.$ = this.$.concat($$[$0]);
break;
case 74:
  this.$ = [new Consulta($$[$0], _$[$0].first_line, _$[$0].first_column)];
break;
case 75:
       
                        this.$ = [new Nodo($$[$0-1], TipoNodo.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column)];                                          
                        if($$[$0].length > 0){  
                                this.$ = this.$.concat($$[$0]);
                        }

                
break;
case 76:
 
                        this.$ = [$$[$0-1]]; 
                        if($$[$0].length > 0){
                               this.$ =  this.$.concat($$[$0]);
                        } 
                
break;
case 78:
 this.$ = [$$[$0-1]]; this.$ = this.$.concat($$[$0]); 
break;
case 79:
 this.$ = []; 
break;
case 80:
 $$[$0].fromRoot = true; this.$ = $$[$0];
break;
case 81:
 $$[$0].fromRoot = false; this.$ = $$[$0];
break;
case 82:
 console.log('Entra a error sintactico de one diag');
                    errores.default.agregarError('sintactico', 'Token inesperado \'' + yytext + '\'', _$[$0-1].first_line, _$[$0-1].first_column); 
                this.$ = new Nodo($$[$0], TipoNodo.NODOERROR, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 83:
 console.log('Entra a error sintactico de two diags');
                errores.default.agregarError('sintactico', 'Token inesperado \'' + yytext + '\'', _$[$0-2].first_line, _$[$0-2].first_column); 
            this.$ = new Nodo($$[$0], TipoNodo.NODOERROR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 84:
 this.$ = new Nodo($$[$0], TipoNodo.IDENTIFIER, _$[$0].first_line, _$[$0].first_column);
break;
case 85:
 this.$ = new Nodo($$[$0-3], TipoNodo.IDENTIFIER, _$[$0-3].first_line, _$[$0-3].first_column, new Predicate($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column));
break;
case 86: case 87: case 113: case 144: case 145: case 147:
 this.$ = $$[$0]; 
break;
case 88: case 89:
 this.$ = new Nodo($$[$0-1], TipoNodo.ATRIBUTO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 90:
 this.$ = new Nodo($$[$0-1], TipoNodo.DOT, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 91:
 this.$ = new Nodo($$[$0-2]+$$[$0-1], TipoNodo.DOTDOT, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 92:
  this.$ = new Nodo($$[$0-1], TipoNodo.ASTERISCO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 93:
 this.$ = new Nodo($$[$0], TipoNodo.FUNCION, _$[$0].first_line, _$[$0].first_column);
break;
case 94:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.ANCESTOR, $$[$0-1])
break;
case 95:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.ANCESTORORSELF, $$[$0-1])
break;
case 96:
 this.$ =new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.ATTRIBUTE, $$[$0-1])
break;
case 97:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.CHILD, $$[$0-1])
break;
case 98:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.DESCENDANT, $$[$0-1])
break;
case 99:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.DESCENDANTORSELF, $$[$0-1])
break;
case 100:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.FOLLOWING, $$[$0-1])
break;
case 101:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.FOLLOWINGSIBLING, $$[$0-1])
break;
case 102:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.NAMESPACE, $$[$0-1])
break;
case 103:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.PARENT, $$[$0-1])
break;
case 104:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.PRECEDING, $$[$0-1])
break;
case 105:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.PRECEDINGSIBLING, $$[$0-1])
break;
case 106:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.SELF, $$[$0-1])
break;
case 107:
 
                        if($$[$0] instanceof Predicate){
                                this.$ = new Nodo($$[$0-1], TipoNodo.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column);
                        }else{
                                this.$ = new Nodo($$[$0-1], TipoNodo.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
                        }
                
break;
case 108: case 109:
 
                        if($$[$0] instanceof Predicate){
                                this.$ = new Nodo($$[$0-1], TipoNodo.FUNCION, _$[$0-1].first_line, _$[$0-1].first_column);
                        }else{
                                this.$ = new Nodo($$[$0-1], TipoNodo.FUNCION, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
                        }
                
break;
case 110:
 
                        if($$[$0] instanceof Predicate){
                                this.$ = new Nodo($$[$0-1], TipoNodo.ASTERISCO, _$[$0-1].first_line, _$[$0-1].first_column);
                        }else{
                                this.$ = new Nodo($$[$0-1], TipoNodo.ASTERISCO, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
                        }
                
break;
case 111:
 this.$ = $$[$0-1]
break;
case 114:
 this.$ = $$[$0] ;
break;
case 115:
 this.$ = new Operacion(TipoOperacion.MULTIPLICACION, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 116:
 this.$ = new Operacion(TipoOperacion.SUMA, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 117:
 this.$ = new Operacion(TipoOperacion.RESTA, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 118:
 this.$ = new Operacion(TipoOperacion.DIVISION, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 119:
 this.$ = new Operacion(TipoOperacion.MENORIGUALQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 120:
 this.$ = new Operacion(TipoOperacion.MENORQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 121:
 this.$ = new Operacion(TipoOperacion.MAYORIGUALQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 122:
 this.$ = new Operacion(TipoOperacion.MAYORQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 123:
 this.$ = new Operacion(TipoOperacion.IGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 124:
 this.$ = new Operacion(TipoOperacion.DIFERENTEQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 125:
 this.$ = new Operacion(TipoOperacion.OR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 126:
 this.$ = new Operacion(TipoOperacion.AND, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 127:
 this.$ = new Operacion(TipoOperacion.MOD, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 128:
 this.$ = new Operacion(TipoOperacion.XQEQ, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 129:
 this.$ = new Operacion(TipoOperacion.XQNE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 130:
 this.$ = new Operacion(TipoOperacion.XQLT, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 131:
 this.$ = new Operacion(TipoOperacion.XQLE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 132:
 this.$ = new Operacion(TipoOperacion.XQGT, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 133:
 this.$ = new Operacion(TipoOperacion.XQGE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 134:
 this.$ = new Operacion(TipoOperacion.PAR, $$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 135:
 this.$ = new Primitiva($$[$0], TipoPrim.DOUBLE, _$[$0].first_line, _$[$0].first_column); 
break;
case 136:
 this.$ = new Primitiva($$[$0], TipoPrim.INTEGER, _$[$0].first_line, _$[$0].first_column); 
break;
case 137: case 138:
 this.$ = new Primitiva($$[$0], TipoPrim.CADENA, _$[$0].first_line, _$[$0].first_column); 
break;
case 139: case 140:
 this.$ = new Primitiva($$[$0], TipoPrim.ATRIBUTO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 141:
 this.$ = new Primitiva($$[$0], TipoPrim.DOT, _$[$0].first_line, _$[$0].first_column);
break;
case 142:
 
                if($$[$0].length > 0){
                        this.$ = [new Nodo($$[$0-1], TipoNodo.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column)]; this.$ = this.$.concat($$[$0]); 
                        this.$ = new Primitiva(this.$, TipoPrim.CONSULTA, _$[$0-1].first_line, _$[$0-1].first_column);
                }else{
                        this.$ = new Primitiva($$[$0-1], TipoPrim.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column);

                }
        
break;
case 143:
 this.$ = new Primitiva($$[$0], TipoPrim.FUNCION, _$[$0].first_line, _$[$0].first_column);
break;
}
},
table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:[1,9],28:$V0,44:8,52:10,53:11,54:$V1,56:$V2,59:$V3,61:$V4,62:$V5},{1:[3]},{5:[1,16]},{5:[2,2]},{5:[2,3]},{5:[2,6]},{5:[2,7]},{15:[1,17]},{45:18,62:[1,19]},{12:[1,20]},{53:21,54:$V1,56:$V2,59:$V3,61:$V4,62:[2,39]},o($V6,[2,42]),{38:[1,22]},{57:[1,23]},{38:[1,24]},{38:$V7,46:25,47:26},{1:[2,1]},o($V8,[2,65],{29:28,74:29,75:30,15:$V9}),o($Va,[2,33]),{7:33,28:$V0,38:[1,32],63:34,64:[1,35]},{13:36,27:[1,37]},o($V6,[2,41]),{30:[1,38]},{38:$Vb,58:39,79:40},{15:[1,42]},o($V6,[2,48],{22:[1,43]}),o($Vc,[2,35]),{15:[1,44]},{30:[1,45],31:[1,46]},o($V8,[2,64],{75:47,15:$V9}),o($Vd,[2,67]),{76:[1,48]},{15:[1,49]},o($Va,[2,50]),o($Va,[2,51]),{16:[1,50]},{14:[1,51]},{14:[2,17]},{15:[1,52],30:[1,53]},o($V6,[2,45],{22:[1,54]}),o($Vc,[2,71]),{15:[1,55]},{14:[1,56]},{38:$V7,47:57},{48:[1,58],51:[1,59]},{31:[1,60]},{15:$Ve,28:[1,63],32:61,33:[1,62],34:64,35:66,36:$Vf,40:65,41:$Vg,42:$Vh,43:$Vi},o($Vd,[2,66]),{77:[1,72],78:[1,73]},o($Va,$Vj,{39:74,83:75,30:$Vk}),{38:[1,77]},{15:[1,78]},{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:79,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},{15:[1,95]},{38:$Vb,79:96},o($Vc,$Vj,{83:75,39:97,30:$Vk}),{60:[1,98]},o($Vc,[2,34]),o($Vx,$Vj,{83:75,49:99,80:101,82:103,39:104,92:108,15:$Vy,16:[1,100],30:$Vk,88:$Vz,90:$VA,91:$VB,107:$Vt,108:$Vu,126:$Vv,127:$Vw}),{38:[1,109]},o($VC,[2,18]),{15:$Ve,28:[1,110],40:111,41:$Vg,42:$Vh,43:$Vi},{28:[1,112]},{30:[1,113]},{28:[1,114],35:115,36:$Vf},o($VD,[2,28]),o($VE,[2,24]),o($VD,[2,29]),o($VD,[2,30]),o($VD,[2,31]),o($VD,[2,32]),{9:116,38:[1,117],44:8,52:10,53:11,54:$V1,56:$V2,59:$V3,61:$V4,62:$V5},o($Vd,[2,68]),o($Vd,[2,69]),o($Va,[2,49]),o($VF,$Vj,{83:75,39:118,30:$Vk}),{2:[1,121],15:$VG,30:[1,120],82:123,84:119,87:124,88:$Vz,90:$VA,91:$VB,92:108,93:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$Vt,108:$Vu,126:$Vv,127:$Vw},{15:[1,138]},{16:[1,139]},o($V6,[2,43],{28:$VU,31:$VV,60:$VW,90:$VX,111:$VY,112:$VZ,113:$V_,114:$V$,115:$V01,116:$V11,117:$V21,118:$V31,119:$V41,120:$V51,121:$V61,122:$V71,123:$V81,124:$V91,125:$Va1}),o($Vb1,[2,113]),o($Vb1,[2,114]),o($Vb1,[2,135]),o($Vb1,[2,136]),o($Vb1,[2,137]),o($Vb1,[2,138]),{15:[1,159],90:[1,160]},o($Vb1,[2,141]),o($Vb1,$Vj,{83:75,39:161,30:$Vk}),o($Vb1,[2,143]),{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:162,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},o($Vc1,[2,144]),o($Vc1,[2,145]),o($Vc1,[2,146]),o($Vc1,[2,147]),{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:163,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},o($Vc,[2,70]),o($Vc,[2,72]),o([54,56,59,61,62,81],$Vj,{83:75,80:101,82:103,39:104,92:108,49:164,15:$Vy,16:[1,165],30:$Vk,88:$Vz,90:$VA,91:$VB,107:$Vt,108:$Vu,126:$Vv,127:$Vw}),o($Vc,[2,36]),{43:[1,166]},o($Vc,[2,74],{81:[1,167]}),o($Vx,$Vj,{83:75,39:168,30:$Vk}),o($Vx,$Vj,{83:75,39:169,30:$Vk}),o($Vx,[2,77]),{15:[1,170],90:[1,171]},o($Vc1,$Vd1,{89:172,85:$Ve1,91:[1,173]}),o($Vc1,$Vd1,{89:175,85:$Ve1}),o($Vc1,[2,93]),{15:[1,176]},{30:[1,177]},o($VD,[2,27]),{30:[1,178]},{15:[1,179]},{30:[1,180]},o($VE,[2,23]),{37:[1,181]},{15:[1,182]},o($VF,[2,78]),o($Vc1,[2,80]),{2:[1,184],15:$VG,82:123,84:183,87:124,88:$Vz,90:$VA,91:$VB,92:108,93:$VH,95:$VI,96:$VJ,97:$VK,98:$VL,99:$VM,100:$VN,101:$VO,102:$VP,103:$VQ,104:$VR,105:$VS,106:$VT,107:$Vt,108:$Vu,126:$Vv,127:$Vw},o($Vc1,[2,82]),o($Vc1,[2,84],{85:[1,185]}),o($Vc1,[2,86]),o($Vc1,[2,87]),{14:[1,186]},{14:[1,187]},{14:[1,188]},{14:[1,189]},{14:[1,190]},{14:[1,191]},{14:[1,192]},{14:[1,193]},{14:[1,194]},{14:[1,195]},{14:[1,196]},{14:[1,197]},{14:[1,198]},{30:[1,199]},{15:$Vf1,17:200,18:[2,10],21:201,23:202},{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:204,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:205,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:206,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:207,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:208,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:209,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:210,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:211,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:212,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:213,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:214,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:215,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:216,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:217,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:218,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:219,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:220,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:221,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:222,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},o($Vb1,[2,139]),o($Vb1,[2,140]),o($Vb1,[2,142]),{18:[1,223],28:$VU,31:$VV,60:$VW,90:$VX,111:$VY,112:$VZ,113:$V_,114:$V$,115:$V01,116:$V11,117:$V21,118:$V31,119:$V41,120:$V51,121:$V61,122:$V71,123:$V81,124:$V91,125:$Va1},o($V6,[2,44],{28:$VU,31:$VV,60:$VW,90:$VX,111:$VY,112:$VZ,113:$V_,114:$V$,115:$V01,116:$V11,117:$V21,118:$V31,119:$V41,120:$V51,121:$V61,122:$V71,123:$V81,124:$V91,125:$Va1}),o($V6,[2,46]),{43:[1,224]},{50:[1,225]},o($Vx,$Vj,{83:75,80:101,82:103,39:104,92:108,49:226,15:$Vy,30:$Vk,88:$Vz,90:$VA,91:$VB,107:$Vt,108:$Vu,126:$Vv,127:$Vw}),o($Vx,[2,75]),o($Vx,[2,76]),o($Vc1,$Vd1,{89:227,85:$Ve1}),o($Vc1,$Vd1,{89:228,85:$Ve1}),o($Vc1,[2,90]),o($Vc1,$Vd1,{89:229,85:$Ve1}),{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:230,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},o($Vc1,[2,92]),{48:[1,231]},{15:[1,232]},{15:[1,233]},{31:[1,234]},{15:[1,235]},o($VE,[2,25]),{30:$Vk,37:$Vj,39:236,83:75},o($Vc1,[2,81]),o($Vc1,[2,83]),{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:237,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},{14:[1,238]},{14:[1,239]},{14:[1,240]},{14:[1,241]},{14:[1,242]},{14:[1,243]},{14:[1,244]},{14:[1,245]},{14:[1,246]},{14:[1,247]},{14:[1,248]},{14:[1,249]},{14:[1,250]},{15:$Vl,16:$Vm,42:$Vn,43:$Vo,55:251,77:$Vp,78:$Vq,88:$Vr,91:$Vs,92:89,107:$Vt,108:$Vu,109:80,110:81,126:$Vv,127:$Vw},{18:[1,252]},{18:[2,9],22:[1,253]},o($Vg1,[2,12]),{19:[1,254]},o($Vb1,[2,115]),o($Vh1,[2,116],{90:$VX,113:$V_,119:$V41}),o($Vh1,[2,117],{90:$VX,113:$V_,119:$V41}),o($Vb1,[2,118]),o($Vi1,[2,119],{90:$VX,111:$VY,112:$VZ,113:$V_,119:$V41}),o($Vi1,[2,120],{90:$VX,111:$VY,112:$VZ,113:$V_,119:$V41}),o($Vi1,[2,121],{90:$VX,111:$VY,112:$VZ,113:$V_,119:$V41}),o($Vi1,[2,122],{90:$VX,111:$VY,112:$VZ,113:$V_,119:$V41}),o($Vi1,[2,123],{90:$VX,111:$VY,112:$VZ,113:$V_,119:$V41}),o($Vi1,[2,124],{90:$VX,111:$VY,112:$VZ,113:$V_,119:$V41}),o([18,54,56,59,61,62,86,117],[2,125],{28:$VU,31:$VV,60:$VW,90:$VX,111:$VY,112:$VZ,113:$V_,114:$V$,115:$V01,116:$V11,118:$V31,119:$V41,120:$V51,121:$V61,122:$V71,123:$V81,124:$V91,125:$Va1}),o([18,54,56,59,61,62,86,117,118],[2,126],{28:$VU,31:$VV,60:$VW,90:$VX,111:$VY,112:$VZ,113:$V_,114:$V$,115:$V01,116:$V11,119:$V41,120:$V51,121:$V61,122:$V71,123:$V81,124:$V91,125:$Va1}),o($Vb1,[2,127]),o($Vi1,[2,128],{90:$VX,111:$VY,112:$VZ,113:$V_,119:$V41}),o($Vi1,[2,129],{90:$VX,111:$VY,112:$VZ,113:$V_,119:$V41}),o($Vi1,[2,130],{90:$VX,111:$VY,112:$VZ,113:$V_,119:$V41}),o($Vi1,[2,131],{90:$VX,111:$VY,112:$VZ,113:$V_,119:$V41}),o($Vi1,[2,132],{90:$VX,111:$VY,112:$VZ,113:$V_,119:$V41}),o($Vi1,[2,133],{90:$VX,111:$VY,112:$VZ,113:$V_,119:$V41}),o($Vb1,[2,134]),{50:[1,255]},{43:[1,256]},o($Vc,[2,73]),o($Vc1,[2,88]),o($Vc1,[2,89]),o($Vc1,[2,91]),{28:$VU,31:$VV,60:$VW,86:[1,257],90:$VX,111:$VY,112:$VZ,113:$V_,114:$V$,115:$V01,116:$V11,117:$V21,118:$V31,119:$V41,120:$V51,121:$V61,122:$V71,123:$V81,124:$V91,125:$Va1},o($Vx,$Vj,{83:75,80:101,82:103,39:104,92:108,49:258,15:$Vy,30:$Vk,88:$Vz,90:$VA,91:$VB,107:$Vt,108:$Vu,126:$Vv,127:$Vw}),{31:[1,259]},{31:[1,260]},o($VC,[2,21]),{31:[1,261]},{37:[1,262]},{28:$VU,31:$VV,60:$VW,86:[1,263],90:$VX,111:$VY,112:$VZ,113:$V_,114:$V$,115:$V01,116:$V11,117:$V21,118:$V31,119:$V41,120:$V51,121:$V61,122:$V71,123:$V81,124:$V91,125:$Va1},{15:$Vj1,90:$Vk1,94:264,107:$Vl1,108:$Vm1},{15:$Vj1,90:$Vk1,94:269,107:$Vl1,108:$Vm1},{15:$Vj1,90:$Vk1,94:270,107:$Vl1,108:$Vm1},{15:$Vj1,90:$Vk1,94:271,107:$Vl1,108:$Vm1},{15:$Vj1,90:$Vk1,94:272,107:$Vl1,108:$Vm1},{15:$Vj1,90:$Vk1,94:273,107:$Vl1,108:$Vm1},{15:$Vj1,90:$Vk1,94:274,107:$Vl1,108:$Vm1},{15:$Vj1,90:$Vk1,94:275,107:$Vl1,108:$Vm1},{15:$Vj1,90:$Vk1,94:276,107:$Vl1,108:$Vm1},{15:$Vj1,90:$Vk1,94:277,107:$Vl1,108:$Vm1},{15:$Vj1,90:$Vk1,94:278,107:$Vl1,108:$Vm1},{15:$Vj1,90:$Vk1,94:279,107:$Vl1,108:$Vm1},{15:$Vj1,90:$Vk1,94:280,107:$Vl1,108:$Vm1},{18:[1,281],28:$VU,31:$VV,60:$VW,90:$VX,111:$VY,112:$VZ,113:$V_,114:$V$,115:$V01,116:$V11,117:$V21,118:$V31,119:$V41,120:$V51,121:$V61,122:$V71,123:$V81,124:$V91,125:$Va1},{19:[1,282]},{15:$Vf1,23:283},{20:284,24:$Vn1,25:$Vo1,26:$Vp1},{43:[1,288]},{18:[1,289]},o($Vc1,[2,111]),o($Vc,[2,38]),o($VC,[2,19]),o($VC,[2,20]),o($VC,[2,22]),o($VE,[2,26]),o($Vc1,[2,85]),o($Vc1,[2,94]),o($Vc1,$Vd1,{89:290,85:$Ve1}),o($Vc1,$Vd1,{89:291,85:$Ve1}),o($Vc1,$Vd1,{89:292,85:$Ve1}),o($Vc1,$Vd1,{89:293,85:$Ve1}),o($Vc1,[2,95]),o($Vc1,[2,96]),o($Vc1,[2,97]),o($Vc1,[2,98]),o($Vc1,[2,99]),o($Vc1,[2,100]),o($Vc1,[2,101]),o($Vc1,[2,102]),o($Vc1,[2,103]),o($Vc1,[2,104]),o($Vc1,[2,105]),o($Vc1,[2,106]),{65:[1,294]},{20:295,24:$Vn1,25:$Vo1,26:$Vp1},o($Vg1,[2,11]),o($Vg1,[2,13]),o($Vq1,[2,14]),o($Vq1,[2,15]),o($Vq1,[2,16]),{18:[1,296]},o($Vc,[2,37]),o($Vc1,[2,107]),o($Vc1,[2,108]),o($Vc1,[2,109]),o($Vc1,[2,110]),{7:300,16:$Vr1,28:$V0,36:$Vs1,38:$Vt1,66:297,68:299,69:301},{5:[2,8]},o($V6,[2,47]),{67:[1,304]},{7:300,18:[1,306],28:$V0,36:$Vs1,38:$Vt1,68:305,69:301},o($Vu1,[2,54]),o($VC,[2,56]),o($VC,[2,57]),{38:[1,307],70:308,71:[1,309],72:[1,310],73:[1,311]},{15:[1,312]},{7:300,16:$Vr1,28:$V0,36:$Vs1,38:$Vt1,66:313,68:299,69:301},{18:[1,314]},o($Vu1,[2,55]),{15:[1,315]},{37:[1,316]},{16:[1,317]},{16:[1,318]},{16:[1,319]},o($VC,$Vj,{83:75,39:320,30:$Vk}),o($Va,[2,52]),o($Vu1,[2,53]),{30:$Vk,37:$Vj,39:321,83:75},o($VC,[2,59]),{38:[1,322]},{38:[1,323]},{38:[1,324]},o($VC,[2,60]),{37:[1,325]},{15:[1,326]},{15:[1,327]},{15:[1,328]},o($VC,[2,58]),{18:$Vj,30:$Vk,39:329,83:75},{18:$Vj,30:$Vk,39:330,83:75},{22:$Vj,30:$Vk,39:331,83:75},{18:[1,332]},{18:[1,333]},{22:[1,334]},{37:[2,61]},{37:[2,62]},{43:[1,335]},{22:[1,336]},{43:[1,337]},{18:[1,338]},{37:[2,63]}],
defaultActions: {3:[2,2],4:[2,3],5:[2,6],6:[2,7],16:[2,1],37:[2,17],295:[2,8],332:[2,61],333:[2,62],338:[2,63]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //const Nodo = require("./AST/nodo_arbol");
    //var raiz;

    const {Primitiva} = require("../Expresiones/Primitiva");
    const {Operacion} = require("../Expresiones/Operacion");
    const {Consulta} = require("../XPath/Consulta");
    const {Nodo} = require("../XPath/Nodo");
    const {Predicate} = require("../XPath/Predicate");
    const {TipoPrim} = require("../Expresiones/Primitiva")
    const {TipoOperacion} = require("../Expresiones/Operacion");
    const {TipoNodo} = require("../XPath/Nodo");
    const {TipoAxis} = require("../XPath/Nodo")

    const errores = require('../Global/ListaError');

    //IMPORTS XQUERY
    const {Flwor} = require("../XQuery/Flwor");
    const {Return} = require("../XQuery/Return");
    const {Where} = require("../XQuery/Where");
    const {For} = require("../XQuery/For");
    const {Let} = require("../XQuery/Let");            
    const {OrderBy} = require("../XQuery/OrderBy");    
    const {TipoFor} = require("../XQuery/DeclaracionFor")
    const {DeclaracionFor} = require("../XQuery/DeclaracionFor")
    const {Sort} = require("../XQuery/Sort")
    const {CondicionIf} = require("../XQuery/CondicionIf")
    const {FuncionXQuery} = require("../XQuery/FuncionXQuery")
    const {Html} = require("../XQuery/Html")
    const {IfThenElse} = require("../XQuery/IfThenElse")

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:return 38;
break;
case 5:return 60;
break;
case 6:return 30;
break;
case 7:return "dot";
break;
case 8:return "attr";
break;
case 9:return "corA";
break;
case 10:return "corC";
break;
case 11:return "andSelect";
break;
case 12:return "dospuntos";
break;
case 13:return "parA";
break;
case 14:return "parC";
break;
case 15:return "llaveA";
break;
case 16:return "llaveC";
break;
case 17:return "coma";
break;
case 18:return 90;
break;
case 19:return "mas";
break;
case 20:return "menos";
break;
case 21:return "div";
break;
case 22:return 114;
break;
case 23:return "gte";
break;
case 24:return 28;
break;
case 25:return 31;
break;
case 26:return "nequal";
break;
case 27:return "or";
break;
case 28:return "and";
break;
case 29:return "mod";
break;
case 30:return   "for";
break;
case 31:return "in";
break;
case 32:return "to";
break;
case 33:return "at";
break;
case 34:return "let";
break;
case 35:return "where";
break;
case 36:return "order";
break;
case 37:return "by";   
break;
case 38:return "return";
break;
case 39:return "if";
break;
case 40:return "else";
break;
case 41:return "then";
break;
case 42:return "reserv_eq";
break;
case 43:return "reserv_gt";
break;
case 44:return "reserv_ge";
break;
case 45:return "reserv_ne";
break;
case 46:return "reserv_le";
break;
case 47:return "reserv_lt"
break;
case 48:return "ancestorSelf";
break;
case 49:return "ancestor";
break;
case 50:return "attribute";
break;
case 51:return "child";
break;
case 52:return "descendantSelf";
break;
case 53:return "descendant";
break;
case 54:return "followingSib";
break;
case 55:return "following";
break;
case 56:return "namespace";
break;
case 57:return "parent";
break;
case 58:return "precedSib";
break;
case 59:return "preced";
break;
case 60:return "self";
break;
case 61:return "data";
break;
case 62:return "upper-case";
break;
case 63:return "substring";
break;
case 64:return "declare";
break;
case 65:return "function";
break;
case 66:return "local";
break;
case 67:return "decimal";
break;
case 68:return "string";
break;
case 69:return "boolean";
break;
case 70:return "as";
break;
case 71:return "xs";
break;
case 72:return "lastFunc";
break;
case 73:return "positionFunc";
break;
case 74:return "nodeFunc";
break;
case 75:return "textFunc";
break;
case 76:return 42;
break;
case 77:return 43;
break;
case 78:return 15;
break;
case 79:return 77;
break;
case 80:return 78;
break;
case 81:
                                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                    
break;
case 82:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\(:)/i,/^(?::\))/i,/^(?:.)/i,/^(?:\$)/i,/^(?:=)/i,/^(?:\/)/i,/^(?:\.)/i,/^(?:@)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:div\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:mod\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:to\b)/i,/^(?:at\b)/i,/^(?:let\b)/i,/^(?:where\b)/i,/^(?:order\b)/i,/^(?:by\b)/i,/^(?:return\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:then\b)/i,/^(?:eq\b)/i,/^(?:gt\b)/i,/^(?:ge\b)/i,/^(?:ne\b)/i,/^(?:le\b)/i,/^(?:lt\b)/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:following-sibling\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:preceding-sibling\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:data\b)/i,/^(?:upper-case\b)/i,/^(?:substring\b)/i,/^(?:declare\b)/i,/^(?:function\b)/i,/^(?:local\b)/i,/^(?:decimal\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:as\b)/i,/^(?:xs\b)/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:node\(\))/i,/^(?:text\(\))/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ.-]*)/i,/^(?:("((\\([\'\"\\]))|([^\"\\]+))*"))/i,/^(?:('((\\([\'\"\\]))|([^\'\\]))*'))/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XQuery_GramaticaAsc;
exports.Parser = XQuery_GramaticaAsc.Parser;
exports.parse = function () { return XQuery_GramaticaAsc.parse.apply(XQuery_GramaticaAsc, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}