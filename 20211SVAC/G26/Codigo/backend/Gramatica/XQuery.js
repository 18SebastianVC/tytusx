/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var XQuery = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[16,24,113,122,131],$V1=[1,7],$V2=[16,24,113,131],$V3=[2,122],$V4=[1,12],$V5=[1,13],$V6=[2,11,16,24,113,122,131],$V7=[1,21],$V8=[1,22],$V9=[2,126],$Va=[1,29],$Vb=[1,33],$Vc=[1,40],$Vd=[1,52],$Ve=[1,47],$Vf=[1,41],$Vg=[1,42],$Vh=[1,43],$Vi=[1,44],$Vj=[1,48],$Vk=[1,49],$Vl=[1,50],$Vm=[1,51],$Vn=[1,53],$Vo=[1,59],$Vp=[1,60],$Vq=[2,128],$Vr=[26,117,118,122,131],$Vs=[5,22],$Vt=[1,65],$Vu=[1,66],$Vv=[1,67],$Vw=[1,68],$Vx=[1,69],$Vy=[1,70],$Vz=[1,71],$VA=[1,72],$VB=[1,73],$VC=[1,74],$VD=[1,75],$VE=[1,76],$VF=[1,77],$VG=[1,78],$VH=[1,79],$VI=[1,80],$VJ=[1,81],$VK=[1,82],$VL=[1,83],$VM=[1,85],$VN=[5,16,18,22,24,26,43,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,78,113,117,118,122,131],$VO=[2,50],$VP=[117,118,122,131],$VQ=[2,53],$VR=[1,105],$VS=[1,148],$VT=[1,152],$VU=[1,157],$VV=[1,155],$VW=[1,156],$VX=[1,162],$VY=[1,161],$VZ=[1,159],$V_=[1,160],$V$=[1,170],$V01=[5,16,18,22,24,26,74,78,113,117,118,122,129,131],$V11=[1,175],$V21=[1,178],$V31=[1,179],$V41=[1,180],$V51=[1,181],$V61=[1,182],$V71=[1,183],$V81=[1,184],$V91=[1,185],$Va1=[1,186],$Vb1=[1,187],$Vc1=[1,188],$Vd1=[1,189],$Ve1=[1,190],$Vf1=[5,16,18,22,24,26,43,46,47,49,50,51,52,53,54,55,56,58,59,60,61,62,63,78,113,117,118,122,131],$Vg1=[5,16,18,22,24,26,43,49,50,51,52,53,54,55,56,58,59,60,61,62,63,78,113,117,118,122,131],$Vh1=[18,26],$Vi1=[1,209],$Vj1=[16,24,26,113,117,118,122,129,131],$Vk1=[2,94],$Vl1=[1,218],$Vm1=[16,24,113,117,118,122,131],$Vn1=[1,256],$Vo1=[1,254],$Vp1=[1,255],$Vq1=[78,117,118,122,131],$Vr1=[1,310],$Vs1=[1,313],$Vt1=[1,311],$Vu1=[1,312],$Vv1=[1,348],$Vw1=[1,349],$Vx1=[1,350],$Vy1=[1,351],$Vz1=[1,352],$VA1=[18,20,26];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"START":3,"INSTRUCCIONES":4,"EOF":5,"LISTFUNC":6,"LISTAD":7,"RETURNGLOBAL":8,"LFUNC":9,"USERFUNCTION":10,"declare":11,"function":12,"PREFIX":13,"dospuntos":14,"identifier":15,"parA":16,"ARGUMENTOS":17,"parC":18,"TIPOFUNCION":19,"llaveA":20,"LISTAINSTR":21,"llaveC":22,"puntocoma":23,"local":24,"LISTAARGS":25,"coma":26,"PARAM":27,"dolar":28,"as":29,"xs":30,"DATATYPE":31,"decimal":32,"string":33,"boolean":34,"double":35,"integer":36,"IF":37,"FLWOR":38,"if":39,"EXPRESIONXQUERY":40,"then":41,"LISTELSEIF":42,"else":43,"EIF":44,"asterisco":45,"mas":46,"menos":47,"div":48,"lte":49,"lt":50,"gte":51,"gt":52,"igual":53,"nequal":54,"or":55,"and":56,"mod":57,"reserv_eq":58,"reserv_ne":59,"reserv_lt":60,"reserv_le":61,"reserv_gt":62,"reserv_ge":63,"DoubleLiteral":64,"IntegerLiteral":65,"cadena":66,"cadena2":67,"LLAMADAFUNCION":68,"FUNCIONXQUERY":69,"LISTALLAMADA":70,"VARLLAMADA":71,"LISTANODOS":72,"NODO":73,"diag":74,"TIPONODO":75,"corA":76,"EXPRESION":77,"corC":78,"MASTIPOS":79,"AXES":80,"attr":81,"PREDICATE":82,"dot":83,"FUNCIONES":84,"ancestor":85,"NODETEST":86,"ancestorSelf":87,"attribute":88,"child":89,"descendant":90,"descendantSelf":91,"following":92,"followingSib":93,"namespace":94,"parent":95,"preced":96,"precedSib":97,"self":98,"textFunc":99,"nodeFunc":100,"PRIMITIVA":101,"data":102,"upper-case":103,"substring":104,"lower-case":105,"number":106,"lastFunc":107,"positionFunc":108,"FOR":109,"RETURNTYPE":110,"LISTADEC":111,"DECLARACION":112,"for":113,"LISTADECLARACIONES":114,"SENTSFOR":115,"SENTFOR":116,"where":117,"order":118,"by":119,"LISTASORT":120,"SORT":121,"let":122,"LISTACONSULTAS":123,"to":124,"DECLARACIONFOR":125,"in":126,"LISTAENTEROS":127,"at":128,"andSelect":129,"CONSULTA":130,"return":131,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"declare",12:"function",14:"dospuntos",15:"identifier",16:"parA",18:"parC",20:"llaveA",22:"llaveC",23:"puntocoma",24:"local",26:"coma",28:"dolar",29:"as",30:"xs",32:"decimal",33:"string",34:"boolean",35:"double",36:"integer",39:"if",41:"then",43:"else",45:"asterisco",46:"mas",47:"menos",48:"div",49:"lte",50:"lt",51:"gte",52:"gt",53:"igual",54:"nequal",55:"or",56:"and",57:"mod",58:"reserv_eq",59:"reserv_ne",60:"reserv_lt",61:"reserv_le",62:"reserv_gt",63:"reserv_ge",64:"DoubleLiteral",65:"IntegerLiteral",66:"cadena",67:"cadena2",74:"diag",76:"corA",78:"corC",81:"attr",83:"dot",85:"ancestor",87:"ancestorSelf",88:"attribute",89:"child",90:"descendant",91:"descendantSelf",92:"following",93:"followingSib",94:"namespace",95:"parent",96:"preced",97:"precedSib",98:"self",99:"textFunc",100:"nodeFunc",102:"data",103:"upper-case",104:"substring",105:"lower-case",106:"number",107:"lastFunc",108:"positionFunc",113:"for",117:"where",118:"order",119:"by",122:"let",124:"to",126:"in",128:"at",129:"andSelect",131:"return"},
productions_: [0,[3,2],[4,3],[4,1],[6,1],[6,0],[9,2],[9,1],[10,13],[10,2],[13,1],[17,1],[17,0],[25,3],[25,1],[27,6],[31,1],[31,1],[31,1],[31,1],[31,1],[19,4],[19,0],[21,1],[21,1],[37,9],[42,2],[42,0],[44,7],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,1],[40,1],[40,1],[40,1],[40,2],[40,1],[40,1],[68,6],[68,5],[70,3],[70,1],[71,1],[71,1],[73,2],[73,3],[73,2],[73,3],[75,1],[75,4],[75,1],[75,1],[79,3],[79,3],[79,2],[79,3],[79,2],[79,1],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[80,4],[86,2],[86,2],[86,2],[86,2],[82,3],[82,0],[77,1],[77,1],[101,2],[101,2],[101,1],[101,2],[101,1],[69,6],[69,6],[69,10],[69,6],[69,6],[69,6],[69,4],[69,4],[69,8],[69,4],[69,4],[69,4],[84,1],[84,1],[84,1],[84,1],[72,2],[72,1],[38,3],[7,1],[7,0],[111,2],[111,1],[109,3],[109,0],[115,2],[115,0],[116,1],[116,2],[116,5],[116,6],[116,3],[120,3],[120,1],[121,3],[112,6],[112,10],[112,6],[114,3],[114,1],[125,4],[125,8],[125,6],[125,7],[123,3],[123,1],[130,2],[130,2],[130,1],[110,4],[110,2],[110,2],[127,3],[127,1],[8,1],[8,3],[8,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:

                    if ($$[$0-2] !== null) {
                        this.$ = [{func:$$[$0-2], variable:$$[$0-1]}];
                    }else {
                        this.$ = [{func:null, variable: $$[$0-1]}];
                    }
                
break;
case 4:
this.$=$$[$0];
break;
case 5:
this.$=null;
break;
case 6:
$$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 7:
this.$=[$$[$0]];
break;
case 8:
 
                    this.$ = new UserFunction();
                
break;
case 10: case 11: case 60: case 61: case 96: case 116: case 121: case 150:
 this.$ = $$[$0];
break;
case 12:
 this.$ =  []
break;
case 13:
 $$[$0-2].push($$[$0-2]); this.$ = $$[$0-2];
break;
case 14: case 59: case 135: case 155:
 this.$ = [$$[$0]];
break;
case 15:
 this.$ = {tipo: $$[$0-2], nombre: $$[$0-4]};
break;
case 16:
 this.$ = TipoPrim.DECIMAL;
break;
case 17:
 this.$ = TipoPrim.CADENA;
break;
case 18:
 this.$ = TipoPrim.BOOLEAN;
break;
case 19:
 this.$ = TipoPrim.DOUBLE;
break;
case 20:
 this.$ = TipoPrim.INTEGER;
break;
case 21: case 54: case 68: case 69: case 95: case 114: case 115: case 117: case 128:
 this.$ = $$[$0]; 
break;
case 22:
 this.$ = TipoPrim.VOID; 
break;
case 23: case 24: case 119: case 141:
 this.$ = [$$[$0]]; 
break;
case 25:
this.$ = $$[$0-8];
break;
case 26: case 130:
this.$ = $$[$0-1];
break;
case 27:
this.$ = [];
break;
case 28:
this.$ = $$[$0-6];
break;
case 29:
 this.$ = new Operacion(TipoOperacion.MULTIPLICACION, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 30:
 this.$ = new Operacion(TipoOperacion.SUMA, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 31:
 this.$ = new Operacion(TipoOperacion.RESTA, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 32:
 this.$ = new Operacion(TipoOperacion.DIVISION, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 33:
 this.$ = new Operacion(TipoOperacion.MENORIGUALQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 34:
 this.$ = new Operacion(TipoOperacion.MENORQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 35:
 this.$ = new Operacion(TipoOperacion.MAYORIGUALQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 36:
 this.$ = new Operacion(TipoOperacion.MAYORQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 37:
 this.$ = new Operacion(TipoOperacion.IGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 38:
 this.$ = new Operacion(TipoOperacion.DIFERENTEQUE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 39:
 this.$ = new Operacion(TipoOperacion.OR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 40:
 this.$ = new Operacion(TipoOperacion.AND, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 41:
 this.$ = new Operacion(TipoOperacion.MOD, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 42:
 this.$ = new Operacion(TipoOperacion.XQEQ, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 43:
 this.$ = new Operacion(TipoOperacion.XQNE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 44:
 this.$ = new Operacion(TipoOperacion.XQLT, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 45:
 this.$ = new Operacion(TipoOperacion.XQLE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 46:
 this.$ = new Operacion(TipoOperacion.XQGT, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 47:
 this.$ = new Operacion(TipoOperacion.XQGE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 48:
 this.$ = new Operacion(TipoOperacion.PAR, $$[$0-1], null, _$[$0-2].first_line, _$[$0-2].first_column, true);
break;
case 49:
 this.$ = new Primitiva($$[$0], TipoPrim.DOUBLE, _$[$0].first_line, _$[$0].first_column, true); 
break;
case 50:
 this.$ = new Primitiva($$[$0], TipoPrim.INTEGER, _$[$0].first_line, _$[$0].first_column, true); 
break;
case 51: case 52:
 this.$ = new Primitiva($$[$0], TipoPrim.CADENA, _$[$0].first_line, _$[$0].first_column, true); 
break;
case 53:
 this.$ = new Primitiva($$[$0-1], TipoPrim.XQUERYIDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column, true); 
break;
case 55:
 this.$ = new Primitiva($$[$0], TipoPrim.FUNCIONXQUERY, _$[$0].first_line, _$[$0].first_column);
break;
case 56: case 57:
 this.$ = "Llamada";
break;
case 58:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]
break;
case 62:
 $$[$0].fromRoot = true; this.$ = $$[$0];
break;
case 63:
 $$[$0].fromRoot = false; this.$ = $$[$0];
break;
case 64:
 console.log('Entra a error sintactico de one diag');
                    errores.default.agregarError('sintactico', 'Token inesperado \'' + yytext + '\'', _$[$0-1].first_line, _$[$0-1].first_column); 
                this.$ = new Nodo($$[$0], TipoNodo.NODOERROR, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 65:
 console.log('Entra a error sintactico de two diags');
                errores.default.agregarError('sintactico', 'Token inesperado \'' + yytext + '\'', _$[$0-2].first_line, _$[$0-2].first_column); 
            this.$ = new Nodo($$[$0], TipoNodo.NODOERROR, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 66:
 this.$ = new Nodo($$[$0], TipoNodo.IDENTIFIER, _$[$0].first_line, _$[$0].first_column);
break;
case 67:
 this.$ = new Nodo($$[$0-3], TipoNodo.IDENTIFIER, _$[$0-3].first_line, _$[$0-3].first_column, new Predicate($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column));
break;
case 70: case 71:
 this.$ = new Nodo($$[$0-1], TipoNodo.ATRIBUTO, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 72:
 this.$ = new Nodo($$[$0-1], TipoNodo.DOT, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 73:
 this.$ = new Nodo($$[$0-2]+$$[$0-1], TipoNodo.DOTDOT, _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 74:
  this.$ = new Nodo($$[$0-1], TipoNodo.ASTERISCO, _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 75:
 this.$ = new Nodo($$[$0], TipoNodo.FUNCION, _$[$0].first_line, _$[$0].first_column);
break;
case 76:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.ANCESTOR, $$[$0-1])
break;
case 77:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.ANCESTORORSELF, $$[$0-1])
break;
case 78:
 this.$ =new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.ATTRIBUTE, $$[$0-1])
break;
case 79:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.CHILD, $$[$0-1])
break;
case 80:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.DESCENDANT, $$[$0-1])
break;
case 81:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.DESCENDANTORSELF, $$[$0-1])
break;
case 82:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.FOLLOWING, $$[$0-1])
break;
case 83:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.FOLLOWINGSIBLING, $$[$0-1])
break;
case 84:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.NAMESPACE, $$[$0-1])
break;
case 85:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.PARENT, $$[$0-1])
break;
case 86:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.PRECEDING, $$[$0-1])
break;
case 87:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.PRECEDINGSIBLING, $$[$0-1])
break;
case 88:
 this.$ = new Nodo($$[$0-3], TipoNodo.AXIS, _$[$0-3].first_line, _$[$0-3].first_column, undefined, TipoAxis.SELF, $$[$0-1])
break;
case 89:
 
                        if($$[$0] instanceof Predicate){
                                this.$ = new Nodo($$[$0-1], TipoNodo.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column);
                        }else{
                                this.$ = new Nodo($$[$0-1], TipoNodo.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
                        }
                
break;
case 90: case 91:
 
                        if($$[$0] instanceof Predicate){
                                this.$ = new Nodo($$[$0-1], TipoNodo.FUNCION, _$[$0-1].first_line, _$[$0-1].first_column);
                        }else{
                                this.$ = new Nodo($$[$0-1], TipoNodo.FUNCION, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
                        }
                
break;
case 92:
 
                        if($$[$0] instanceof Predicate){
                                this.$ = new Nodo($$[$0-1], TipoNodo.ASTERISCO, _$[$0-1].first_line, _$[$0-1].first_column);
                        }else{
                                this.$ = new Nodo($$[$0-1], TipoNodo.ASTERISCO, _$[$0-1].first_line, _$[$0-1].first_column, $$[$0]);
                        }
                
break;
case 93:
 this.$ = $$[$0-1]
break;
case 94: case 122:
 this.$ = [];
break;
case 97: case 98:
 this.$ = new Primitiva($$[$0], TipoPrim.ATRIBUTO, _$[$0-1].first_line, _$[$0-1].first_column, true);
break;
case 99:
 this.$ = new Primitiva($$[$0], TipoPrim.DOT, _$[$0].first_line, _$[$0].first_column, true);
break;
case 100:
 
                if($$[$0].length > 0){
                        this.$ = [new Nodo($$[$0-1], TipoNodo.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column)]; this.$ = this.$.concat($$[$0]); 
                        this.$ = new Primitiva(this.$, TipoPrim.CONSULTA, _$[$0-1].first_line, _$[$0-1].first_column);
                }else{
                        this.$ = new Primitiva($$[$0-1], TipoPrim.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column);

                }
        
break;
case 101:
 this.$ = new Primitiva($$[$0], TipoPrim.FUNCION, _$[$0].first_line, _$[$0].first_column);
break;
case 102:
 this.$ = new FuncionXQuery(TipoFuncionXQ.DATA, $$[$0-2], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 103:
 this.$ = new FuncionXQuery(TipoFuncionXQ.UPPERCASE, $$[$0-2],$$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 104:
 this.$ = new FuncionXQuery(TipoFuncionXQ.SUBSTRING, $$[$0-6], $$[$0-5], _$[$0-9].first_line, _$[$0-9].first_column, +$$[$0-3], +$$[$0-1])
break;
case 105:
 this.$ = new FuncionXQuery(TipoFuncionXQ.LOWERCASE, $$[$0-2],$$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 106:
 this.$ = new FuncionXQuery(TipoFuncionXQ.STRING, $$[$0-2],$$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 107:
 this.$ = new FuncionXQuery(TipoFuncionXQ.NUMBER, $$[$0-2],$$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 108:
 this.$ = new FuncionXQuery(TipoFuncionXQ.DATA, undefined, undefined, _$[$0-3].first_line, _$[$0-3].first_column, undefined, undefined, $$[$0-1])
break;
case 109:
 this.$ = new FuncionXQuery(TipoFuncionXQ.UPPERCASE, undefined,undefined , _$[$0-3].first_line, _$[$0-3].first_column, undefined, undefined, $$[$0-1])
break;
case 110:
 this.$ = new FuncionXQuery(TipoFuncionXQ.SUBSTRING, undefined, undefined, _$[$0-7].first_line, _$[$0-7].first_column, +$$[$0-3], +$$[$0-1], $$[$0-5])
break;
case 111:
 this.$ = new FuncionXQuery(TipoFuncionXQ.LOWERCASE, undefined,undefined, _$[$0-3].first_line, _$[$0-3].first_column,undefined, undefined, $$[$0-1])
break;
case 112:
 this.$ = new FuncionXQuery(TipoFuncionXQ.STRING, undefined,undefined, _$[$0-3].first_line, _$[$0-3].first_column, undefined, undefined, $$[$0-1])
break;
case 113:
 this.$ = new FuncionXQuery(TipoFuncionXQ.NUMBER, undefined,undefined, _$[$0-3].first_line, _$[$0-3].first_column, undefined, undefined, $$[$0-1] )
break;
case 118:
 this.$ = [$$[$0-1]]; this.$ = this.$.concat($$[$0]); 
break;
case 120:
 this.$ = new Flwor($$[$0-2], $$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 123:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
break;
case 124:
 this.$ = [$$[$0]]
break;
case 125:
 this.$ = new For($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 131:
 this.$ = new Where($$[$0-2],$$[$0], true, _$[$0-4].first_line, _$[$0-4].first_column)
break;
case 132:
 this.$ = new Where($$[$0-3], $$[$0], false, _$[$0-5].first_line, _$[$0-5].first_column)
break;
case 133:
 this.$ = new OrderBy($$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 134: case 154:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2];
break;
case 136:
 this.$ = new Sort($$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 137:
 this.$ = new Let($$[$0-3], $$[$0], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 138:
 this.$ = new Let($$[$0-7], null, _$[$0-9].first_line, _$[$0-9].first_column, +$$[$0-3], +$$[$0-1]);
break;
case 139:
 this.$ = new Let($$[$0-3], null, _$[$0-5].first_line, _$[$0-5].first_column, undefined, undefined, undefined, $$[$0]);
break;
case 140:
 $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2];
break;
case 142:
 this.$ = new DeclaracionFor(TipoFor.NORMAL, $$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 143:
 this.$ = new DeclaracionFor(TipoFor.ITERATIVO, $$[$0-6], null, _$[$0-7].first_line, _$[$0-7].first_column, undefined, +$$[$0-3], +$$[$0-1]);
break;
case 144:
 this.$ = new DeclaracionFor(TipoFor.ITERATIVO, $$[$0-4], null, _$[$0-5].first_line, _$[$0-5].first_column, undefined, undefined,undefined, $$[$0-1]);
break;
case 145:
 this.$ = new DeclaracionFor(TipoFor.AT, $$[$0-5], $$[$0], _$[$0-6].first_line, _$[$0-6].first_column, $$[$0-2])
break;
case 146:
 $$[$0-2].push(new Consulta($$[$0], _$[$0-2].first_line, _$[$0-2].first_column)); this.$ = $$[$0-2];
break;
case 147:
  this.$ = [new Consulta($$[$0], _$[$0].first_line, _$[$0].first_column)];
break;
case 148:
       
                        this.$ = [new Nodo($$[$0-1], TipoNodo.IDENTIFIER, _$[$0-1].first_line, _$[$0-1].first_column)];                                          
                        if($$[$0].length > 0){  
                                this.$ = this.$.concat($$[$0]);
                        }

                
break;
case 149:
 
                        this.$ = [$$[$0-1]]; 
                        if($$[$0].length > 0){
                               this.$ =  this.$.concat($$[$0]);
                        } 
                
break;
case 151:
 this.$ = new Return(TipoReturn.NORMAL, $$[$0-1], $$[$0], undefined, undefined, undefined, _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 152:
 this.$ = new Return(TipoReturn.FUNCIONXQUERY, undefined, undefined, undefined, undefined, $$[$0], _$[$0-1].first_line, _$[$0-1].first_column);
break;
case 153:
 this.$ = new Return(TipoReturn.IFTHENELSE, undefined, undefined, undefined, $$[$0], undefined, _$[$0-1].first_line, _$[$0-1].first_column);
break;
}
},
table: [o($V0,[2,5],{3:1,4:2,6:3,9:5,10:6,2:[1,4],11:$V1}),{1:[3]},{5:[1,8]},o($V2,$V3,{7:9,111:10,112:11,122:$V4}),{5:[2,3],22:$V5},o($V0,[2,4],{10:14,2:[1,15],11:$V1}),o($V6,[2,7]),{12:[1,16]},{1:[2,1]},{8:17,16:[1,19],24:$V7,68:18,109:20,113:$V8,131:$V9},o($V2,[2,121],{112:23,122:$V4}),o($V0,[2,124]),{28:[1,24]},o($V6,[2,9]),o($V6,[2,6]),{22:$V5},{13:25,24:[1,26]},{5:[2,2]},{5:[2,156]},{24:$V7,68:27},{110:28,131:$Va},{14:[1,30]},{28:$Vb,114:31,125:32},o($V0,[2,123]),{15:[1,34]},{14:[1,35]},{14:[2,10]},{18:[1,36]},{5:[2,158]},{16:$Vc,24:$V7,28:[1,37],33:$Vd,37:39,39:$Ve,40:38,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{15:[1,54]},{26:[1,56],112:58,115:55,116:57,117:$Vo,118:$Vp,122:$V4,131:$Vq},o($Vr,[2,141]),{15:[1,61]},{14:[1,62]},{15:[1,63]},{5:[2,157]},{15:[1,64]},o($Vs,[2,152],{45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL}),o($Vs,[2,153]),{16:$Vc,24:$V7,28:$VM,33:$Vd,40:84,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},o($VN,[2,49]),o($VN,$VO),o($VN,[2,51]),o($VN,[2,52]),o($VN,[2,54]),o($VN,[2,55]),{16:[1,86]},{16:[1,87]},{16:[1,88]},{16:[1,89]},{16:[1,90]},{16:[1,91]},{16:[1,92]},{16:[1,93]},{131:[2,125]},{28:$Vb,125:94},{112:58,115:95,116:57,117:$Vo,118:$Vp,122:$V4,131:$Vq},o($VP,[2,129]),{16:$Vc,24:$V7,28:[1,97],33:$Vd,40:96,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{119:[1,98]},{126:[1,99],128:[1,100]},{53:[1,101]},{16:[1,102]},o([5,22,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],$VQ,{72:103,73:104,74:$VR}),{16:$Vc,24:$V7,28:$VM,33:$Vd,40:106,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{16:$Vc,24:$V7,28:$VM,33:$Vd,40:107,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{16:$Vc,24:$V7,28:$VM,33:$Vd,40:108,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{16:$Vc,24:$V7,28:$VM,33:$Vd,40:109,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{16:$Vc,24:$V7,28:$VM,33:$Vd,40:110,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{16:$Vc,24:$V7,28:$VM,33:$Vd,40:111,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{16:$Vc,24:$V7,28:$VM,33:$Vd,40:112,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{16:$Vc,24:$V7,28:$VM,33:$Vd,40:113,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{16:$Vc,24:$V7,28:$VM,33:$Vd,40:114,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{16:$Vc,24:$V7,28:$VM,33:$Vd,40:115,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{16:$Vc,24:$V7,28:$VM,33:$Vd,40:116,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{16:$Vc,24:$V7,28:$VM,33:$Vd,40:117,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{16:$Vc,24:$V7,28:$VM,33:$Vd,40:118,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{16:$Vc,24:$V7,28:$VM,33:$Vd,40:119,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{16:$Vc,24:$V7,28:$VM,33:$Vd,40:120,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{16:$Vc,24:$V7,28:$VM,33:$Vd,40:121,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{16:$Vc,24:$V7,28:$VM,33:$Vd,40:122,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{16:$Vc,24:$V7,28:$VM,33:$Vd,40:123,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{16:$Vc,24:$V7,28:$VM,33:$Vd,40:124,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{18:[1,125],45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL},{15:[1,126]},{16:$Vc,24:$V7,28:$VM,33:$Vd,40:127,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{28:[1,128],33:$Vd,69:129,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{28:[1,130],33:$Vd,69:131,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{28:[1,132],33:$Vd,69:133,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{28:[1,134],33:$Vd,69:135,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{28:[1,136],33:$Vd,69:137,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{28:[1,138],33:$Vd,69:139,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{16:$Vc,18:[1,141],24:$V7,28:$VM,33:$Vd,40:143,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,70:140,71:142,72:144,73:104,74:$VR,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},o($Vr,[2,140]),{131:[2,127]},o($VP,[2,130],{45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL}),{15:[1,145]},{28:$VS,120:146,121:147},{15:$VT,16:[1,150],45:$VU,72:154,73:104,74:$VR,79:153,81:$VV,83:$VW,84:158,99:$VX,100:$VY,107:$VZ,108:$V_,123:149,130:151},{28:[1,163]},{15:$VT,16:[1,165],24:$V7,28:$VM,33:$Vd,40:166,45:$VU,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,72:154,73:104,74:$VR,79:153,81:$VV,83:$VW,84:158,99:$VX,100:$VY,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$VZ,108:$V_,123:164,130:151},{17:167,18:[2,12],25:168,27:169,28:$V$},o($Vs,[2,151],{73:171,74:$VR}),o($V01,[2,119]),{2:[1,174],15:$V11,45:$VU,74:[1,173],75:172,79:176,80:177,81:$VV,83:$VW,84:158,85:$V21,87:$V31,88:$V41,89:$V51,90:$V61,91:$V71,92:$V81,93:$V91,94:$Va1,95:$Vb1,96:$Vc1,97:$Vd1,98:$Ve1,99:$VX,100:$VY,107:$VZ,108:$V_},o($VN,[2,29]),o($Vf1,[2,30],{45:$Vt,48:$Vw,57:$VF}),o($Vf1,[2,31],{45:$Vt,48:$Vw,57:$VF}),o($VN,[2,32]),o($Vg1,[2,33],{45:$Vt,46:$Vu,47:$Vv,48:$Vw,57:$VF}),o($Vg1,[2,34],{45:$Vt,46:$Vu,47:$Vv,48:$Vw,57:$VF}),o($Vg1,[2,35],{45:$Vt,46:$Vu,47:$Vv,48:$Vw,57:$VF}),o($Vg1,[2,36],{45:$Vt,46:$Vu,47:$Vv,48:$Vw,57:$VF}),o($Vg1,[2,37],{45:$Vt,46:$Vu,47:$Vv,48:$Vw,57:$VF}),o($Vg1,[2,38],{45:$Vt,46:$Vu,47:$Vv,48:$Vw,57:$VF}),o([5,16,18,22,24,26,43,55,78,113,117,118,122,131],[2,39],{45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL}),o([5,16,18,22,24,26,43,55,56,78,113,117,118,122,131],[2,40],{45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL}),o($VN,[2,41]),o($Vg1,[2,42],{45:$Vt,46:$Vu,47:$Vv,48:$Vw,57:$VF}),o($Vg1,[2,43],{45:$Vt,46:$Vu,47:$Vv,48:$Vw,57:$VF}),o($Vg1,[2,44],{45:$Vt,46:$Vu,47:$Vv,48:$Vw,57:$VF}),o($Vg1,[2,45],{45:$Vt,46:$Vu,47:$Vv,48:$Vw,57:$VF}),o($Vg1,[2,46],{45:$Vt,46:$Vu,47:$Vv,48:$Vw,57:$VF}),o($Vg1,[2,47],{45:$Vt,46:$Vu,47:$Vv,48:$Vw,57:$VF}),o($VN,[2,48]),o($VN,$VQ),{18:[1,191],45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL},{15:[1,192]},{18:[1,193]},{15:[1,194]},{18:[1,195]},{15:[1,196]},{26:[1,197]},{15:[1,198]},{18:[1,199]},{15:[1,200]},{18:[1,201]},{15:[1,202]},{18:[1,203]},{18:[1,204],26:[1,205]},o($VN,[2,57]),o($Vh1,[2,59]),o($Vh1,[2,60],{45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL}),o($Vh1,[2,61],{73:171,74:$VR}),o([45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,117,118,122,131],$VQ,{74:[1,206]}),o($VP,[2,133],{26:[1,207]}),o($Vr,[2,135]),{15:[1,208]},o($Vr,[2,142],{129:$Vi1}),{65:[1,210],127:211},o($Vj1,[2,147]),{72:212,73:104,74:$VR},{72:213,73:104,74:$VR},o($Vj1,[2,150],{73:171,74:$VR}),{15:[1,214],45:[1,215]},o($V01,$Vk1,{82:216,76:$Vl1,83:[1,217]}),o($V01,$Vk1,{82:219,76:$Vl1}),o($V01,[2,75]),o($V01,[2,114]),o($V01,[2,115]),o($V01,[2,116]),o($V01,[2,117]),{15:[1,220]},o($Vm1,[2,137],{129:$Vi1}),{16:$Vc,24:$V7,28:$VM,33:$Vd,40:84,64:$Vf,65:[1,221],66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},o($Vm1,[2,139],{45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL}),{18:[1,222]},{18:[2,11],26:[1,223]},o($Vh1,[2,14]),{15:[1,224]},o($V01,[2,118]),o($V01,[2,62]),{2:[1,226],15:$V11,45:$VU,75:225,79:176,80:177,81:$VV,83:$VW,84:158,85:$V21,87:$V31,88:$V41,89:$V51,90:$V61,91:$V71,92:$V81,93:$V91,94:$Va1,95:$Vb1,96:$Vc1,97:$Vd1,98:$Ve1,99:$VX,100:$VY,107:$VZ,108:$V_},o($V01,[2,64]),o($V01,[2,66],{76:[1,227]}),o($V01,[2,68]),o($V01,[2,69]),{14:[1,228]},{14:[1,229]},{14:[1,230]},{14:[1,231]},{14:[1,232]},{14:[1,233]},{14:[1,234]},{14:[1,235]},{14:[1,236]},{14:[1,237]},{14:[1,238]},{14:[1,239]},{14:[1,240]},{41:[1,241]},{72:242,73:104,74:$VR},o($VN,[2,108]),{72:243,73:104,74:$VR},o($VN,[2,109]),{72:244,73:104,74:$VR},{65:[1,245]},{72:246,73:104,74:$VR},o($VN,[2,111]),{72:247,73:104,74:$VR},o($VN,[2,112]),{72:248,73:104,74:$VR},o($VN,[2,113]),o($VN,[2,56]),{16:$Vc,24:$V7,28:$VM,33:$Vd,40:143,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,71:249,72:144,73:104,74:$VR,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{15:$Vn1,16:$Vc,24:$V7,28:$VM,33:$Vd,40:253,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,74:[1,251],77:250,81:$Vo1,83:$Vp1,84:257,99:$VX,100:$VY,101:252,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$VZ,108:$V_},{28:$VS,121:258},{72:259,73:104,74:$VR},{15:$VT,45:$VU,72:154,73:104,74:$VR,79:153,81:$VV,83:$VW,84:158,99:$VX,100:$VY,107:$VZ,108:$V_,130:260},o($Vh1,[2,155],{124:[1,261]}),{18:[1,262],26:[1,263]},o($Vj1,[2,148],{73:171,74:$VR}),o($Vj1,[2,149],{73:171,74:$VR}),o($V01,$Vk1,{82:264,76:$Vl1}),o($V01,$Vk1,{82:265,76:$Vl1}),o($V01,[2,72]),o($V01,$Vk1,{82:266,76:$Vl1}),{15:$Vn1,16:$Vc,24:$V7,28:$VM,33:$Vd,40:253,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,77:267,81:$Vo1,83:$Vp1,84:257,99:$VX,100:$VY,101:252,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$VZ,108:$V_},o($V01,[2,74]),{126:[1,268]},o([18,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],$VO,{124:[1,269]}),{19:270,20:[2,22],29:[1,271]},{27:272,28:$V$},{29:[1,273]},o($V01,[2,63]),o($V01,[2,65]),{15:$Vn1,16:$Vc,24:$V7,28:$VM,33:$Vd,40:253,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,77:274,81:$Vo1,83:$Vp1,84:257,99:$VX,100:$VY,101:252,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$VZ,108:$V_},{14:[1,275]},{14:[1,276]},{14:[1,277]},{14:[1,278]},{14:[1,279]},{14:[1,280]},{14:[1,281]},{14:[1,282]},{14:[1,283]},{14:[1,284]},{14:[1,285]},{14:[1,286]},{14:[1,287]},{16:$Vc,24:$V7,28:$VM,33:$Vd,40:288,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{18:[1,289],73:171,74:$VR},{18:[1,290],73:171,74:$VR},{26:[1,291],73:171,74:$VR},{26:[1,292]},{18:[1,293],73:171,74:$VR},{18:[1,294],73:171,74:$VR},{18:[1,295],73:171,74:$VR},o($Vh1,[2,58]),o($VP,[2,131]),{15:$Vn1,16:$Vc,24:$V7,28:$VM,33:$Vd,40:253,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,77:296,81:$Vo1,83:$Vp1,84:257,99:$VX,100:$VY,101:252,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn,107:$VZ,108:$V_},o($Vq1,[2,95]),o($Vq1,[2,96],{45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL}),{15:[1,297],45:[1,298]},o($Vq1,[2,99]),{72:299,73:104,74:$VR},o($Vq1,[2,101]),o($Vr,[2,134]),o($Vr,[2,136],{73:171,74:$VR}),o($Vj1,[2,146]),{65:[1,300]},o($Vr,[2,144]),{65:[1,301]},o($V01,[2,70]),o($V01,[2,71]),o($V01,[2,73]),{78:[1,302]},{15:$VT,45:$VU,72:154,73:104,74:$VR,79:153,81:$VV,83:$VW,84:158,99:$VX,100:$VY,107:$VZ,108:$V_,123:303,130:151},{65:[1,304]},{20:[1,305]},{30:[1,306]},o($Vh1,[2,13]),{30:[1,307]},{78:[1,308]},{15:$Vr1,45:$Vs1,86:309,99:$Vt1,100:$Vu1},{15:$Vr1,45:$Vs1,86:314,99:$Vt1,100:$Vu1},{15:$Vr1,45:$Vs1,86:315,99:$Vt1,100:$Vu1},{15:$Vr1,45:$Vs1,86:316,99:$Vt1,100:$Vu1},{15:$Vr1,45:$Vs1,86:317,99:$Vt1,100:$Vu1},{15:$Vr1,45:$Vs1,86:318,99:$Vt1,100:$Vu1},{15:$Vr1,45:$Vs1,86:319,99:$Vt1,100:$Vu1},{15:$Vr1,45:$Vs1,86:320,99:$Vt1,100:$Vu1},{15:$Vr1,45:$Vs1,86:321,99:$Vt1,100:$Vu1},{15:$Vr1,45:$Vs1,86:322,99:$Vt1,100:$Vu1},{15:$Vr1,45:$Vs1,86:323,99:$Vt1,100:$Vu1},{15:$Vr1,45:$Vs1,86:324,99:$Vt1,100:$Vu1},{15:$Vr1,45:$Vs1,86:325,99:$Vt1,100:$Vu1},{42:326,43:[2,27],45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL},o($VN,[2,102]),o($VN,[2,103]),{65:[1,327]},{65:[1,328]},o($VN,[2,105]),o($VN,[2,106]),o($VN,[2,107]),o($VP,[2,132]),o($Vq1,[2,97]),o($Vq1,[2,98]),o($Vq1,[2,100],{73:171,74:$VR}),{18:[1,329]},o($Vh1,[2,154]),o($V01,[2,93]),o($Vr,[2,145],{129:$Vi1}),{18:[1,330]},o([113,131],$V3,{111:10,112:11,21:331,37:332,38:333,7:334,39:$Ve,122:$V4}),{14:[1,335]},{14:[1,336]},o($V01,[2,67]),o($V01,[2,76]),o($V01,$Vk1,{82:337,76:$Vl1}),o($V01,$Vk1,{82:338,76:$Vl1}),o($V01,$Vk1,{82:339,76:$Vl1}),o($V01,$Vk1,{82:340,76:$Vl1}),o($V01,[2,77]),o($V01,[2,78]),o($V01,[2,79]),o($V01,[2,80]),o($V01,[2,81]),o($V01,[2,82]),o($V01,[2,83]),o($V01,[2,84]),o($V01,[2,85]),o($V01,[2,86]),o($V01,[2,87]),o($V01,[2,88]),{43:[1,341],44:342},{26:[1,343]},{18:[1,344]},o($Vr,[2,143]),o($Vm1,[2,138]),{22:[1,345]},{22:[2,23]},{22:[2,24]},{109:346,113:$V8,131:$V9},{31:347,32:$Vv1,33:$Vw1,34:$Vx1,35:$Vy1,36:$Vz1},{31:353,32:$Vv1,33:$Vw1,34:$Vx1,35:$Vy1,36:$Vz1},o($V01,[2,89]),o($V01,[2,90]),o($V01,[2,91]),o($V01,[2,92]),{16:$Vc,24:$V7,28:$VM,33:$Vd,39:[1,355],40:354,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{43:[2,26]},{65:[1,356]},o($VN,[2,110]),{23:[1,357]},{110:358,131:$Va},{20:[2,21]},o($VA1,[2,16]),o($VA1,[2,17]),o($VA1,[2,18]),o($VA1,[2,19]),o($VA1,[2,20]),o($Vh1,[2,15]),o($Vs,[2,25],{45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL}),{16:[1,359]},{18:[1,360]},o($V6,[2,8]),{22:[2,120]},{16:$Vc,24:$V7,28:$VM,33:$Vd,40:361,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},o($VN,[2,104]),{18:[1,362],45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL},{41:[1,363]},{16:$Vc,24:$V7,28:$VM,33:$Vd,40:364,64:$Vf,65:$Vg,66:$Vh,67:$Vi,68:45,69:46,102:$Vj,103:$Vk,104:$Vl,105:$Vm,106:$Vn},{43:[2,28],45:$Vt,46:$Vu,47:$Vv,48:$Vw,49:$Vx,50:$Vy,51:$Vz,52:$VA,53:$VB,54:$VC,55:$VD,56:$VE,57:$VF,58:$VG,59:$VH,60:$VI,61:$VJ,62:$VK,63:$VL}],
defaultActions: {8:[2,1],17:[2,2],18:[2,156],26:[2,10],28:[2,158],36:[2,157],55:[2,125],95:[2,127],332:[2,23],333:[2,24],342:[2,26],347:[2,21],358:[2,120]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //const Nodo = require("./AST/nodo_arbol");
    //var raiz;

    const {Primitiva} = require("../Expresiones/Primitiva");
    const {Operacion} = require("../Expresiones/Operacion");
    const {Consulta} = require("../XPath/Consulta");
    const {Nodo} = require("../XPath/Nodo");
    const {Predicate} = require("../XPath/Predicate");
    const {TipoPrim} = require("../Expresiones/Primitiva")
    const {TipoOperacion} = require("../Expresiones/Operacion");
    const {TipoNodo} = require("../XPath/Nodo");
    const {TipoAxis} = require("../XPath/Nodo")

    const errores = require('../Global/ListaError');

    //IMPORTS XQUERY
    const {Flwor} = require("../XQuery/Flwor");
    const {Return} = require("../XQuery/Return");
    const {TipoReturn} = require("../XQuery/Return")
    const {Where} = require("../XQuery/Where");
    const {For} = require("../XQuery/For");
    const {Let} = require("../XQuery/Let");            
    const {OrderBy} = require("../XQuery/OrderBy");    
    const {TipoFor} = require("../XQuery/DeclaracionFor")
    const {DeclaracionFor} = require("../XQuery/DeclaracionFor")
    const {Sort} = require("../XQuery/Sort")
    const {CondicionIf} = require("../XQuery/CondicionIf")
    const {FuncionXQuery} = require("../XQuery/FuncionXQuery")
    const {Html} = require("../XQuery/Html")
    const {IfThenElse} = require("../XQuery/IfThenElse")
    const {ElseIf} = require("../XQuery/ElseIf")
    const {VarCall} = require("../XQuery/VarCall")
    const {TipoFuncionXQ} = require("../XQuery/FuncionXQuery")
    const {Atributo} = require("../XML/Atributo");
    const {UserFunction} = require("../XQuery/UserFunction");

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:this.begin('comment');
break;
case 2:this.popState();
break;
case 3:/* skip comment content*/
break;
case 4:return 28;
break;
case 5:return 53;
break;
case 6:return 74;
break;
case 7:return "dot";
break;
case 8:return "attr";
break;
case 9:return "corA";
break;
case 10:return "corC";
break;
case 11:return "andSelect";
break;
case 12:return "dospuntos";
break;
case 13:return "parA";
break;
case 14:return "parC";
break;
case 15:return "llaveA";
break;
case 16:return "llaveC";
break;
case 17:return "coma";
break;
case 18:return "puntocoma"
break;
case 19:return 45;
break;
case 20:return "mas";
break;
case 21:return "menos";
break;
case 22:return "div";
break;
case 23:return 49;
break;
case 24:return "gte";
break;
case 25:return 50;
break;
case 26:return 52;
break;
case 27:return "nequal";
break;
case 28:return "or";
break;
case 29:return "and";
break;
case 30:return "mod";
break;
case 31:return   "for";
break;
case 32:return "in";
break;
case 33:return "to";
break;
case 34:return "at";
break;
case 35:return "let";
break;
case 36:return "where";
break;
case 37:return "order";
break;
case 38:return "by";   
break;
case 39:return "return";
break;
case 40:return "if";
break;
case 41:return "else";
break;
case 42:return "then";
break;
case 43:return "reserv_eq";
break;
case 44:return "reserv_gt";
break;
case 45:return "reserv_ge";
break;
case 46:return "reserv_ne";
break;
case 47:return "reserv_le";
break;
case 48:return "reserv_lt"
break;
case 49:return "ancestorSelf";
break;
case 50:return "ancestor";
break;
case 51:return "attribute";
break;
case 52:return "child";
break;
case 53:return "descendantSelf";
break;
case 54:return "descendant";
break;
case 55:return "followingSib";
break;
case 56:return "following";
break;
case 57:return "namespace";
break;
case 58:return "parent";
break;
case 59:return "precedSib";
break;
case 60:return "preced";
break;
case 61:return "self";
break;
case 62:return "data";
break;
case 63:return "upper-case";
break;
case 64:return "substring";
break;
case 65:return "lower-case";
break;
case 66:return "number";
break;
case 67:return "declare";
break;
case 68:return "function";
break;
case 69:return "local";
break;
case 70:return "decimal";
break;
case 71:return "string";
break;
case 72:return "boolean";
break;
case 73:return "integer";
break;
case 74:return "as";
break;
case 75:return "xs";
break;
case 76:return "lastFunc";
break;
case 77:return "positionFunc";
break;
case 78:return "nodeFunc";
break;
case 79:return "textFunc";
break;
case 80:return 64;
break;
case 81:return 65;
break;
case 82:return 15;
break;
case 83:return 66;
break;
case 84:return 67;
break;
case 85:
                                        console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column);
                                    
break;
case 86:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\(:)/i,/^(?::\))/i,/^(?:.)/i,/^(?:\$)/i,/^(?:=)/i,/^(?:\/)/i,/^(?:\.)/i,/^(?:@)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:;)/i,/^(?:\*)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:div\b)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!=)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:mod\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:to\b)/i,/^(?:at\b)/i,/^(?:let\b)/i,/^(?:where\b)/i,/^(?:order\b)/i,/^(?:by\b)/i,/^(?:return\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:then\b)/i,/^(?:eq\b)/i,/^(?:gt\b)/i,/^(?:ge\b)/i,/^(?:ne\b)/i,/^(?:le\b)/i,/^(?:lt\b)/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:attribute\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:following-sibling\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:preceding-sibling\b)/i,/^(?:preceding\b)/i,/^(?:self\b)/i,/^(?:data\b)/i,/^(?:upper-case\b)/i,/^(?:substring\b)/i,/^(?:lower-case\b)/i,/^(?:number\b)/i,/^(?:declare\b)/i,/^(?:function\b)/i,/^(?:local\b)/i,/^(?:decimal\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:integer\b)/i,/^(?:as\b)/i,/^(?:xs\b)/i,/^(?:last\(\))/i,/^(?:position\(\))/i,/^(?:node\(\))/i,/^(?:text\(\))/i,/^(?:(([0-9]+\.[0-9]*)|(\.[0-9]+)))/i,/^(?:[0-9]+)/i,/^(?:[a-zA-Z_][a-zA-Z0-9_ñÑ.-]*)/i,/^(?:("((\\([\'\"\\]))|([^\"\\]+))*"))/i,/^(?:('((\\([\'\"\\]))|([^\'\\]))*'))/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"inclusive":true},"INITIAL":{"rules":[0,1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = XQuery;
exports.Parser = XQuery.Parser;
exports.parse = function () { return XQuery.parse.apply(XQuery, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}