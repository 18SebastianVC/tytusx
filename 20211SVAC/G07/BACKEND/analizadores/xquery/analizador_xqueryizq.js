/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador_xqueryizq = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,11],$V3=[1,10],$V4=[1,28],$V5=[1,27],$V6=[1,29],$V7=[1,23],$V8=[1,19],$V9=[1,20],$Va=[1,21],$Vb=[1,22],$Vc=[1,24],$Vd=[1,25],$Ve=[1,30],$Vf=[5,14,22,45,50,52],$Vg=[1,38],$Vh=[5,14,22,30,31,33,37,41,45,48,49,50,52],$Vi=[2,71],$Vj=[1,41],$Vk=[1,43],$Vl=[5,14,22,30,31,33,37,41,45,48,49,50,52,77],$Vm=[2,81],$Vn=[19,39,43,82,87,90],$Vo=[1,47],$Vp=[5,14,19,22,30,31,33,37,39,41,43,45,48,49,50,52,66,74,77,81,82,84,86,87,90],$Vq=[1,55],$Vr=[1,59],$Vs=[1,52],$Vt=[1,53],$Vu=[1,54],$Vv=[1,56],$Vw=[1,57],$Vx=[1,58],$Vy=[1,60],$Vz=[5,14,19,22,30,31,33,37,39,41,43,45,48,49,50,52,65,66,73,74,77,81,82,84,86,87,89,90,91,92,93,94,95,96,97],$VA=[5,14,22,50],$VB=[1,69],$VC=[5,14,22],$VD=[1,104],$VE=[38,42],$VF=[5,14,19,22,30,31,33,37,39,41,43,45,48,49,50,52,65,66,73,74,77,81,82,84,86,87,89,90,91,92,94,95,96],$VG=[5,14,19,22,30,31,33,37,39,41,43,45,48,49,50,52,65,66,73,74,77,81,82,84,86,87,89,90,94,95,96],$VH=[17,19],$VI=[1,119],$VJ=[1,117],$VK=[1,118],$VL=[5,14,22,37,48,49,50,52],$VM=[1,123],$VN=[1,122],$VO=[5,14,22,37,48,49,52],$VP=[19,21,56],$VQ=[1,143],$VR=[1,144],$VS=[1,142],$VT=[1,146],$VU=[1,149],$VV=[1,156],$VW=[5,14,22,37,45,50,52],$VX=[19,21],$VY=[19,21,48,49,56,66,72];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"CONSTRUCCION":4,"EOF":5,"ELEMENTO":6,"ESTRUCTURAHTML":7,"CONTENIDO":8,"tk_html_abre":9,"ESTRUCTURAHTMLBD":10,"tk_html_cierra":11,"tk_body_abre":12,"ESTRUCTURAHTMLH1":13,"tk_body_cierra":14,"tk_h1_abre":15,"LISTAID":16,"tk_h1_cierra":17,"ESTRUCTURAHTMLUL":18,"tk_identificador":19,"tk_ul_abre":20,"tk_llave_izq":21,"tk_llave_der":22,"tk_ul_cierra":23,"ENCABEZADO":24,"ACCIONWHE":25,"ACCIONOBY":26,"ACCIONRET":27,"tk_for":28,"EXPRESION":29,"tk_at":30,"tk_in":31,"tk_let":32,"tk_let_igual":33,"PRODUCCION":34,"XPATHGRA":35,"LISTAELEMENTO":36,"tk_coma":37,"tk_parentesis_izq":38,"tk_numero":39,"tk_to":40,"tk_parentesis_der":41,"tk_doc":42,"tk_hilera":43,"tk_dolar":44,"tk_where":45,"LISTAWHE":46,"ESTIMACIONAND":47,"tk_and":48,"tk_or":49,"tk_order_by":50,"LISTAOBY":51,"tk_return":52,"VALORRETURN":53,"tk_li_abre":54,"LISTARET":55,"tk_li_cierra":56,"ESTRUCTURAIF":57,"ESTRUCTURATHEN":58,"ESTRUCTURAELSE":59,"ETIQUETAABRE":60,"LISTAOPHT":61,"ETIQUETACIERRA":62,"AGREGACION":63,"OPCIONHTML":64,"tk_igual":65,"tk_punto":66,"OPCIONDATA":67,"tk_data":68,"tk_if":69,"tk_then":70,"tk_else":71,"tk_menor":72,"tk_mayor":73,"tk_diagonal":74,"EXPRESIONXPA":75,"ELEMENTO_P":76,"tk_barra_or":77,"SIMBOLOS":78,"CAJETIN":79,"SIMBOLOS_P":80,"tk_diagonal_doble":81,"tk_arroba":82,"ARROPROD":83,"tk_puntos_seguidos":84,"PRODUCT":85,"tk_asterisco":86,"tk_corchete_izq":87,"DATO":88,"tk_corchete_der":89,"tk_last":90,"tk_mas":91,"tk_menos":92,"tk_div":93,"tk_indiferente":94,"tk_menor_igual":95,"tk_mayor_igual":96,"tk_mod":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"tk_html_abre",11:"tk_html_cierra",12:"tk_body_abre",14:"tk_body_cierra",15:"tk_h1_abre",17:"tk_h1_cierra",19:"tk_identificador",20:"tk_ul_abre",21:"tk_llave_izq",22:"tk_llave_der",23:"tk_ul_cierra",28:"tk_for",30:"tk_at",31:"tk_in",32:"tk_let",33:"tk_let_igual",37:"tk_coma",38:"tk_parentesis_izq",39:"tk_numero",40:"tk_to",41:"tk_parentesis_der",42:"tk_doc",43:"tk_hilera",44:"tk_dolar",45:"tk_where",48:"tk_and",49:"tk_or",50:"tk_order_by",52:"tk_return",54:"tk_li_abre",56:"tk_li_cierra",65:"tk_igual",66:"tk_punto",68:"tk_data",69:"tk_if",70:"tk_then",71:"tk_else",72:"tk_menor",73:"tk_mayor",74:"tk_diagonal",77:"tk_barra_or",81:"tk_diagonal_doble",82:"tk_arroba",83:"ARROPROD",84:"tk_puntos_seguidos",85:"PRODUCT",86:"tk_asterisco",87:"tk_corchete_izq",89:"tk_corchete_der",90:"tk_last",91:"tk_mas",92:"tk_menos",93:"tk_div",94:"tk_indiferente",95:"tk_menor_igual",96:"tk_mayor_igual",97:"tk_mod"},
productions_: [0,[3,2],[4,1],[4,1],[4,1],[7,3],[7,0],[10,3],[10,0],[13,4],[13,0],[16,2],[16,1],[18,1],[18,5],[8,4],[8,3],[24,5],[24,3],[24,3],[6,2],[6,1],[36,9],[36,5],[36,9],[36,5],[34,4],[29,2],[25,3],[25,2],[25,0],[46,3],[46,1],[47,1],[47,1],[47,1],[26,3],[26,2],[26,0],[51,3],[51,1],[27,2],[53,1],[53,3],[53,3],[53,3],[55,2],[55,1],[61,5],[61,7],[61,3],[61,5],[63,1],[63,1],[63,1],[64,3],[64,1],[64,3],[64,1],[67,4],[57,4],[58,4],[58,4],[58,0],[59,4],[59,4],[59,3],[60,3],[62,4],[35,2],[76,3],[76,0],[75,3],[75,2],[78,1],[78,1],[78,2],[78,2],[78,2],[78,2],[80,1],[80,0],[79,3],[79,1],[88,1],[88,1],[88,1],[88,2],[88,3],[88,3],[88,3],[88,3],[88,3],[88,3],[88,3],[88,3],[88,3],[88,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 14:
console.log($$[$0-4]);
        console.log($$[$0-3]);
        console.log($$[$0-1]);
        console.log($$[$0]);
break;
case 17:
console.log($$[$0-4]);
        console.log($$[$0-2]);
break;
case 26: case 68:
console.log($$[$0-3]);
        console.log($$[$0-2]);
        console.log($$[$0-1]);
        console.log($$[$0]);
break;
case 27: case 41: case 76: case 77: case 78: case 89: case 90: case 91: case 92: case 93: case 94: case 95: case 96: case 97:
console.log($$[$0-1]);
break;
case 28: case 36: case 70:
console.log($$[$0-2]);
break;
case 43:
console.log($$[$0-2]);
        console.log($$[$0]);
break;
case 59: case 60: case 62: case 65:
console.log($$[$0-3]);
        console.log($$[$0-2]);
        console.log($$[$0]);
break;
case 61: case 64:
console.log($$[$0-3]);
break;
case 66: case 67: case 88:
console.log($$[$0-2]);
        console.log($$[$0-1]);
        console.log($$[$0]);
break;
case 74: case 75: case 84: case 85: case 86:
console.log($$[$0]);
break;
case 79:
console.log($$[$0-1]);
         console.log($$[$0]);
break;
case 87:
console.log($$[$0-1]);
        console.log($$[$0]);
break;
}
},
table: [{3:1,4:2,5:[2,6],6:3,7:4,8:5,9:[1,8],24:9,28:$V0,32:$V1,34:6,36:7,38:$V2,42:$V3},{1:[3]},{5:[1,14]},{5:[2,2]},{5:[2,3]},{5:[2,4]},{19:$V4,35:15,39:$V5,43:$V6,66:$V7,74:$V8,75:16,78:17,79:18,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:26,90:$Ve},o($Vf,[2,21],{37:[1,31]}),{10:32,11:[2,8],12:[1,33]},{6:34,34:6,36:7,38:$V2,42:$V3},{38:[1,35]},{39:[1,36]},{29:37,44:$Vg},{29:39,44:$Vg},{1:[2,1]},o($Vf,[2,20]),o($Vh,$Vi,{76:40,77:$Vj}),{19:$V4,39:$V5,43:$V6,79:42,82:$Vk,87:$Vd,88:26,90:$Ve},o($Vl,$Vm,{78:17,79:18,88:26,80:44,75:45,19:$V4,39:$V5,43:$V6,66:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,90:$Ve}),o($Vn,[2,74]),o($Vn,[2,75]),{19:$Vo,83:[1,46]},{85:[1,48]},{85:[1,49]},{19:[1,50]},{19:$V4,39:$V5,43:$V6,82:$Vk,88:51,90:$Ve},o($Vp,[2,83],{65:$Vq,73:$Vr,91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy}),o($Vz,[2,84]),o($Vz,[2,85]),o($Vz,[2,86]),{38:[1,61]},{29:62,44:$Vg},{11:[1,63]},{13:64,14:[2,10],15:[1,65]},o($VA,[2,30],{25:66,27:67,45:[1,68],52:$VB}),{43:[1,70]},{37:[1,72],40:[1,71]},{30:[1,73],31:[1,74]},{19:$V4,35:75,39:$V5,43:$V6,66:$V7,74:$V8,75:16,78:17,79:18,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:26,90:$Ve},{33:[1,76]},o($Vh,[2,69]),{19:$V4,39:$V5,43:$V6,66:$V7,74:$V8,75:77,78:17,79:18,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,88:26,90:$Ve},o($Vl,$Vm,{78:17,79:18,88:26,75:45,80:78,19:$V4,39:$V5,43:$V6,66:$V7,74:$V8,81:$V9,82:$Va,84:$Vb,86:$Vc,87:$Vd,90:$Ve}),{19:$Vo},o($Vl,[2,73]),o($Vl,[2,80]),o($Vn,[2,76]),o($Vz,[2,87]),o($Vn,[2,77]),o($Vn,[2,78]),o($Vn,[2,79]),{65:$Vq,73:$Vr,89:[1,79],91:$Vs,92:$Vt,93:$Vu,94:$Vv,95:$Vw,96:$Vx,97:$Vy},{19:$V4,39:$V5,43:$V6,82:$Vk,88:80,90:$Ve},{19:$V4,39:$V5,43:$V6,82:$Vk,88:81,90:$Ve},{19:$V4,39:$V5,43:$V6,82:$Vk,88:82,90:$Ve},{19:$V4,39:$V5,43:$V6,82:$Vk,88:83,90:$Ve},{19:$V4,39:$V5,43:$V6,82:$Vk,88:84,90:$Ve},{19:$V4,39:$V5,43:$V6,82:$Vk,88:85,90:$Ve},{19:$V4,39:$V5,43:$V6,82:$Vk,88:86,90:$Ve},{19:$V4,39:$V5,43:$V6,82:$Vk,88:87,90:$Ve},{19:$V4,39:$V5,43:$V6,82:$Vk,88:88,90:$Ve},{41:[1,89]},{31:[1,90]},{5:[2,5]},{14:[1,91]},{16:92,19:[1,93]},o($VC,[2,38],{26:94,50:[1,95]}),o($VC,[2,16]),{29:97,44:$Vg,46:96},{29:99,44:$Vg,53:98,54:[1,100],57:101,60:102,69:[1,103],72:$VD},{41:[1,105]},{39:[1,106]},{39:[1,107]},{29:108,44:$Vg},o($VE,[2,18]),o([5,14,22,30,31,33,37,41,48,49,50,52],[2,27]),o($VE,[2,19]),o($Vh,$Vi,{76:109,77:$Vj}),o($Vl,[2,72]),o($Vp,[2,82]),o($VF,[2,89],{93:$Vu,97:$Vy}),o($VF,[2,90],{93:$Vu,97:$Vy}),o($Vz,[2,91]),o($VG,[2,92],{91:$Vs,92:$Vt,93:$Vu,97:$Vy}),o([5,14,19,22,30,31,33,37,39,41,43,45,48,49,50,52,66,74,77,81,82,84,86,87,89,90,94],[2,93],{65:$Vq,73:$Vr,91:$Vs,92:$Vt,93:$Vu,95:$Vw,96:$Vx,97:$Vy}),o($VG,[2,94],{91:$Vs,92:$Vt,93:$Vu,97:$Vy}),o($VG,[2,95],{91:$Vs,92:$Vt,93:$Vu,97:$Vy}),o($VG,[2,96],{91:$Vs,92:$Vt,93:$Vu,97:$Vy}),o($Vz,[2,97]),o($Vz,[2,88]),{38:[1,110]},{11:[2,7]},{17:[1,111],19:[1,112]},o($VH,[2,12]),o($VC,[2,15]),{29:114,44:$Vg,51:113},o($VA,[2,29],{27:115,47:116,37:$VI,48:$VJ,49:$VK,52:$VB}),o($VL,[2,32]),o($VA,[2,41]),o($VA,[2,42]),{19:$VM,21:$VN,55:120,61:121},{58:124,70:[1,125],71:[2,63]},{19:$VM,21:$VN,61:126},{38:[1,127]},{19:[1,128]},o([19,39,43,66,74,81,82,84,86,87,90],[2,26]),{41:[1,129]},{41:[1,130]},{31:[1,131]},o($Vh,[2,70]),{39:[1,132]},{8:134,18:133,20:[1,135],24:9,28:$V0,32:$V1},o($VH,[2,11]),o($VC,[2,37],{27:136,47:137,37:$VI,48:$VJ,49:$VK,52:$VB}),o($VO,[2,40]),o($VA,[2,28]),{29:138,44:$Vg},{44:[2,33]},{44:[2,34]},{44:[2,35]},{19:$VM,21:$VN,56:[1,139],61:140},o($VP,[2,47],{63:141,48:$VQ,49:$VR,66:$VS}),{21:$VT,29:147,44:$Vg,64:145,67:148,68:$VU},{65:[1,150]},{59:151,71:[1,152]},{38:[1,154],60:153,72:$VD},{48:$VQ,49:$VR,62:155,63:141,66:$VS,72:$VV},{29:157,44:$Vg},{73:[1,158]},o($VW,[2,23]),o($VW,[2,25]),o($VE,[2,17]),{37:[1,160],40:[1,159]},{14:[2,9]},{14:[2,13]},{21:[1,161]},o($VC,[2,36]),{29:162,44:$Vg},o($VL,[2,31]),o($VA,[2,43]),o($VP,[2,46],{63:141,48:$VQ,49:$VR,66:$VS}),{19:[1,164],21:[1,163]},o($VX,[2,52]),o($VX,[2,53]),o($VX,[2,54]),{22:[1,165]},{29:166,44:$Vg,67:167,68:$VU},{22:[2,56]},{22:[2,58]},{38:[1,168]},{21:[1,169]},o($VA,[2,44]),{38:[1,171],60:170,72:$VD},{19:$VM,21:$VN,61:172},{29:173,44:$Vg},o($VA,[2,45]),{74:[1,174]},{41:[1,175]},o($VX,[2,67]),{39:[1,176]},{39:[1,177]},{8:178,24:9,28:$V0,32:$V1},o($VO,[2,39]),{21:$VT,29:147,44:$Vg,64:179,67:148,68:$VU},{65:[1,180]},o($VY,[2,50]),{22:[1,181]},{22:[1,182]},{29:183,44:$Vg},{21:$VT,29:147,44:$Vg,64:184,67:148,68:$VU},{19:$VM,21:$VN,61:185},{29:186,41:[1,187],44:$Vg},{48:$VQ,49:$VR,62:188,63:141,66:$VS,72:$VV},{41:[1,189]},{19:[1,190]},o([70,71],[2,60]),{41:[1,191]},{41:[1,192]},{22:[1,193]},{22:[1,194]},{21:[1,195]},{22:[2,55]},{22:[2,57]},{41:[1,196]},{22:[1,197]},{48:$VQ,49:$VR,62:198,63:141,66:$VS,72:$VV},{41:[1,199]},o($VA,[2,66]),{71:[2,61]},{71:[2,62]},{73:[1,200]},o($VW,[2,22]),o($VW,[2,24]),{23:[1,201]},o($VY,[2,48]),{21:$VT,29:147,44:$Vg,64:202,67:148,68:$VU},{22:[2,59]},o($VY,[2,51]),o($VA,[2,64]),o($VA,[2,65]),o([5,14,22,50,71],[2,68]),{14:[2,14]},{22:[1,203]},o($VY,[2,49])],
defaultActions: {3:[2,2],4:[2,3],5:[2,4],14:[2,1],63:[2,5],91:[2,7],117:[2,33],118:[2,34],119:[2,35],133:[2,9],134:[2,13],147:[2,56],148:[2,58],181:[2,55],182:[2,57],188:[2,61],189:[2,62],196:[2,59],201:[2,14]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* Omitir espacios en blanco */ 
break;
case 1: /* Omitir saltos de linea, tabs y retornos*/ 
break;
case 2:
break;
case 3: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 42;
break;
case 4: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 28;
break;
case 5: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 32;
break;
case 6: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 45;
break;
case 7: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 50;
break;
case 8: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 52;
break;
case 9: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 68;
break;
case 10: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 69;
break;
case 11: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 70;
break;
case 12: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 71;
break;
case 13: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 31;
break;
case 14: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 40;
break;
case 15: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 30;
break;
case 16: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_eq';
break;
case 17: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ne';
break;
case 18: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_lt';
break;
case 19: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_le';
break;
case 20: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_gt';
break;
case 21: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ge';
break;
case 22: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 9;
break;
case 23: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 11;
break;
case 24: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 12;
break;
case 25: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 14;
break;
case 26: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 15;
break;
case 27: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 17;
break;
case 28: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 20;
break;
case 29: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 23;
break;
case 30: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 54;
break;
case 31: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 56;
break;
case 32: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 44;
break;
case 33: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 49;
break;
case 34: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 48;
break;
case 35: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 97;
break;
case 36: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 93;
break;
case 37: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_node';
break;
case 38: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_text';
break;
case 39: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_namespace_node';
break;
case 40: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ancestor_or_self';
break;
case 41: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ancestor';
break;
case 42: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_attribute';
break;
case 43: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_child';
break;
case 44: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_descendant_or_self';
break;
case 45: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_descendant';
break;
case 46: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_following_sibling';
break;
case 47: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_following';
break;
case 48: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_namespace';
break;
case 49: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_parent';
break;
case 50: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_preceding_sibling';
break;
case 51: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_preceding';
break;
case 52: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_self';
break;
case 53: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_child';
break;
case 54: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_attribute';
break;
case 55: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 90;
break;
case 56: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_position';
break;
case 57: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_text';
break;
case 58: listaTokens.push(new Token("ComparacionLet", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 33;
break;
case 59: listaTokens.push(new Token("Barra", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 77;
break;
case 60: listaTokens.push(new Token("Suma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 91;
break;
case 61: listaTokens.push(new Token("Resta", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 92;
break;
case 62: listaTokens.push(new Token("Asterisco", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 86;
break;
case 63: listaTokens.push(new Token("Indiferente", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 94;
break;
case 64: listaTokens.push(new Token("Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 65;
break;
case 65: listaTokens.push(new Token("Menor_igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 95;
break;
case 66: listaTokens.push(new Token("Menor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 72;
break;
case 67: listaTokens.push(new Token("Mayor_Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 96;
break;
case 68: listaTokens.push(new Token("Mayor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 73;
break;
case 69: listaTokens.push(new Token("Cuatro_Puntos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_cuatro_puntos';
break;
case 70: listaTokens.push(new Token("Diagonal_doble", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 81;
break;
case 71: listaTokens.push(new Token("Division", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 74;
break;
case 72: listaTokens.push(new Token("Arroba", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 82;
break;
case 73: listaTokens.push(new Token("Puntos_Seguidos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 84;
break;
case 74: listaTokens.push(new Token("Parentesis_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 38;
break;
case 75: listaTokens.push(new Token("Parentesis_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 41;
break;
case 76: listaTokens.push(new Token("Corchete_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_izq";
break;
case 77: listaTokens.push(new Token("Corchete_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_der";
break;
case 78: listaTokens.push(new Token("Llave_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_llave_izq";
break;
case 79: listaTokens.push(new Token("Llave_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_llave_der";
break;
case 80: listaTokens.push(new Token("Coma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_coma";
break;
case 81: listaTokens.push(new Token("Punto", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 66;
break;
case 82: listaTokens.push(new Token("Caracter", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_caracter";
break;
case 83: listaTokens.push(new Token("Cadena", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_hilera";
break;
case 84: listaTokens.push(new Token("Identificador", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_identificador";
break;
case 85: listaTokens.push(new Token("Numero", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_numero";
break;
case 86: return "EOF"; 
break;
case 87: listaErrores.push(new TokenError("xPATH","ERROR LEXICO","Caracter no reconocido "+ yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column )); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:[\t\r]+)/,/^(?:[(][:][^:]*[:]+[)])/,/^(?:doc\b)/,/^(?:for\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order by\b)/,/^(?:return\b)/,/^(?:data\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:in\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:<html>)/,/^(?:<\/html>)/,/^(?:<body>)/,/^(?:<\/body>)/,/^(?:<h1>)/,/^(?:<\/h1>)/,/^(?:<ul>)/,/^(?:<\/ul>)/,/^(?:<li>)/,/^(?:<\/li>)/,/^(?:\$)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:div\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:namespace-node\b)/,/^(?:ancestor-or-self\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:descendant\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:child\b)/,/^(?:attribute\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:text\b)/,/^(?::=)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:!=)/,/^(?:=)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:::)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:@)/,/^(?:\.\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?:'[^\']*')/,/^(?:"([^\\\"]|\\.)*")/,/^(?:[a-zA-Z_À-ÿ\u00F1\u00D1]([a-zA-ZÀ-ÿ\-\.\u00F1\u00D10-9_])*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador_xqueryizq;
exports.Parser = analizador_xqueryizq.Parser;
exports.parse = function () { return analizador_xqueryizq.parse.apply(analizador_xqueryizq, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}