/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador_xqueryizq = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,34],$V1=[1,15],$V2=[1,31],$V3=[1,16],$V4=[1,19],$V5=[1,30],$V6=[1,32],$V7=[1,37],$V8=[1,38],$V9=[1,20],$Va=[1,21],$Vb=[1,22],$Vc=[1,23],$Vd=[1,33],$Ve=[28,46],$Vf=[5,50,82],$Vg=[5,50,82,87],$Vh=[1,49],$Vi=[5,21,52],$Vj=[5,28,30,46,50,82,87],$Vk=[2,48],$Vl=[1,54],$Vm=[1,55],$Vn=[5,35,50,53,81,82,87],$Vo=[5,28,30,34,35,36,37,38,39,40,41,42,43,44,45,46,50,77,82,87],$Vp=[2,102],$Vq=[5,28,30,34,35,36,37,38,39,40,41,42,43,44,45,46,50,57,59,77,82,87],$Vr=[1,84],$Vs=[1,85],$Vt=[1,88],$Vu=[1,93],$Vv=[1,95],$Vw=[1,94],$Vx=[1,96],$Vy=[1,97],$Vz=[1,99],$VA=[2,69],$VB=[1,112],$VC=[1,125],$VD=[1,126],$VE=[1,127],$VF=[1,128],$VG=[1,129],$VH=[1,130],$VI=[1,131],$VJ=[1,132],$VK=[1,133],$VL=[1,134],$VM=[1,135],$VN=[1,136],$VO=[28,34,35,36,37,38,39,40,41,42,43,44,45,46,50],$VP=[50,77],$VQ=[1,153],$VR=[1,154],$VS=[1,152],$VT=[1,151],$VU=[1,149],$VV=[1,150],$VW=[1,146],$VX=[1,144],$VY=[1,145],$VZ=[1,147],$V_=[1,148],$V$=[5,21,34,35,36,37,38,39,52,63,66,68,69,70,71],$V01=[28,30,46],$V11=[5,21,34,35,36,37,38,39,52,66,68,69],$V21=[5,21,34,35,36,37,38,39,52,66],$V31=[1,231],$V41=[1,232],$V51=[1,233],$V61=[5,35,53,81];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"XQUERYGRA":4,"EOF":5,"HTML":6,"INSTRUCCIONES":7,"FUNCACKERMAN":8,"INSTRUCCION":9,"FOR_IN":10,"WHERE":11,"ORDEN":12,"RETURN":13,"LLAMADA":14,"F_DATA":15,"F_UPPER":16,"F_LOWER":17,"F_SUBSTRING":18,"CREAR_V":19,"ASIGNAR_V":20,"tk_let":21,"VARIABLE":22,"tk_let_igual":23,"DATO":24,"tk_for":25,"tk_in":26,"tk_at":27,"tk_order_by":28,"XPATHGRA":29,"tk_where":30,"CONDICIONAL":31,"tk_numero":32,"tk_hilera":33,"tk_mayor":34,"tk_menor":35,"tk_mayor_igual":36,"tk_menor_igual":37,"tk_igual":38,"tk_indiferente":39,"tk_gt":40,"tk_lt":41,"tk_ge":42,"tk_le":43,"tk_eq":44,"tk_ne":45,"tk_return":46,"IF":47,"tk_doc":48,"tk_parentesis_izq":49,"tk_parentesis_der":50,"tk_to":51,"tk_dolar":52,"tk_identificador":53,"CONSULTA_":54,"CONSULTA":55,"NODO":56,"tk_diagonal":57,"PREDICADO":58,"tk_diagonal_doble":59,"tk_puntos_seguidos":60,"tk_arroba":61,"tk_punto":62,"tk_asterisco":63,"tk_node":64,"tk_corchete_izq":65,"tk_corchete_der":66,"tk_last":67,"tk_mas":68,"tk_menos":69,"tk_div":70,"tk_mod":71,"tk_data":72,"CONS":73,"tk_upper":74,"tk_lower":75,"tk_substring":76,"tk_coma":77,"CONTENIDO":78,"L_CONTENIDO":79,"COD":80,"tk_llave_izq":81,"tk_llave_der":82,"tk_if":83,"THEN":84,"ELSE":85,"tk_then":86,"tk_else":87,"CABEZAFUNC":88,"LISTAFUNC":89,"RETURNFUNC":90,"FUNCOPERACION":91,"tk_punto_coma":92,"LLAMADAFUNCION":93,"tk_declare":94,"tk_function":95,"tk_local":96,"LISTACONF":97,"tk_as":98,"tk_xs":99,"CODIGOFUNCION":100,"LLAFCONT":101,"L_LLAFCONT":102,"LLAD":103,"FF":104,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",21:"tk_let",23:"tk_let_igual",25:"tk_for",26:"tk_in",27:"tk_at",28:"tk_order_by",30:"tk_where",32:"tk_numero",33:"tk_hilera",34:"tk_mayor",35:"tk_menor",36:"tk_mayor_igual",37:"tk_menor_igual",38:"tk_igual",39:"tk_indiferente",40:"tk_gt",41:"tk_lt",42:"tk_ge",43:"tk_le",44:"tk_eq",45:"tk_ne",46:"tk_return",48:"tk_doc",49:"tk_parentesis_izq",50:"tk_parentesis_der",51:"tk_to",52:"tk_dolar",53:"tk_identificador",57:"tk_diagonal",59:"tk_diagonal_doble",60:"tk_puntos_seguidos",61:"tk_arroba",62:"tk_punto",63:"tk_asterisco",64:"tk_node",65:"tk_corchete_izq",66:"tk_corchete_der",67:"tk_last",68:"tk_mas",69:"tk_menos",70:"tk_div",71:"tk_mod",72:"tk_data",74:"tk_upper",75:"tk_lower",76:"tk_substring",77:"tk_coma",81:"tk_llave_izq",82:"tk_llave_der",83:"tk_if",86:"tk_then",87:"tk_else",92:"tk_punto_coma",94:"tk_declare",95:"tk_function",96:"tk_local",98:"tk_as",99:"tk_xs"},
productions_: [0,[3,2],[3,2],[3,2],[3,2],[7,2],[7,1],[4,4],[4,1],[4,1],[4,1],[4,1],[4,1],[9,1],[9,1],[19,2],[19,4],[20,3],[10,4],[10,6],[12,0],[12,2],[12,3],[11,2],[11,0],[31,2],[31,1],[31,1],[31,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[13,2],[13,3],[13,2],[13,2],[14,5],[14,1],[14,2],[14,1],[14,5],[22,2],[29,1],[54,2],[54,1],[55,2],[55,1],[56,3],[56,3],[56,2],[56,3],[56,2],[56,3],[56,3],[56,3],[56,5],[56,5],[56,3],[56,3],[58,3],[58,0],[24,1],[24,1],[24,1],[24,2],[24,3],[24,1],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[15,4],[16,4],[17,4],[18,6],[18,8],[73,2],[73,1],[6,1],[78,2],[78,1],[78,2],[78,1],[79,3],[79,4],[79,1],[80,3],[47,6],[47,5],[84,2],[84,2],[85,2],[85,2],[8,8],[88,4],[89,3],[89,1],[97,5],[90,3],[91,3],[100,1],[100,0],[93,1],[101,2],[101,1],[101,2],[101,1],[102,3],[102,4],[102,1],[103,7],[104,1],[104,3],[104,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
return {instr:"HTML",valor:$$[$0-1]};
break;
case 3:
return {instr:"MULTIPLES",valor:$$[$0-1]};
break;
case 5: case 54:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 6: case 55: case 97: case 99:
this.$=[$$[$0]];
break;
case 7:
this.$={instr:"FOR_IN",iterador:$$[$0-3],retorno:$$[$0],where:$$[$0-2],order:$$[$0-1]};
break;
case 8:
this.$={instr:"LLAMADA",valor:$$[$0]};
break;
case 9:
this.$={instr:"F_DATA",valor:$$[$0]};
break;
case 10:
this.$={instr:"F_UPPER",valor:$$[$0]};
break;
case 11:
this.$={instr:"F_LOWER",valor:$$[$0]};
break;
case 12:
this.$={instr:"F_SUBSTRING",valor:$$[$0]};
break;
case 13:
this.$={instr:"CREAR",valor:$$[$0]};
break;
case 14:
this.$={instr:"ASIGNAR",valor:$$[$0]};
break;
case 15:
this.$={id:$$[$0],valor:null};
break;
case 16: case 17:
this.$={id:$$[$0-2],valor:$$[$0]};
break;
case 18:
this.$={variable:$$[$0-2],consulta:$$[$0],contador:null}
break;
case 19:
this.$={variable:$$[$0-4],consulta:$$[$0],contador:$$[$0-2]}
break;
case 20: case 24:
this.$=null;
break;
case 21: case 26:
this.$={tipo:"VARIABLE",variable:$$[$0],consulta:null}
break;
case 22: case 25:
this.$={tipo:"VARIABLE",variable:$$[$0-1],consulta:$$[$0]}
break;
case 23:
this.$={instr:"WHERE",condicion:$$[$0]};
break;
case 27:
this.$={tipo:"NUMERO",valor:$$[$0]}
break;
case 28:
this.$={tipo:"CADENA",valor:$$[$0].slice(1,-1)}
break;
case 29: case 35:
this.$={tipo:"MAYOR",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 30: case 36:
this.$={tipo:"MENOR",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 31: case 37:
this.$={tipo:"MAYOR_IGUAL",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 32: case 38:
this.$={tipo:"MENOR_IGUAL",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 33: case 39:
this.$={tipo:"IGUAL",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 34: case 40:
this.$={tipo:"DIFERENTE",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 41:
this.$={tipo:"VAR",variable:$$[$0],consulta:null}
break;
case 42:
this.$={tipo:"VAR",variable:$$[$0-1],consulta:$$[$0]}
break;
case 43: case 106: case 108:
this.$={tipo:"HTML",valor:$$[$0]}
break;
case 44:
this.$={tipo:"IF",valor:$$[$0]}
break;
case 45: case 46: case 50: case 51: case 53: case 95:
this.$=$$[$0];
break;
case 47: case 93:
this.$={variable:$$[$0-1],consulta:$$[$0]}
break;
case 48: case 94:
this.$={variable:$$[$0],consulta:null}
break;
case 49:
this.$={tipo:"TO",inicio:$$[$0-3],fin:$$[$0-1]}
break;
case 52:
$$[$0].unshift({instr:"NODO",valor:$$[$0-1]}); this.$=$$[$0];
break;
case 56: case 61:
this.$= {instr:"ACCESO",valor:$$[$0-1],index:$$[$0]};
break;
case 57: case 62:
this.$= {instr:"ACCESODOBLE",valor:$$[$0-1],index:$$[$0]};
break;
case 58:
this.$= {instr:"RETROCESO"};
break;
case 59: case 63:
this.$= {instr:"ATRIBUTO",valor:$$[$0]};
break;
case 60:
this.$= {instr:"ACTUAL"};
break;
case 64:
this.$= {instr:"ACCESO",valor:"*",index:$$[$0]};
break;
case 65:
this.$= {instr:"ACCESODOBLE",valor:"*",index:$$[$0]};
break;
case 66: case 67:
this.$= {instr:"ATRIBUTODOBLE",valor:$$[$0]};
break;
case 68:
this.$= $$[$0-1];
break;
case 69:
this.$= null;
break;
case 70:
this.$= {tipo:"NUMERO",valor:$$[$0]}
break;
case 71:
this.$= {tipo:"ID",valor:$$[$0]}
break;
case 72:
this.$= {tipo:"CADENA",valor:$$[$0]}
break;
case 73:
this.$= {tipo:"ATRIBUTO",valor:$$[$0]}
break;
case 74:
this.$= {tipo:"LAST"}
break;
case 75:
this.$= {tipo:"VARIABLE",valor:$$[$0]}
break;
case 76:
this.$= {tipo:"OP_MAS",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 77:
this.$= {tipo:"OP_MENOS",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 78:
this.$= {tipo:"OP_MUL",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 79:
this.$= {tipo:"OP_DIV",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 80:
this.$= {tipo:"OP_MOD",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 81:
this.$= {tipo:"OP_NEG",valor1:$$[$0]}
break;
case 82:
this.$= {tipo:"OP_IGUAL",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 83:
this.$= {tipo:"OP_DIFERENTE",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 84:
this.$= {tipo:"OP_MENOR_IGUAL",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 85:
this.$= {tipo:"OP_MAYOR_IGUAL",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 86:
this.$= {tipo:"OP_MAYOR",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 87:
this.$= {tipo:"OP_MENOR",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 88: case 89: case 90:
this.$=$$[$0-1];
break;
case 91:
this.$={valor:$$[$0-3],inicio:$$[$0-1],fin:null};
break;
case 92:
this.$={valor:$$[$0-5],inicio:$$[$0-3],fin:$$[$0-1]};
break;
case 96: case 98:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 100: case 124:
this.$={tipo:"TXT",valor:$$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString()};
break;
case 101: case 125:
this.$={tipo:"TXT",valor:$$[$0-3].toString()+$$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString()};
break;
case 102: case 126:
this.$={tipo:"TXT",valor:$$[$0].toString()};
break;
case 103:
this.$={tipo:"COD",valor:$$[$0-1]};
break;
case 104:
this.$={condicion:$$[$0-3],else:$$[$0],then:$$[$0-1]};
break;
case 105:
this.$={condicion:$$[$0-2],else:null,then:$$[$0]};
break;
case 107: case 109:
this.$={tipo:"LLAMADA",valor:$$[$0]}
break;
case 127:
this.$={tipo:"COD",valor:$$[$0-5]};
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:13,10:6,14:7,15:8,16:9,17:10,18:11,19:26,20:27,21:$V0,22:18,25:$V1,29:17,35:$V2,48:$V3,49:$V4,52:$V5,53:$V6,54:29,55:35,56:36,57:$V7,59:$V8,72:$V9,74:$Va,75:$Vb,76:$Vc,78:12,79:24,80:25,81:$Vd,88:14,94:[1,28]},{1:[3]},{5:[1,39]},{5:[1,40]},{5:[1,41],9:42,19:26,20:27,21:$V0,22:43,52:$V5},{5:[1,44]},o($Ve,[2,24],{11:45,30:[1,46]}),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),o($Vf,[2,11]),o($Vf,[2,12]),o($Vg,[2,95],{79:47,80:48,35:$V2,53:$Vh,81:$Vd}),o($Vi,[2,6]),{49:[1,50]},{22:51,52:$V5},{49:[1,52]},o($Vj,[2,46]),{5:$Vk,23:$Vl,29:53,53:$Vm,54:29,55:35,56:36,57:$V7,59:$V8},{32:[1,56]},{49:[1,57]},{49:[1,58]},{49:[1,59]},{49:[1,60]},o($Vn,[2,97]),o($Vn,[2,99]),o($Vi,[2,13]),o($Vi,[2,14]),{95:[1,61]},o($Vo,[2,51]),{53:[1,62]},{53:[1,63],57:[1,64]},o($Vn,$Vp,{56:36,55:65,57:$V7,59:$V8}),{4:66,10:6,14:7,15:8,16:9,17:10,18:11,22:67,25:$V1,29:17,48:$V3,49:$V4,52:$V5,53:$Vm,54:29,55:35,56:36,57:$V7,59:$V8,72:$V9,74:$Va,75:$Vb,76:$Vc},{22:68,52:$V5},o($Vo,[2,53],{56:69,57:$V7,59:$V8}),o($Vq,[2,55]),{53:[1,70],60:[1,71],61:[1,72],62:[1,73],63:[1,74],64:[1,75]},{53:[1,76],61:[1,79],63:[1,77],64:[1,78]},{1:[2,1]},{1:[2,2]},{1:[2,3]},o($Vi,[2,5]),{23:$Vl},{1:[2,4]},{12:80,28:[1,81],46:[2,20]},{22:83,31:82,32:$Vr,33:$Vs,52:$V5},o($Vn,[2,96]),o($Vn,[2,98]),o($Vn,$Vp),{52:$Vt,89:86,97:87},{26:[1,89],27:[1,90]},{33:[1,91]},o($Vj,[2,47]),{22:98,24:92,32:$Vu,33:$Vv,52:$V5,53:$Vw,61:$Vx,67:$Vy,69:$Vz},{55:65,56:36,57:$V7,59:$V8},{51:[1,100]},{22:102,52:$V5,73:101},{22:102,52:$V5,73:103},{22:102,52:$V5,73:104},{22:102,52:$V5,73:105},{96:[1,106]},o([5,21,23,26,27,28,30,34,35,36,37,38,39,40,41,42,43,44,45,46,50,52,53,57,59,63,66,68,69,70,71,77,82,87],[2,50]),{34:[1,107]},{53:[1,108]},o($Vo,[2,52],{56:69,57:$V7,59:$V8}),{82:[1,109]},o($Vj,$Vk,{54:29,55:35,56:36,29:53,53:$Vm,57:$V7,59:$V8}),o($Vi,[2,15],{23:[1,110]}),o($Vq,[2,54]),o($Vq,$VA,{58:111,65:$VB}),o($Vq,[2,58]),{53:[1,113],63:[1,114]},o($Vq,[2,60]),o($Vq,$VA,{58:115,65:$VB}),{49:[1,116]},o($Vq,$VA,{58:117,65:$VB}),o($Vq,$VA,{58:118,65:$VB}),{49:[1,119]},{53:[1,120],63:[1,121]},{13:122,46:[1,123]},{22:124,52:$V5},o($Ve,[2,23],{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN}),o($VO,[2,26],{54:29,55:35,56:36,29:137,53:$Vm,57:$V7,59:$V8}),o($VO,[2,27]),o($VO,[2,28]),{50:[1,138],77:[1,139]},o($VP,[2,113]),{53:[1,140]},{14:141,22:67,29:17,48:$V3,49:$V4,52:$V5,53:$Vm,54:29,55:35,56:36,57:$V7,59:$V8},{22:142,52:$V5},{50:[1,143]},o($Vi,[2,17],{34:$VQ,35:$VR,36:$VS,37:$VT,38:$VU,39:$VV,63:$VW,68:$VX,69:$VY,70:$VZ,71:$V_}),o($V$,[2,70]),o($V$,[2,71]),o($V$,[2,72]),{53:[1,155]},{49:[1,156]},o($V$,[2,75]),{22:98,24:157,32:$Vu,33:$Vv,52:$V5,53:$Vw,61:$Vx,67:$Vy,69:$Vz},{32:[1,158]},{50:[1,159]},o($VP,[2,94],{54:29,55:35,56:36,29:160,53:$Vm,57:$V7,59:$V8}),{50:[1,161]},{50:[1,162]},{77:[1,163]},{53:[1,164]},o($Vn,[2,100]),{34:[1,165]},o($Vn,[2,103]),{22:98,24:166,32:$Vu,33:$Vv,52:$V5,53:$Vw,61:$Vx,67:$Vy,69:$Vz},o($Vq,[2,56]),{22:98,24:167,32:$Vu,33:$Vv,52:$V5,53:$Vw,61:$Vx,67:$Vy,69:$Vz},o($Vq,[2,59]),o($Vq,[2,63]),o($Vq,[2,61]),{50:[1,168]},o($Vq,[2,57]),o($Vq,[2,62]),{50:[1,169]},o($Vq,[2,66]),o($Vq,[2,67]),o($Vf,[2,7]),{6:171,22:170,35:$V2,47:172,52:$V5,53:$Vh,78:12,79:24,80:25,81:$Vd,83:[1,173]},{29:174,46:[2,21],53:$Vm,54:29,55:35,56:36,57:$V7,59:$V8},{22:83,31:175,32:$Vr,33:$Vs,52:$V5},{22:83,31:176,32:$Vr,33:$Vs,52:$V5},{22:83,31:177,32:$Vr,33:$Vs,52:$V5},{22:83,31:178,32:$Vr,33:$Vs,52:$V5},{22:83,31:179,32:$Vr,33:$Vs,52:$V5},{22:83,31:180,32:$Vr,33:$Vs,52:$V5},{22:83,31:181,32:$Vr,33:$Vs,52:$V5},{22:83,31:182,32:$Vr,33:$Vs,52:$V5},{22:83,31:183,32:$Vr,33:$Vs,52:$V5},{22:83,31:184,32:$Vr,33:$Vs,52:$V5},{22:83,31:185,32:$Vr,33:$Vs,52:$V5},{22:83,31:186,32:$Vr,33:$Vs,52:$V5},o($VO,[2,25]),{90:187,98:[1,188]},{52:$Vt,97:189},{98:[1,190]},o($V01,[2,18]),{26:[1,191]},{29:192,53:$Vm,54:29,55:35,56:36,57:$V7,59:$V8},{22:98,24:193,32:$Vu,33:$Vv,52:$V5,53:$Vw,61:$Vx,67:$Vy,69:$Vz},{22:98,24:194,32:$Vu,33:$Vv,52:$V5,53:$Vw,61:$Vx,67:$Vy,69:$Vz},{22:98,24:195,32:$Vu,33:$Vv,52:$V5,53:$Vw,61:$Vx,67:$Vy,69:$Vz},{22:98,24:196,32:$Vu,33:$Vv,52:$V5,53:$Vw,61:$Vx,67:$Vy,69:$Vz},{22:98,24:197,32:$Vu,33:$Vv,52:$V5,53:$Vw,61:$Vx,67:$Vy,69:$Vz},{22:98,24:198,32:$Vu,33:$Vv,52:$V5,53:$Vw,61:$Vx,67:$Vy,69:$Vz},{22:98,24:199,32:$Vu,33:$Vv,52:$V5,53:$Vw,61:$Vx,67:$Vy,69:$Vz},{22:98,24:200,32:$Vu,33:$Vv,52:$V5,53:$Vw,61:$Vx,67:$Vy,69:$Vz},{22:98,24:201,32:$Vu,33:$Vv,52:$V5,53:$Vw,61:$Vx,67:$Vy,69:$Vz},{22:98,24:202,32:$Vu,33:$Vv,52:$V5,53:$Vw,61:$Vx,67:$Vy,69:$Vz},{22:98,24:203,32:$Vu,33:$Vv,52:$V5,53:$Vw,61:$Vx,67:$Vy,69:$Vz},o($V$,[2,73]),{50:[1,204]},o($V11,[2,81],{63:$VW,70:$VZ,71:$V_}),{50:[1,205]},o($Vf,[2,88]),o($VP,[2,93]),o($Vf,[2,89]),o($Vf,[2,90]),{32:[1,206]},{49:[2,111]},o($Vn,[2,101]),o($Vi,[2,16],{34:$VQ,35:$VR,36:$VS,37:$VT,38:$VU,39:$VV,63:$VW,68:$VX,69:$VY,70:$VZ,71:$V_}),{34:$VQ,35:$VR,36:$VS,37:$VT,38:$VU,39:$VV,63:$VW,66:[1,207],68:$VX,69:$VY,70:$VZ,71:$V_},o($Vq,$VA,{58:208,65:$VB}),o($Vq,$VA,{58:209,65:$VB}),o($Vf,[2,41],{54:29,55:35,56:36,29:210,53:$Vm,57:$V7,59:$V8}),o($Vf,[2,43]),o($Vf,[2,44]),{49:[1,211]},{46:[2,22]},o($VO,[2,29]),o($VO,[2,30]),o($VO,[2,31]),o($VO,[2,32]),o($VO,[2,33]),o([28,39,46,50],[2,34],{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN}),o($VO,[2,35]),o($VO,[2,36]),o($VO,[2,37]),o($VO,[2,38]),o($VO,[2,39]),o($VO,[2,40]),{81:[1,213],91:212},{99:[1,214]},o($VP,[2,112]),{99:[1,215]},{14:216,22:67,29:17,48:$V3,49:$V4,52:$V5,53:$Vm,54:29,55:35,56:36,57:$V7,59:$V8},o($Vj,[2,45]),o($V11,[2,76],{63:$VW,70:$VZ,71:$V_}),o($V11,[2,77],{63:$VW,70:$VZ,71:$V_}),o($V$,[2,78]),o($V$,[2,79]),o($V$,[2,80]),o($V21,[2,82],{63:$VW,68:$VX,69:$VY,70:$VZ,71:$V_}),o([5,21,39,52,66],[2,83],{34:$VQ,35:$VR,36:$VS,37:$VT,38:$VU,63:$VW,68:$VX,69:$VY,70:$VZ,71:$V_}),o($V21,[2,84],{63:$VW,68:$VX,69:$VY,70:$VZ,71:$V_}),o($V21,[2,85],{63:$VW,68:$VX,69:$VY,70:$VZ,71:$V_}),o($V21,[2,86],{63:$VW,68:$VX,69:$VY,70:$VZ,71:$V_}),o($V21,[2,87],{63:$VW,68:$VX,69:$VY,70:$VZ,71:$V_}),o($V$,[2,74]),o($Vj,[2,49]),{50:[1,217],77:[1,218]},o($Vq,[2,68]),o($Vq,[2,64]),o($Vq,[2,65]),o($Vf,[2,42]),{22:83,31:219,32:$Vr,33:$Vs,52:$V5},{92:[1,220]},{4:222,10:6,14:7,15:8,16:9,17:10,18:11,22:67,25:$V1,29:17,48:$V3,49:$V4,52:$V5,53:$Vm,54:29,55:35,56:36,57:$V7,59:$V8,72:$V9,74:$Va,75:$Vb,76:$Vc,82:[2,118],100:221},{53:[1,223]},{53:[1,224]},o($V01,[2,19]),o($Vf,[2,91]),{32:[1,225]},{34:$VC,35:$VD,36:$VE,37:$VF,38:$VG,39:$VH,40:$VI,41:$VJ,42:$VK,43:$VL,44:$VM,45:$VN,50:[1,226]},{35:$V31,53:$V41,81:$V51,93:227,101:228,102:229,103:230},{82:[1,234]},{82:[2,117]},{81:[2,115]},o($VP,[2,114]),{50:[1,235]},{84:236,86:[1,237]},{5:[2,110]},{5:[2,119],35:$V31,53:$V41,81:$V51,102:238,103:239},o($V61,[2,121]),o($V61,[2,123]),{53:[1,240],57:[1,241]},o($V61,[2,126]),{96:[1,242]},{92:[2,116]},o($Vf,[2,92]),o($Vf,[2,105],{85:243,87:[1,244]}),{6:245,14:246,22:67,29:17,35:$V2,48:$V3,49:$V4,52:$V5,53:$V6,54:29,55:35,56:36,57:$V7,59:$V8,78:12,79:24,80:25,81:$Vd},o($V61,[2,120]),o($V61,[2,122]),{34:[1,247]},{53:[1,248]},{53:[1,249]},o($Vf,[2,104]),{6:250,14:251,22:67,29:17,35:$V2,48:$V3,49:$V4,52:$V5,53:$V6,54:29,55:35,56:36,57:$V7,59:$V8,78:12,79:24,80:25,81:$Vd},o($Vg,[2,106]),o($Vg,[2,107]),o($V61,[2,124]),{34:[1,252]},{49:[1,253]},o($Vf,[2,108]),o($Vf,[2,109]),o($V61,[2,125]),{4:255,10:6,14:7,15:8,16:9,17:10,18:11,22:67,25:$V1,29:17,32:[1,257],48:$V3,49:$V4,52:$V5,53:[1,256],54:29,55:35,56:36,57:$V7,59:$V8,72:$V9,74:$Va,75:$Vb,76:$Vc,104:254},{50:[1,258]},{50:[2,128]},{55:65,56:36,57:$V7,59:$V8,77:[1,259]},{77:[1,260]},{82:[1,261]},{53:[1,262]},{32:[1,263]},o($V61,[2,127]),{50:[2,129]},{50:[2,130]}],
defaultActions: {39:[2,1],40:[2,2],41:[2,3],44:[2,4],164:[2,111],174:[2,22],222:[2,117],223:[2,115],227:[2,110],234:[2,116],255:[2,128],262:[2,129],263:[2,130]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* Omitir espacios en blanco */ 
break;
case 1: /* Omitir saltos de linea, tabs y retornos*/ 
break;
case 2:
break;
case 3: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 48;
break;
case 4: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 25;
break;
case 5: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 21;
break;
case 6: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 30;
break;
case 7: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 28;
break;
case 8: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 46;
break;
case 9: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 72;
break;
case 10: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 83;
break;
case 11: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 86;
break;
case 12: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 87;
break;
case 13: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 26;
break;
case 14: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 51;
break;
case 15: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 27;
break;
case 16: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 44;
break;
case 17: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 45;
break;
case 18: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 41;
break;
case 19: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 43;
break;
case 20: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 40;
break;
case 21: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 42;
break;
case 22: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 94;
break;
case 23: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 95;
break;
case 24: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 96;
break;
case 25: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 98;
break;
case 26: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 99;
break;
case 27: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 92;
break;
case 28: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 52;
break;
case 29: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_or';
break;
case 30: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_and';
break;
case 31: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 71;
break;
case 32: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 70;
break;
case 33: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 64;
break;
case 34: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_text';
break;
case 35: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_namespace_node';
break;
case 36: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ancestor_or_self';
break;
case 37: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ancestor';
break;
case 38: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_attribute';
break;
case 39: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_child';
break;
case 40: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_descendant_or_self';
break;
case 41: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_descendant';
break;
case 42: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_following_sibling';
break;
case 43: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_following';
break;
case 44: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_namespace';
break;
case 45: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_parent';
break;
case 46: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_preceding_sibling';
break;
case 47: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_preceding';
break;
case 48: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_self';
break;
case 49: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_child';
break;
case 50: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_attribute';
break;
case 51: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 67;
break;
case 52: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_position';
break;
case 53: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_text';
break;
case 54: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 74;
break;
case 55: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 75;
break;
case 56: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 76;
break;
case 57: listaTokens.push(new Token("ComparacionLet", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 23;
break;
case 58: listaTokens.push(new Token("Barra", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_barra_or';
break;
case 59: listaTokens.push(new Token("Suma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 68;
break;
case 60: listaTokens.push(new Token("Resta", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 69;
break;
case 61: listaTokens.push(new Token("Asterisco", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 63;
break;
case 62: listaTokens.push(new Token("Indiferente", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 39;
break;
case 63: listaTokens.push(new Token("Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 38;
break;
case 64: listaTokens.push(new Token("Menor_igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 37;
break;
case 65: listaTokens.push(new Token("Menor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 35;
break;
case 66: listaTokens.push(new Token("Mayor_Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 36;
break;
case 67: listaTokens.push(new Token("Mayor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 34;
break;
case 68: listaTokens.push(new Token("Cuatro_Puntos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_cuatro_puntos';
break;
case 69: listaTokens.push(new Token("Diagonal_doble", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 59;
break;
case 70: listaTokens.push(new Token("Division", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 57;
break;
case 71: listaTokens.push(new Token("Arroba", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 61;
break;
case 72: listaTokens.push(new Token("Puntos_Seguidos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 60;
break;
case 73: listaTokens.push(new Token("Parentesis_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 49;
break;
case 74: listaTokens.push(new Token("Parentesis_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 50;
break;
case 75: listaTokens.push(new Token("Corchete_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_izq";
break;
case 76: listaTokens.push(new Token("Corchete_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_der";
break;
case 77: listaTokens.push(new Token("Llave_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_llave_izq";
break;
case 78: listaTokens.push(new Token("Llave_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_llave_der";
break;
case 79: listaTokens.push(new Token("Coma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_coma";
break;
case 80: listaTokens.push(new Token("Punto", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 62;
break;
case 81: listaTokens.push(new Token("Caracter", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_caracter";
break;
case 82: listaTokens.push(new Token("Cadena", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_hilera";
break;
case 83: listaTokens.push(new Token("Identificador", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_identificador";
break;
case 84: listaTokens.push(new Token("Numero", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_numero";
break;
case 85: return "EOF"; 
break;
case 86: listaErrores.push(new TokenError("xPATH","ERROR LEXICO","Caracter no reconocido "+ yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column )); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:[\t\r]+)/,/^(?:[(][:][^:]*[:]+[)])/,/^(?:doc\b)/,/^(?:for\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order by\b)/,/^(?:return\b)/,/^(?:data\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:in\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:local:)/,/^(?:as\b)/,/^(?:xs:)/,/^(?:;)/,/^(?:\$)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:div\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:namespace-node\b)/,/^(?:ancestor-or-self\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:descendant\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:child\b)/,/^(?:attribute\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:text\b)/,/^(?:upper-case\b)/,/^(?:lower-case\b)/,/^(?:substring\b)/,/^(?::=)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:!=)/,/^(?:=)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:::)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:@)/,/^(?:\.\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?:'[^\']*')/,/^(?:"([^\\\"]|\\.)*")/,/^(?:[a-zA-Z_À-ÿ\u00F1\u00D1]([a-zA-ZÀ-ÿ\-\.\u00F1\u00D10-9_])*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador_xqueryizq;
exports.Parser = analizador_xqueryizq.Parser;
exports.parse = function () { return analizador_xqueryizq.parse.apply(analizador_xqueryizq, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}