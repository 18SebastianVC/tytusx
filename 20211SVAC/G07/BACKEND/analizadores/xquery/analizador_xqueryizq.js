/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador_xqueryizq = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,22],$V2=[1,12],$V3=[1,21],$V4=[1,23],$V5=[1,27],$V6=[1,28],$V7=[1,15],$V8=[1,16],$V9=[1,24],$Va=[18,36],$Vb=[5,40,69],$Vc=[5,40,69,74],$Vd=[1,36],$Ve=[5,18,20,36,40,69,74],$Vf=[1,41],$Vg=[5,25,40,42,68,69,74],$Vh=[5,18,20,24,25,26,27,28,29,30,31,32,33,34,35,36,40,69,74],$Vi=[2,86],$Vj=[5,18,20,24,25,26,27,28,29,30,31,32,33,34,35,36,40,46,48,69,74],$Vk=[1,65],$Vl=[1,66],$Vm=[1,69],$Vn=[2,57],$Vo=[1,80],$Vp=[1,93],$Vq=[1,94],$Vr=[1,95],$Vs=[1,96],$Vt=[1,97],$Vu=[1,98],$Vv=[1,99],$Vw=[1,100],$Vx=[1,101],$Vy=[1,102],$Vz=[1,103],$VA=[1,104],$VB=[18,24,25,26,27,28,29,30,31,32,33,34,35,36,40],$VC=[40,84],$VD=[1,117],$VE=[1,119],$VF=[1,118],$VG=[1,120],$VH=[1,121],$VI=[1,122],$VJ=[1,157],$VK=[1,158],$VL=[1,156],$VM=[1,155],$VN=[1,153],$VO=[1,150],$VP=[1,148],$VQ=[1,149],$VR=[1,151],$VS=[1,152],$VT=[24,25,26,27,28,29,52,56,58,59,60,61],$VU=[24,25,26,27,28,29,56,58,59],$VV=[24,25,26,27,28,29,56],$VW=[1,193],$VX=[1,194],$VY=[1,195],$VZ=[5,25,42,68];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"XQUERYGRA":4,"EOF":5,"HTML":6,"FUNCACKERMAN":7,"FOR_IN":8,"WHERE":9,"ORDEN":10,"RETURN":11,"LLAMADA":12,"F_DATA":13,"F_UPPER":14,"tk_for":15,"VARIABLE":16,"tk_in":17,"tk_order_by":18,"XPATHGRA":19,"tk_where":20,"CONDICIONAL":21,"tk_numero":22,"tk_hilera":23,"tk_mayor":24,"tk_menor":25,"tk_mayor_igual":26,"tk_menor_igual":27,"tk_igual":28,"tk_indiferente":29,"tk_gt":30,"tk_lt":31,"tk_ge":32,"tk_le":33,"tk_eq":34,"tk_ne":35,"tk_return":36,"IF":37,"tk_doc":38,"tk_parentesis_izq":39,"tk_parentesis_der":40,"tk_dolar":41,"tk_identificador":42,"CONSULTA_":43,"CONSULTA":44,"NODO":45,"tk_diagonal":46,"PREDICADO":47,"tk_diagonal_doble":48,"tk_puntos_seguidos":49,"tk_arroba":50,"tk_punto":51,"tk_asterisco":52,"tk_node":53,"tk_corchete_izq":54,"DATO":55,"tk_corchete_der":56,"tk_last":57,"tk_mas":58,"tk_menos":59,"tk_div":60,"tk_mod":61,"tk_data":62,"CONS":63,"tk_upper":64,"CONTENIDO":65,"L_CONTENIDO":66,"COD":67,"tk_llave_izq":68,"tk_llave_der":69,"tk_if":70,"THEN":71,"ELSE":72,"tk_then":73,"tk_else":74,"CABEZAFUNC":75,"LISTAFUNC":76,"RETURNFUNC":77,"FUNCOPERACION":78,"tk_punto_coma":79,"LLAMADAFUNCION":80,"tk_declare":81,"tk_function":82,"tk_local":83,"tk_coma":84,"LISTACONF":85,"tk_as":86,"tk_xs":87,"CODIGOFUNCION":88,"LLAFCONT":89,"L_LLAFCONT":90,"LLAD":91,"FF":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"tk_for",17:"tk_in",18:"tk_order_by",20:"tk_where",22:"tk_numero",23:"tk_hilera",24:"tk_mayor",25:"tk_menor",26:"tk_mayor_igual",27:"tk_menor_igual",28:"tk_igual",29:"tk_indiferente",30:"tk_gt",31:"tk_lt",32:"tk_ge",33:"tk_le",34:"tk_eq",35:"tk_ne",36:"tk_return",38:"tk_doc",39:"tk_parentesis_izq",40:"tk_parentesis_der",41:"tk_dolar",42:"tk_identificador",46:"tk_diagonal",48:"tk_diagonal_doble",49:"tk_puntos_seguidos",50:"tk_arroba",51:"tk_punto",52:"tk_asterisco",53:"tk_node",54:"tk_corchete_izq",56:"tk_corchete_der",57:"tk_last",58:"tk_mas",59:"tk_menos",60:"tk_div",61:"tk_mod",62:"tk_data",64:"tk_upper",68:"tk_llave_izq",69:"tk_llave_der",70:"tk_if",73:"tk_then",74:"tk_else",79:"tk_punto_coma",81:"tk_declare",82:"tk_function",83:"tk_local",84:"tk_coma",86:"tk_as",87:"tk_xs"},
productions_: [0,[3,2],[3,2],[3,2],[4,4],[4,1],[4,1],[4,1],[8,4],[10,0],[10,2],[10,3],[9,2],[9,0],[21,2],[21,1],[21,1],[21,1],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[21,3],[11,2],[11,3],[11,2],[11,2],[12,5],[12,1],[12,2],[12,1],[16,2],[19,1],[43,2],[43,1],[44,2],[44,1],[45,3],[45,3],[45,2],[45,3],[45,2],[45,3],[45,3],[45,3],[45,5],[45,5],[45,3],[45,3],[47,3],[47,0],[55,1],[55,1],[55,1],[55,2],[55,3],[55,3],[55,3],[55,3],[55,3],[55,3],[55,2],[55,3],[55,3],[55,3],[55,3],[55,3],[55,3],[13,4],[14,4],[63,2],[63,1],[6,1],[65,2],[65,1],[65,2],[65,1],[66,3],[66,4],[66,1],[67,3],[37,6],[37,5],[71,2],[71,2],[72,2],[72,2],[7,8],[75,4],[76,3],[76,1],[85,5],[77,3],[78,3],[88,1],[88,0],[80,1],[89,2],[89,1],[89,2],[89,1],[90,3],[90,4],[90,1],[91,7],[92,1],[92,3],[92,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
return {instr:"HTML",valor:$$[$0-1]};
break;
case 4:
this.$={instr:"FOR_IN",iterador:$$[$0-3],retorno:$$[$0],where:$$[$0-2],order:$$[$0-1]};
break;
case 5:
this.$={instr:"LLAMADA",valor:$$[$0]};
break;
case 6:
this.$={instr:"F_DATA",valor:$$[$0]};
break;
case 7:
this.$={instr:"F_UPPER",valor:$$[$0]};
break;
case 8:
this.$={variable:$$[$0-2],consulta:$$[$0]}
break;
case 9: case 13:
this.$=null;
break;
case 10: case 15:
this.$={tipo:"VARIABLE",variable:$$[$0],consulta:null}
break;
case 11: case 14:
this.$={tipo:"VARIABLE",variable:$$[$0-1],consulta:$$[$0]}
break;
case 12:
this.$={instr:"WHERE",condicion:$$[$0]};
break;
case 16:
this.$={tipo:"NUMERO",valor:$$[$0]}
break;
case 17:
this.$={tipo:"CADENA",valor:$$[$0].slice(1,-1)}
break;
case 18: case 24:
this.$={tipo:"MAYOR",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 19: case 25:
this.$={tipo:"MENOR",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 20: case 26:
this.$={tipo:"MAYOR_IGUAL",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 21: case 27:
this.$={tipo:"MENOR_IGUAL",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 22: case 28:
this.$={tipo:"IGUAL",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 23: case 29:
this.$={tipo:"DIFERENTE",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 30:
this.$={tipo:"VAR",variable:$$[$0],consulta:null}
break;
case 31:
this.$={tipo:"VAR",variable:$$[$0-1],consulta:$$[$0]}
break;
case 32: case 90: case 92:
this.$={tipo:"HTML",valor:$$[$0]}
break;
case 33:
this.$={tipo:"IF",valor:$$[$0]}
break;
case 34: case 35: case 38: case 39: case 41: case 79:
this.$=$$[$0];
break;
case 36: case 77:
this.$={variable:$$[$0-1],consulta:$$[$0]}
break;
case 37: case 78:
this.$={variable:$$[$0],consulta:null}
break;
case 40:
$$[$0].unshift({instr:"NODO",valor:$$[$0-1]}); this.$=$$[$0];
break;
case 42:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 43: case 81: case 83:
this.$=[$$[$0]];
break;
case 44: case 49:
this.$= {instr:"ACCESO",valor:$$[$0-1],index:$$[$0]};
break;
case 45: case 50:
this.$= {instr:"ACCESODOBLE",valor:$$[$0-1],index:$$[$0]};
break;
case 46:
this.$= {instr:"RETROCESO"};
break;
case 47: case 51:
this.$= {instr:"ATRIBUTO",valor:$$[$0]};
break;
case 48:
this.$= {instr:"ACTUAL"};
break;
case 52:
this.$= {instr:"ACCESO",valor:"*",index:$$[$0]};
break;
case 53:
this.$= {instr:"ACCESODOBLE",valor:"*",index:$$[$0]};
break;
case 54: case 55:
this.$= {instr:"ATRIBUTODOBLE",valor:$$[$0]};
break;
case 56:
this.$= $$[$0-1];
break;
case 57:
this.$= null;
break;
case 58:
this.$= {tipo:"NUMERO",valor:$$[$0]}
break;
case 59:
this.$= {tipo:"ID",valor:$$[$0]}
break;
case 60:
this.$= {tipo:"CADENA",valor:$$[$0]}
break;
case 61:
this.$= {tipo:"ATRIBUTO",valor:$$[$0]}
break;
case 62:
this.$= {tipo:"LAST"}
break;
case 63:
this.$= {tipo:"OP_MAS",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 64:
this.$= {tipo:"OP_MENOS",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 65:
this.$= {tipo:"OP_MUL",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 66:
this.$= {tipo:"OP_DIV",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 67:
this.$= {tipo:"OP_MOD",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 68:
this.$= {tipo:"OP_NEG",valor1:$$[$0-1]}
break;
case 69:
this.$= {tipo:"OP_IGUAL",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 70:
this.$= {tipo:"OP_DIFERENTE",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 71:
this.$= {tipo:"OP_MENOR_IGUAL",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 72:
this.$= {tipo:"OP_MAYOR_IGUAL",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 73:
this.$= {tipo:"OP_MAYOR",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 74:
this.$= {tipo:"OP_MENOR",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 75: case 76:
this.$=$$[$0-1];
break;
case 80: case 82:
$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 84: case 108:
this.$={tipo:"TXT",valor:$$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString()};
break;
case 85: case 109:
this.$={tipo:"TXT",valor:$$[$0-3].toString()+$$[$0-2].toString()+$$[$0-1].toString()+$$[$0].toString()};
break;
case 86: case 110:
this.$={tipo:"TXT",valor:$$[$0].toString()};
break;
case 87:
this.$={tipo:"COD",valor:$$[$0-1]};
break;
case 88:
this.$={condicion:$$[$0-3],else:$$[$0],then:$$[$0-1]};
break;
case 89:
this.$={condicion:$$[$0-2],else:null,then:$$[$0]};
break;
case 91: case 93:
this.$={tipo:"LLAMADA",valor:$$[$0]}
break;
case 111:
this.$={tipo:"COD",valor:$$[$0-5]};
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,12:6,13:7,14:8,15:$V0,16:14,19:13,25:$V1,38:$V2,41:$V3,42:$V4,43:20,44:25,45:26,46:$V5,48:$V6,62:$V7,64:$V8,65:9,66:17,67:18,68:$V9,75:10,81:[1,19]},{1:[3]},{5:[1,29]},{5:[1,30]},{5:[1,31]},o($Va,[2,13],{9:32,20:[1,33]}),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vc,[2,79],{66:34,67:35,25:$V1,42:$Vd,68:$V9}),{39:[1,37]},{16:38,41:$V3},{39:[1,39]},o($Ve,[2,35]),o($Ve,[2,37],{43:20,44:25,45:26,19:40,42:$Vf,46:$V5,48:$V6}),{39:[1,42]},{39:[1,43]},o($Vg,[2,81]),o($Vg,[2,83]),{82:[1,44]},o($Vh,[2,39]),{42:[1,45]},{42:[1,46],46:[1,47]},o($Vg,$Vi,{45:26,44:48,46:$V5,48:$V6}),{4:49,8:5,12:6,13:7,14:8,15:$V0,16:14,19:13,38:$V2,41:$V3,42:$Vf,43:20,44:25,45:26,46:$V5,48:$V6,62:$V7,64:$V8},o($Vh,[2,41],{45:50,46:$V5,48:$V6}),o($Vj,[2,43]),{42:[1,51],49:[1,52],50:[1,53],51:[1,54],52:[1,55],53:[1,56]},{42:[1,57],50:[1,60],52:[1,58],53:[1,59]},{1:[2,1]},{1:[2,2]},{1:[2,3]},{10:61,18:[1,62],36:[2,9]},{16:64,21:63,22:$Vk,23:$Vl,41:$V3},o($Vg,[2,80]),o($Vg,[2,82]),o($Vg,$Vi),{41:$Vm,76:67,85:68},{17:[1,70]},{23:[1,71]},o($Ve,[2,36]),{44:48,45:26,46:$V5,48:$V6},{16:73,41:$V3,63:72},{16:73,41:$V3,63:74},{83:[1,75]},o([5,17,18,20,24,25,26,27,28,29,30,31,32,33,34,35,36,40,42,46,48,69,74],[2,38]),{24:[1,76]},{42:[1,77]},o($Vh,[2,40],{45:50,46:$V5,48:$V6}),{69:[1,78]},o($Vj,[2,42]),o($Vj,$Vn,{47:79,54:$Vo}),o($Vj,[2,46]),{42:[1,81],52:[1,82]},o($Vj,[2,48]),o($Vj,$Vn,{47:83,54:$Vo}),{39:[1,84]},o($Vj,$Vn,{47:85,54:$Vo}),o($Vj,$Vn,{47:86,54:$Vo}),{39:[1,87]},{42:[1,88],52:[1,89]},{11:90,36:[1,91]},{16:92,41:$V3},o($Va,[2,12],{24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA}),o($VB,[2,15],{43:20,44:25,45:26,19:105,42:$Vf,46:$V5,48:$V6}),o($VB,[2,16]),o($VB,[2,17]),{40:[1,106],84:[1,107]},o($VC,[2,97]),{42:[1,108]},{12:109,16:14,19:13,38:$V2,41:$V3,42:$Vf,43:20,44:25,45:26,46:$V5,48:$V6},{40:[1,110]},{40:[1,111]},{19:112,40:[2,78],42:$Vf,43:20,44:25,45:26,46:$V5,48:$V6},{40:[1,113]},{42:[1,114]},o($Vg,[2,84]),{24:[1,115]},o($Vg,[2,87]),o($Vj,[2,44]),{22:$VD,23:$VE,42:$VF,50:$VG,55:116,57:$VH,59:$VI},o($Vj,[2,47]),o($Vj,[2,51]),o($Vj,[2,49]),{40:[1,123]},o($Vj,[2,45]),o($Vj,[2,50]),{40:[1,124]},o($Vj,[2,54]),o($Vj,[2,55]),o($Vb,[2,4]),{6:126,16:125,25:$V1,37:127,41:$V3,42:$Vd,65:9,66:17,67:18,68:$V9,70:[1,128]},{19:129,36:[2,10],42:$Vf,43:20,44:25,45:26,46:$V5,48:$V6},{16:64,21:130,22:$Vk,23:$Vl,41:$V3},{16:64,21:131,22:$Vk,23:$Vl,41:$V3},{16:64,21:132,22:$Vk,23:$Vl,41:$V3},{16:64,21:133,22:$Vk,23:$Vl,41:$V3},{16:64,21:134,22:$Vk,23:$Vl,41:$V3},{16:64,21:135,22:$Vk,23:$Vl,41:$V3},{16:64,21:136,22:$Vk,23:$Vl,41:$V3},{16:64,21:137,22:$Vk,23:$Vl,41:$V3},{16:64,21:138,22:$Vk,23:$Vl,41:$V3},{16:64,21:139,22:$Vk,23:$Vl,41:$V3},{16:64,21:140,22:$Vk,23:$Vl,41:$V3},{16:64,21:141,22:$Vk,23:$Vl,41:$V3},o($VB,[2,14]),{77:142,86:[1,143]},{41:$Vm,85:144},{86:[1,145]},o([18,20,36],[2,8]),{19:146,42:$Vf,43:20,44:25,45:26,46:$V5,48:$V6},o($Vb,[2,75]),{40:[2,77]},o($Vb,[2,76]),{39:[2,95]},o($Vg,[2,85]),{24:$VJ,25:$VK,26:$VL,27:$VM,28:$VN,29:[1,154],52:$VO,56:[1,147],58:$VP,59:$VQ,60:$VR,61:$VS},o($VT,[2,58]),o($VT,[2,59]),o($VT,[2,60]),{42:[1,159]},{39:[1,160]},{22:$VD,23:$VE,42:$VF,50:$VG,55:161,57:$VH,59:$VI},o($Vj,$Vn,{47:162,54:$Vo}),o($Vj,$Vn,{47:163,54:$Vo}),o($Vb,[2,30],{43:20,44:25,45:26,19:164,42:$Vf,46:$V5,48:$V6}),o($Vb,[2,32]),o($Vb,[2,33]),{39:[1,165]},{36:[2,11]},o($VB,[2,18]),o($VB,[2,19]),o($VB,[2,20]),o($VB,[2,21]),o($VB,[2,22]),o([18,29,36,40],[2,23],{24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA}),o($VB,[2,24]),o($VB,[2,25]),o($VB,[2,26]),o($VB,[2,27]),o($VB,[2,28]),o($VB,[2,29]),{68:[1,167],78:166},{87:[1,168]},o($VC,[2,96]),{87:[1,169]},o($Ve,[2,34]),o($Vj,[2,56]),{22:$VD,23:$VE,42:$VF,50:$VG,55:170,57:$VH,59:$VI},{22:$VD,23:$VE,42:$VF,50:$VG,55:171,57:$VH,59:$VI},{22:$VD,23:$VE,42:$VF,50:$VG,55:172,57:$VH,59:$VI},{22:$VD,23:$VE,42:$VF,50:$VG,55:173,57:$VH,59:$VI},{22:$VD,23:$VE,42:$VF,50:$VG,55:174,57:$VH,59:$VI},{22:$VD,23:$VE,42:$VF,50:$VG,55:175,57:$VH,59:$VI},{22:$VD,23:$VE,42:$VF,50:$VG,55:176,57:$VH,59:$VI},{22:$VD,23:$VE,42:$VF,50:$VG,55:177,57:$VH,59:$VI},{22:$VD,23:$VE,42:$VF,50:$VG,55:178,57:$VH,59:$VI},{22:$VD,23:$VE,42:$VF,50:$VG,55:179,57:$VH,59:$VI},{22:$VD,23:$VE,42:$VF,50:$VG,55:180,57:$VH,59:$VI},o($VT,[2,61]),{40:[1,181]},o($VU,[2,68],{52:$VO,60:$VR,61:$VS}),o($Vj,[2,52]),o($Vj,[2,53]),o($Vb,[2,31]),{16:64,21:182,22:$Vk,23:$Vl,41:$V3},{79:[1,183]},{4:185,8:5,12:6,13:7,14:8,15:$V0,16:14,19:13,38:$V2,41:$V3,42:$Vf,43:20,44:25,45:26,46:$V5,48:$V6,62:$V7,64:$V8,69:[2,102],88:184},{42:[1,186]},{42:[1,187]},o($VU,[2,63],{52:$VO,60:$VR,61:$VS}),o($VU,[2,64],{52:$VO,60:$VR,61:$VS}),o($VT,[2,65]),o($VT,[2,66]),o($VT,[2,67]),o($VV,[2,69],{52:$VO,58:$VP,59:$VQ,60:$VR,61:$VS}),o([29,56],[2,70],{24:$VJ,25:$VK,26:$VL,27:$VM,28:$VN,52:$VO,58:$VP,59:$VQ,60:$VR,61:$VS}),o($VV,[2,71],{52:$VO,58:$VP,59:$VQ,60:$VR,61:$VS}),o($VV,[2,72],{52:$VO,58:$VP,59:$VQ,60:$VR,61:$VS}),o($VV,[2,73],{52:$VO,58:$VP,59:$VQ,60:$VR,61:$VS}),o($VV,[2,74],{52:$VO,58:$VP,59:$VQ,60:$VR,61:$VS}),o($VT,[2,62]),{24:$Vp,25:$Vq,26:$Vr,27:$Vs,28:$Vt,29:$Vu,30:$Vv,31:$Vw,32:$Vx,33:$Vy,34:$Vz,35:$VA,40:[1,188]},{25:$VW,42:$VX,68:$VY,80:189,89:190,90:191,91:192},{69:[1,196]},{69:[2,101]},{68:[2,99]},o($VC,[2,98]),{71:197,73:[1,198]},{5:[2,94]},{5:[2,103],25:$VW,42:$VX,68:$VY,90:199,91:200},o($VZ,[2,105]),o($VZ,[2,107]),{42:[1,201],46:[1,202]},o($VZ,[2,110]),{83:[1,203]},{79:[2,100]},o($Vb,[2,89],{72:204,74:[1,205]}),{6:206,12:207,16:14,19:13,25:$V1,38:$V2,41:$V3,42:$V4,43:20,44:25,45:26,46:$V5,48:$V6,65:9,66:17,67:18,68:$V9},o($VZ,[2,104]),o($VZ,[2,106]),{24:[1,208]},{42:[1,209]},{42:[1,210]},o($Vb,[2,88]),{6:211,12:212,16:14,19:13,25:$V1,38:$V2,41:$V3,42:$V4,43:20,44:25,45:26,46:$V5,48:$V6,65:9,66:17,67:18,68:$V9},o($Vc,[2,90]),o($Vc,[2,91]),o($VZ,[2,108]),{24:[1,213]},{39:[1,214]},o($Vb,[2,92]),o($Vb,[2,93]),o($VZ,[2,109]),{4:216,8:5,12:6,13:7,14:8,15:$V0,16:14,19:13,22:[1,218],38:$V2,41:$V3,42:[1,217],43:20,44:25,45:26,46:$V5,48:$V6,62:$V7,64:$V8,92:215},{40:[1,219]},{40:[2,112]},{44:48,45:26,46:$V5,48:$V6,84:[1,220]},{84:[1,221]},{69:[1,222]},{42:[1,223]},{22:[1,224]},o($VZ,[2,111]),{40:[2,113]},{40:[2,114]}],
defaultActions: {29:[2,1],30:[2,2],31:[2,3],112:[2,77],114:[2,95],129:[2,11],185:[2,101],186:[2,99],189:[2,94],196:[2,100],216:[2,112],223:[2,113],224:[2,114]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* Omitir espacios en blanco */ 
break;
case 1: /* Omitir saltos de linea, tabs y retornos*/ 
break;
case 2:
break;
case 3: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 38;
break;
case 4: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 15;
break;
case 5: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_let';
break;
case 6: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 20;
break;
case 7: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 18;
break;
case 8: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 36;
break;
case 9: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 62;
break;
case 10: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 70;
break;
case 11: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 73;
break;
case 12: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 74;
break;
case 13: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 17;
break;
case 14: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_to';
break;
case 15: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_at';
break;
case 16: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 34;
break;
case 17: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 35;
break;
case 18: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 31;
break;
case 19: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 33;
break;
case 20: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 30;
break;
case 21: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 32;
break;
case 22: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 81;
break;
case 23: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 82;
break;
case 24: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 83;
break;
case 25: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 86;
break;
case 26: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 87;
break;
case 27: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 79;
break;
case 28: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 41;
break;
case 29: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_or';
break;
case 30: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_and';
break;
case 31: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 61;
break;
case 32: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 60;
break;
case 33: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 53;
break;
case 34: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_text';
break;
case 35: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_namespace_node';
break;
case 36: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ancestor_or_self';
break;
case 37: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ancestor';
break;
case 38: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_attribute';
break;
case 39: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_child';
break;
case 40: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_descendant_or_self';
break;
case 41: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_descendant';
break;
case 42: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_following_sibling';
break;
case 43: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_following';
break;
case 44: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_namespace';
break;
case 45: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_parent';
break;
case 46: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_preceding_sibling';
break;
case 47: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_preceding';
break;
case 48: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_self';
break;
case 49: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_child';
break;
case 50: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_attribute';
break;
case 51: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 57;
break;
case 52: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_position';
break;
case 53: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_text';
break;
case 54: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 64;
break;
case 55: listaTokens.push(new Token("ComparacionLet", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_let_igual';
break;
case 56: listaTokens.push(new Token("Barra", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_barra_or';
break;
case 57: listaTokens.push(new Token("Suma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 58;
break;
case 58: listaTokens.push(new Token("Resta", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 59;
break;
case 59: listaTokens.push(new Token("Asterisco", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 52;
break;
case 60: listaTokens.push(new Token("Indiferente", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 29;
break;
case 61: listaTokens.push(new Token("Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 28;
break;
case 62: listaTokens.push(new Token("Menor_igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 27;
break;
case 63: listaTokens.push(new Token("Menor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 25;
break;
case 64: listaTokens.push(new Token("Mayor_Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 26;
break;
case 65: listaTokens.push(new Token("Mayor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 24;
break;
case 66: listaTokens.push(new Token("Cuatro_Puntos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_cuatro_puntos';
break;
case 67: listaTokens.push(new Token("Diagonal_doble", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 48;
break;
case 68: listaTokens.push(new Token("Division", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 46;
break;
case 69: listaTokens.push(new Token("Arroba", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 50;
break;
case 70: listaTokens.push(new Token("Puntos_Seguidos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 49;
break;
case 71: listaTokens.push(new Token("Parentesis_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 39;
break;
case 72: listaTokens.push(new Token("Parentesis_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 40;
break;
case 73: listaTokens.push(new Token("Corchete_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_izq";
break;
case 74: listaTokens.push(new Token("Corchete_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_der";
break;
case 75: listaTokens.push(new Token("Llave_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_llave_izq";
break;
case 76: listaTokens.push(new Token("Llave_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_llave_der";
break;
case 77: listaTokens.push(new Token("Coma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_coma";
break;
case 78: listaTokens.push(new Token("Punto", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 51;
break;
case 79: listaTokens.push(new Token("Caracter", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_caracter";
break;
case 80: listaTokens.push(new Token("Cadena", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_hilera";
break;
case 81: listaTokens.push(new Token("Identificador", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_identificador";
break;
case 82: listaTokens.push(new Token("Numero", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_numero";
break;
case 83: return "EOF"; 
break;
case 84: listaErrores.push(new TokenError("xPATH","ERROR LEXICO","Caracter no reconocido "+ yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column )); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:[\t\r]+)/,/^(?:[(][:][^:]*[:]+[)])/,/^(?:doc\b)/,/^(?:for\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order by\b)/,/^(?:return\b)/,/^(?:data\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:in\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:local:)/,/^(?:as\b)/,/^(?:xs:)/,/^(?:;)/,/^(?:\$)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:div\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:namespace-node\b)/,/^(?:ancestor-or-self\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:descendant\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:child\b)/,/^(?:attribute\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:text\b)/,/^(?:upper-case\b)/,/^(?::=)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:!=)/,/^(?:=)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:::)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:@)/,/^(?:\.\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?:'[^\']*')/,/^(?:"([^\\\"]|\\.)*")/,/^(?:[a-zA-Z_À-ÿ\u00F1\u00D1]([a-zA-ZÀ-ÿ\-\.\u00F1\u00D10-9_])*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador_xqueryizq;
exports.Parser = analizador_xqueryizq.Parser;
exports.parse = function () { return analizador_xqueryizq.parse.apply(analizador_xqueryizq, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}