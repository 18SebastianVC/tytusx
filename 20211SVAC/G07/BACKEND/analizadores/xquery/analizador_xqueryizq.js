/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador_xqueryizq = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,14],$V1=[1,7],$V2=[1,16],$V3=[1,17],$V4=[15,33],$V5=[1,22],$V6=[5,15,17,33],$V7=[5,15,17,21,22,23,24,25,26,27,28,29,30,31,32,33],$V8=[5,22,38],$V9=[2,73],$Va=[5,15,17,21,22,23,24,25,26,27,28,29,30,31,32,33,42,44],$Vb=[1,44],$Vc=[1,45],$Vd=[2,50],$Ve=[1,52],$Vf=[1,65],$Vg=[1,66],$Vh=[1,67],$Vi=[1,68],$Vj=[1,69],$Vk=[1,71],$Vl=[1,72],$Vm=[1,73],$Vn=[1,74],$Vo=[1,75],$Vp=[1,76],$Vq=[15,21,22,23,24,25,26,27,28,29,30,31,32,33],$Vr=[1,78],$Vs=[1,83],$Vt=[1,85],$Vu=[1,84],$Vv=[1,86],$Vw=[1,87],$Vx=[1,88],$Vy=[1,116],$Vz=[1,117],$VA=[1,115],$VB=[1,114],$VC=[1,112],$VD=[1,109],$VE=[1,107],$VF=[1,108],$VG=[1,110],$VH=[1,111],$VI=[21,22,23,24,25,26,48,52,54,55,56,57],$VJ=[21,22,23,24,25,26,52,54,55],$VK=[21,22,23,24,25,26,52];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"XQUERYGRA":4,"EOF":5,"FOR_IN":6,"WHERE":7,"ORDEN":8,"RETURN":9,"LLAMADA":10,"HTML":11,"tk_for":12,"VARIABLE":13,"tk_in":14,"tk_order_by":15,"XPATHGRA":16,"tk_where":17,"CONDICIONAL":18,"tk_numero":19,"tk_hilera":20,"tk_mayor":21,"tk_menor":22,"tk_mayor_igual":23,"tk_menor_igual":24,"tk_igual":25,"tk_indiferente":26,"tk_gt":27,"tk_lt":28,"tk_ge":29,"tk_le":30,"tk_eq":31,"tk_ne":32,"tk_return":33,"tk_doc":34,"tk_parentesis_izq":35,"tk_parentesis_der":36,"tk_dolar":37,"tk_identificador":38,"CONSULTA_":39,"CONSULTA":40,"NODO":41,"tk_diagonal":42,"PREDICADO":43,"tk_diagonal_doble":44,"tk_puntos_seguidos":45,"tk_arroba":46,"tk_punto":47,"tk_asterisco":48,"tk_node":49,"tk_corchete_izq":50,"DATO":51,"tk_corchete_der":52,"tk_last":53,"tk_mas":54,"tk_menos":55,"tk_div":56,"tk_mod":57,"CONTENIDO":58,"L_CONTENIDO":59,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",12:"tk_for",14:"tk_in",15:"tk_order_by",17:"tk_where",19:"tk_numero",20:"tk_hilera",21:"tk_mayor",22:"tk_menor",23:"tk_mayor_igual",24:"tk_menor_igual",25:"tk_igual",26:"tk_indiferente",27:"tk_gt",28:"tk_lt",29:"tk_ge",30:"tk_le",31:"tk_eq",32:"tk_ne",33:"tk_return",34:"tk_doc",35:"tk_parentesis_izq",36:"tk_parentesis_der",37:"tk_dolar",38:"tk_identificador",42:"tk_diagonal",44:"tk_diagonal_doble",45:"tk_puntos_seguidos",46:"tk_arroba",47:"tk_punto",48:"tk_asterisco",49:"tk_node",50:"tk_corchete_izq",52:"tk_corchete_der",53:"tk_last",54:"tk_mas",55:"tk_menos",56:"tk_div",57:"tk_mod"},
productions_: [0,[3,2],[4,4],[4,1],[4,1],[6,4],[8,0],[8,2],[8,3],[7,2],[7,0],[18,2],[18,1],[18,1],[18,1],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[18,3],[9,2],[9,3],[10,5],[10,1],[13,2],[16,1],[39,2],[39,1],[40,2],[40,1],[41,3],[41,3],[41,2],[41,3],[41,2],[41,3],[41,3],[41,3],[41,5],[41,5],[41,3],[41,3],[43,3],[43,0],[51,1],[51,1],[51,1],[51,2],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[51,2],[51,3],[51,3],[51,3],[51,3],[51,3],[51,3],[11,1],[58,2],[58,1],[59,3],[59,4],[59,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
this.$={instr:"FOR_IN",iterador:$$[$0-3],retorno:$$[$0],where:$$[$0-2],order:$$[$0-1]};
break;
case 3:
this.$={instr:"LLAMADA",valor:$$[$0]};
break;
case 4:
this.$={instr:"HTML",valor:$$[$0]};
break;
case 5:
this.$={variable:$$[$0-2],consulta:$$[$0]}
break;
case 6: case 10:
this.$=null;
break;
case 7: case 12:
this.$={tipo:"VARIABLE",variable:$$[$0],consulta:null}
break;
case 8: case 11:
this.$={tipo:"VARIABLE",variable:$$[$0-1],consulta:$$[$0]}
break;
case 9:
this.$={instr:"WHERE",condicion:$$[$0]};
break;
case 13:
this.$={tipo:"NUMERO",valor:$$[$0]}
break;
case 14:
this.$={tipo:"CADENA",valor:$$[$0].slice(1,-1)}
break;
case 15: case 21:
this.$={tipo:"MAYOR",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 16: case 22:
this.$={tipo:"MENOR",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 17: case 23:
this.$={tipo:"MAYOR_IGUAL",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 18: case 24:
this.$={tipo:"MENOR_IGUAL",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 19: case 25:
this.$={tipo:"IGUAL",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 20: case 26:
this.$={tipo:"DIFERENTE",valor1:$$[$0-2],valor2:$$[$0]};
break;
case 27:
this.$={variable:$$[$0],consulta:null}
break;
case 28:
this.$={variable:$$[$0-1],consulta:$$[$0]}
break;
case 29: case 30: case 31: case 32: case 34: case 68:
this.$=$$[$0];
break;
case 33:
$$[$0].unshift({instr:"NODO",valor:$$[$0-1]}); this.$=$$[$0];
break;
case 35:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 36:
this.$=[$$[$0]];
break;
case 37: case 42:
this.$= {instr:"ACCESO",valor:$$[$0-1],index:$$[$0]};
break;
case 38: case 43:
this.$= {instr:"ACCESODOBLE",valor:$$[$0-1],index:$$[$0]};
break;
case 39:
this.$= {instr:"RETROCESO"};
break;
case 40: case 44:
this.$= {instr:"ATRIBUTO",valor:$$[$0]};
break;
case 41:
this.$= {instr:"ACTUAL"};
break;
case 45:
this.$= {instr:"ACCESO",valor:"*",index:$$[$0]};
break;
case 46:
this.$= {instr:"ACCESODOBLE",valor:"*",index:$$[$0]};
break;
case 47: case 48:
this.$= {instr:"ATRIBUTODOBLE",valor:$$[$0]};
break;
case 49:
this.$= $$[$0-1];
break;
case 50:
this.$= null;
break;
case 51:
this.$= {tipo:"NUMERO",valor:$$[$0]}
break;
case 52:
this.$= {tipo:"ID",valor:$$[$0]}
break;
case 53:
this.$= {tipo:"CADENA",valor:$$[$0]}
break;
case 54:
this.$= {tipo:"ATRIBUTO",valor:$$[$0]}
break;
case 55:
this.$= {tipo:"LAST"}
break;
case 56:
this.$= {tipo:"OP_MAS",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 57:
this.$= {tipo:"OP_MENOS",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 58:
this.$= {tipo:"OP_MUL",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 59:
this.$= {tipo:"OP_DIV",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 60:
this.$= {tipo:"OP_MOD",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 61:
this.$= {tipo:"OP_NEG",valor1:$$[$0-1]}
break;
case 62:
this.$= {tipo:"OP_IGUAL",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 63:
this.$= {tipo:"OP_DIFERENTE",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 64:
this.$= {tipo:"OP_MENOR_IGUAL",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 65:
this.$= {tipo:"OP_MAYOR_IGUAL",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 66:
this.$= {tipo:"OP_MAYOR",valor1:$$[$0-2],valor2:$$[$0]}
break;
case 67:
this.$= {tipo:"OP_MENOR",valor1:$$[$0-2],valor2:$$[$0]}
break;
}
},
table: [{3:1,4:2,6:3,10:4,11:5,12:[1,6],16:8,22:$V0,34:$V1,38:[1,12],39:10,40:13,41:15,42:$V2,44:$V3,58:9,59:11},{1:[3]},{5:[1,18]},o($V4,[2,10],{7:19,17:[1,20]}),{5:[2,3]},{5:[2,4]},{13:21,37:$V5},{35:[1,23]},o($V6,[2,30]),{5:[2,68],22:$V0,38:[1,25],59:24},o($V7,[2,32]),o($V8,[2,70]),o($V8,$V9,{41:15,40:26,42:$V2,44:$V3}),o($V7,[2,34],{41:27,42:$V2,44:$V3}),{38:[1,28],42:[1,29]},o($Va,[2,36]),{38:[1,30],45:[1,31],46:[1,32],47:[1,33],48:[1,34],49:[1,35]},{38:[1,36],46:[1,39],48:[1,37],49:[1,38]},{1:[2,1]},{8:40,15:[1,41],33:[2,6]},{13:43,18:42,19:$Vb,20:$Vc,37:$V5},{14:[1,46]},{38:[1,47]},{20:[1,48]},o($V8,[2,69]),o($V8,$V9),o($V7,[2,33],{41:27,42:$V2,44:$V3}),o($Va,[2,35]),{21:[1,49]},{38:[1,50]},o($Va,$Vd,{43:51,50:$Ve}),o($Va,[2,39]),{38:[1,53],48:[1,54]},o($Va,[2,41]),o($Va,$Vd,{43:55,50:$Ve}),{35:[1,56]},o($Va,$Vd,{43:57,50:$Ve}),o($Va,$Vd,{43:58,50:$Ve}),{35:[1,59]},{38:[1,60],48:[1,61]},{9:62,33:[1,63]},{13:64,37:$V5},o($V4,[2,9],{21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,26:[1,70],27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp}),o($Vq,[2,12],{39:10,40:13,41:15,16:77,38:$Vr,42:$V2,44:$V3}),o($Vq,[2,13]),o($Vq,[2,14]),{10:79,16:8,34:$V1,38:$Vr,39:10,40:13,41:15,42:$V2,44:$V3},o([5,14,15,21,22,23,24,25,26,27,28,29,30,31,32,33,38,42,44],[2,31]),{36:[1,80]},o($V8,[2,71]),{21:[1,81]},o($Va,[2,37]),{19:$Vs,20:$Vt,38:$Vu,46:$Vv,51:82,53:$Vw,55:$Vx},o($Va,[2,40]),o($Va,[2,44]),o($Va,[2,42]),{36:[1,89]},o($Va,[2,38]),o($Va,[2,43]),{36:[1,90]},o($Va,[2,47]),o($Va,[2,48]),{5:[2,2]},{13:91,37:$V5},{16:92,33:[2,7],38:$Vr,39:10,40:13,41:15,42:$V2,44:$V3},{13:43,18:93,19:$Vb,20:$Vc,37:$V5},{13:43,18:94,19:$Vb,20:$Vc,37:$V5},{13:43,18:95,19:$Vb,20:$Vc,37:$V5},{13:43,18:96,19:$Vb,20:$Vc,37:$V5},{13:43,18:97,19:$Vb,20:$Vc,37:$V5},{13:43,18:98,19:$Vb,20:$Vc,37:$V5},{13:43,18:99,19:$Vb,20:$Vc,37:$V5},{13:43,18:100,19:$Vb,20:$Vc,37:$V5},{13:43,18:101,19:$Vb,20:$Vc,37:$V5},{13:43,18:102,19:$Vb,20:$Vc,37:$V5},{13:43,18:103,19:$Vb,20:$Vc,37:$V5},{13:43,18:104,19:$Vb,20:$Vc,37:$V5},o($Vq,[2,11]),{40:26,41:15,42:$V2,44:$V3},o([15,17,33],[2,5]),{16:105,38:$Vr,39:10,40:13,41:15,42:$V2,44:$V3},o($V8,[2,72]),{21:$Vy,22:$Vz,23:$VA,24:$VB,25:$VC,26:[1,113],48:$VD,52:[1,106],54:$VE,55:$VF,56:$VG,57:$VH},o($VI,[2,51]),o($VI,[2,52]),o($VI,[2,53]),{38:[1,118]},{35:[1,119]},{19:$Vs,20:$Vt,38:$Vu,46:$Vv,51:120,53:$Vw,55:$Vx},o($Va,$Vd,{43:121,50:$Ve}),o($Va,$Vd,{43:122,50:$Ve}),{5:[2,27],16:123,38:$Vr,39:10,40:13,41:15,42:$V2,44:$V3},{33:[2,8]},o($Vq,[2,15]),o($Vq,[2,16]),o($Vq,[2,17]),o($Vq,[2,18]),o($Vq,[2,19]),o([15,26,33],[2,20],{21:$Vf,22:$Vg,23:$Vh,24:$Vi,25:$Vj,27:$Vk,28:$Vl,29:$Vm,30:$Vn,31:$Vo,32:$Vp}),o($Vq,[2,21]),o($Vq,[2,22]),o($Vq,[2,23]),o($Vq,[2,24]),o($Vq,[2,25]),o($Vq,[2,26]),o($V6,[2,29]),o($Va,[2,49]),{19:$Vs,20:$Vt,38:$Vu,46:$Vv,51:124,53:$Vw,55:$Vx},{19:$Vs,20:$Vt,38:$Vu,46:$Vv,51:125,53:$Vw,55:$Vx},{19:$Vs,20:$Vt,38:$Vu,46:$Vv,51:126,53:$Vw,55:$Vx},{19:$Vs,20:$Vt,38:$Vu,46:$Vv,51:127,53:$Vw,55:$Vx},{19:$Vs,20:$Vt,38:$Vu,46:$Vv,51:128,53:$Vw,55:$Vx},{19:$Vs,20:$Vt,38:$Vu,46:$Vv,51:129,53:$Vw,55:$Vx},{19:$Vs,20:$Vt,38:$Vu,46:$Vv,51:130,53:$Vw,55:$Vx},{19:$Vs,20:$Vt,38:$Vu,46:$Vv,51:131,53:$Vw,55:$Vx},{19:$Vs,20:$Vt,38:$Vu,46:$Vv,51:132,53:$Vw,55:$Vx},{19:$Vs,20:$Vt,38:$Vu,46:$Vv,51:133,53:$Vw,55:$Vx},{19:$Vs,20:$Vt,38:$Vu,46:$Vv,51:134,53:$Vw,55:$Vx},o($VI,[2,54]),{36:[1,135]},o($VJ,[2,61],{48:$VD,56:$VG,57:$VH}),o($Va,[2,45]),o($Va,[2,46]),{5:[2,28]},o($VJ,[2,56],{48:$VD,56:$VG,57:$VH}),o($VJ,[2,57],{48:$VD,56:$VG,57:$VH}),o($VI,[2,58]),o($VI,[2,59]),o($VI,[2,60]),o($VK,[2,62],{48:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),o([26,52],[2,63],{21:$Vy,22:$Vz,23:$VA,24:$VB,25:$VC,48:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),o($VK,[2,64],{48:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),o($VK,[2,65],{48:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),o($VK,[2,66],{48:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),o($VK,[2,67],{48:$VD,54:$VE,55:$VF,56:$VG,57:$VH}),o($VI,[2,55])],
defaultActions: {4:[2,3],5:[2,4],18:[2,1],62:[2,2],92:[2,8],123:[2,28]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* Omitir espacios en blanco */ 
break;
case 1: /* Omitir saltos de linea, tabs y retornos*/ 
break;
case 2:
break;
case 3: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 34;
break;
case 4: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 12;
break;
case 5: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_let';
break;
case 6: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 17;
break;
case 7: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 15;
break;
case 8: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 33;
break;
case 9: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_data';
break;
case 10: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_if';
break;
case 11: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_then';
break;
case 12: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_else';
break;
case 13: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 14;
break;
case 14: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_to';
break;
case 15: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_at';
break;
case 16: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 31;
break;
case 17: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 32;
break;
case 18: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 28;
break;
case 19: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 30;
break;
case 20: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 27;
break;
case 21: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 29;
break;
case 22: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 37;
break;
case 23: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_or';
break;
case 24: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_and';
break;
case 25: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 57;
break;
case 26: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 56;
break;
case 27: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 49;
break;
case 28: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_text';
break;
case 29: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_namespace_node';
break;
case 30: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ancestor_or_self';
break;
case 31: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ancestor';
break;
case 32: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_attribute';
break;
case 33: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_child';
break;
case 34: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_descendant_or_self';
break;
case 35: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_descendant';
break;
case 36: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_following_sibling';
break;
case 37: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_following';
break;
case 38: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_namespace';
break;
case 39: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_parent';
break;
case 40: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_preceding_sibling';
break;
case 41: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_preceding';
break;
case 42: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_self';
break;
case 43: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_child';
break;
case 44: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_attribute';
break;
case 45: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 53;
break;
case 46: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_position';
break;
case 47: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_text';
break;
case 48: listaTokens.push(new Token("ComparacionLet", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_let_igual';
break;
case 49: listaTokens.push(new Token("Barra", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_barra_or';
break;
case 50: listaTokens.push(new Token("Suma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 54;
break;
case 51: listaTokens.push(new Token("Resta", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 55;
break;
case 52: listaTokens.push(new Token("Asterisco", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 48;
break;
case 53: listaTokens.push(new Token("Indiferente", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 26;
break;
case 54: listaTokens.push(new Token("Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 25;
break;
case 55: listaTokens.push(new Token("Menor_igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 24;
break;
case 56: listaTokens.push(new Token("Menor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 22;
break;
case 57: listaTokens.push(new Token("Mayor_Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 23;
break;
case 58: listaTokens.push(new Token("Mayor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 21;
break;
case 59: listaTokens.push(new Token("Cuatro_Puntos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_cuatro_puntos';
break;
case 60: listaTokens.push(new Token("Diagonal_doble", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 44;
break;
case 61: listaTokens.push(new Token("Division", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 42;
break;
case 62: listaTokens.push(new Token("Arroba", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 46;
break;
case 63: listaTokens.push(new Token("Puntos_Seguidos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 45;
break;
case 64: listaTokens.push(new Token("Parentesis_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 35;
break;
case 65: listaTokens.push(new Token("Parentesis_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 36;
break;
case 66: listaTokens.push(new Token("Corchete_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_izq";
break;
case 67: listaTokens.push(new Token("Corchete_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_der";
break;
case 68: listaTokens.push(new Token("Llave_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_llave_izq";
break;
case 69: listaTokens.push(new Token("Llave_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_llave_der";
break;
case 70: listaTokens.push(new Token("Coma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_coma";
break;
case 71: listaTokens.push(new Token("Punto", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 47;
break;
case 72: listaTokens.push(new Token("Caracter", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_caracter";
break;
case 73: listaTokens.push(new Token("Cadena", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_hilera";
break;
case 74: listaTokens.push(new Token("Identificador", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_identificador";
break;
case 75: listaTokens.push(new Token("Numero", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_numero";
break;
case 76: return "EOF"; 
break;
case 77: listaErrores.push(new TokenError("xPATH","ERROR LEXICO","Caracter no reconocido "+ yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column )); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:[\t\r]+)/,/^(?:[(][:][^:]*[:]+[)])/,/^(?:doc\b)/,/^(?:for\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order by\b)/,/^(?:return\b)/,/^(?:data\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:in\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:\$)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:div\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:namespace-node\b)/,/^(?:ancestor-or-self\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:descendant\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:child\b)/,/^(?:attribute\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:text\b)/,/^(?::=)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:!=)/,/^(?:=)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:::)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:@)/,/^(?:\.\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?:'[^\']*')/,/^(?:"([^\\\"]|\\.)*")/,/^(?:[a-zA-Z_À-ÿ\u00F1\u00D1]([a-zA-ZÀ-ÿ\-\.\u00F1\u00D10-9_])*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador_xqueryizq;
exports.Parser = analizador_xqueryizq.Parser;
exports.parse = function () { return analizador_xqueryizq.parse.apply(analizador_xqueryizq, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}