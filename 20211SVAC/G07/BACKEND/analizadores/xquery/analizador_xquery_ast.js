/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador_xquery_ast = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,30],$V1=[1,38],$V2=[1,39],$V3=[1,34],$V4=[1,18],$V5=[1,35],$V6=[1,32],$V7=[1,37],$V8=[1,36],$V9=[1,14],$Va=[1,33],$Vb=[1,15],$Vc=[1,42],$Vd=[1,43],$Ve=[1,19],$Vf=[1,20],$Vg=[1,21],$Vh=[1,22],$Vi=[53,71],$Vj=[5,34],$Vk=[5,34,46],$Vl=[1,51],$Vm=[2,5,25,27,34,39,42,47],$Vn=[5,34,46,53,55,71],$Vo=[2,65],$Vp=[1,56],$Vq=[1,55],$Vr=[5,28,33,34,46,60],$Vs=[2,5,25,27,31,34,36,39,42,46,47,53,55,59,60,61,62,63,64,65,66,67,68,69,70,71,84,87,90,91,92,93,94,95],$Vt=[2,131],$Vu=[2,5,25,27,31,34,36,39,42,46,47,53,55,59,60,61,62,63,64,65,66,67,68,69,70,71,78,80,84,87,90,91,92,93,94,95],$Vv=[1,89],$Vw=[1,90],$Vx=[1,96],$Vy=[1,95],$Vz=[1,97],$VA=[1,98],$VB=[1,99],$VC=[1,103],$VD=[2,86],$VE=[1,118],$VF=[1,131],$VG=[1,132],$VH=[1,133],$VI=[1,134],$VJ=[1,135],$VK=[1,136],$VL=[1,137],$VM=[1,138],$VN=[1,139],$VO=[1,140],$VP=[1,141],$VQ=[1,142],$VR=[31,53,59,60,61,62,63,64,65,66,67,68,69,70,71],$VS=[1,156],$VT=[1,157],$VU=[1,155],$VV=[1,154],$VW=[1,152],$VX=[1,153],$VY=[1,158],$VZ=[1,159],$V_=[1,160],$V$=[1,161],$V01=[1,162],$V11=[1,163],$V21=[1,149],$V31=[1,147],$V41=[1,148],$V51=[1,150],$V61=[1,151],$V71=[1,164],$V81=[1,165],$V91=[2,5,25,27,31,34,36,39,42,46,47,59,60,61,62,63,64,65,66,67,68,69,70,84,87,90,91,92,93,94,95],$Va1=[2,116],$Vb1=[1,167],$Vc1=[31,36],$Vd1=[53,55,71],$Ve1=[2,5,25,27,31,34,36,39,42,46,47,59,60,61,62,63,64,65,66,67,68,69,70,87,90,91,94,95],$Vf1=[2,5,25,27,31,34,36,39,42,46,47,59,60,61,62,63,64,65,66,67,68,69,70,87,94,95],$Vg1=[1,249],$Vh1=[1,259];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INICIO":4,"EOF":5,"XQUERYGRA":6,"HTML":7,"INSTRUCCIONES":8,"INSTRUCCION":9,"FOR_IN":10,"WHERE":11,"ORDEN":12,"RETURN":13,"LLAMADA":14,"F_DATA":15,"F_UPPER":16,"F_LOWER":17,"F_SUBSTRING":18,"CREAR_V":19,"ASIGNAR_V":20,"IF_":21,"CREAR_F":22,"tk_punto_coma":23,"LLAMADA_F":24,"tk_declare":25,"tk_function":26,"tk_local":27,"tk_identificador":28,"tk_parentesis_izq":29,"PARAMETROS":30,"tk_parentesis_der":31,"RETURNFUNC":32,"tk_llave_izq":33,"tk_llave_der":34,"PARAMETROS_ENTRADA":35,"tk_coma":36,"DATO":37,"PARAMETRO":38,"tk_dolar":39,"tk_as":40,"tk_xs":41,"tk_if":42,"THEN_":43,"ELSE_":44,"tk_then":45,"tk_else":46,"tk_let":47,"VARIABLE":48,"tk_let_igual":49,"tk_for":50,"tk_in":51,"tk_at":52,"tk_order_by":53,"XPATHGRA":54,"tk_where":55,"CONDICIONAL":56,"tk_numero":57,"tk_hilera":58,"tk_mayor":59,"tk_menor":60,"tk_mayor_igual":61,"tk_menor_igual":62,"tk_igual":63,"tk_indiferente":64,"tk_gt":65,"tk_lt":66,"tk_ge":67,"tk_le":68,"tk_eq":69,"tk_ne":70,"tk_return":71,"IF":72,"tk_doc":73,"tk_to":74,"CONSULTA_":75,"CONSULTA":76,"NODO":77,"tk_diagonal":78,"PREDICADO":79,"tk_diagonal_doble":80,"tk_puntos_seguidos":81,"tk_arroba":82,"tk_punto":83,"tk_asterisco":84,"tk_node":85,"tk_corchete_izq":86,"tk_corchete_der":87,"F_NATIVAS":88,"tk_last":89,"tk_mas":90,"tk_menos":91,"tk_div":92,"tk_mod":93,"tk_and":94,"tk_or":95,"tk_data":96,"CONS":97,"tk_upper":98,"tk_lower":99,"tk_substring":100,"CONTENIDO":101,"L_CONTENIDO":102,"COD":103,"THEN":104,"ELSE":105,"FUNCACKERMAN":106,"CABEZAFUNC":107,"LISTAFUNC":108,"FUNCOPERACION":109,"LLAMADAFUNCION":110,"LISTACONF":111,"CODIGOFUNCION":112,"LLAFCONT":113,"L_LLAFCONT":114,"LLAD":115,"FF":116,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",23:"tk_punto_coma",25:"tk_declare",26:"tk_function",27:"tk_local",28:"tk_identificador",29:"tk_parentesis_izq",31:"tk_parentesis_der",33:"tk_llave_izq",34:"tk_llave_der",36:"tk_coma",39:"tk_dolar",40:"tk_as",41:"tk_xs",42:"tk_if",45:"tk_then",46:"tk_else",47:"tk_let",49:"tk_let_igual",50:"tk_for",51:"tk_in",52:"tk_at",53:"tk_order_by",55:"tk_where",57:"tk_numero",58:"tk_hilera",59:"tk_mayor",60:"tk_menor",61:"tk_mayor_igual",62:"tk_menor_igual",63:"tk_igual",64:"tk_indiferente",65:"tk_gt",66:"tk_lt",67:"tk_ge",68:"tk_le",69:"tk_eq",70:"tk_ne",71:"tk_return",73:"tk_doc",74:"tk_to",78:"tk_diagonal",80:"tk_diagonal_doble",81:"tk_puntos_seguidos",82:"tk_arroba",83:"tk_punto",84:"tk_asterisco",85:"tk_node",86:"tk_corchete_izq",87:"tk_corchete_der",89:"tk_last",90:"tk_mas",91:"tk_menos",92:"tk_div",93:"tk_mod",94:"tk_and",95:"tk_or",96:"tk_data",98:"tk_upper",99:"tk_lower",100:"tk_substring"},
productions_: [0,[3,2],[4,1],[4,1],[4,1],[8,2],[8,1],[6,4],[6,1],[6,1],[6,1],[6,1],[6,1],[9,1],[9,1],[9,1],[9,2],[9,1],[9,2],[22,11],[22,10],[24,5],[35,3],[35,1],[30,3],[30,1],[38,5],[21,5],[21,6],[43,2],[44,2],[44,2],[19,2],[19,4],[20,3],[10,4],[10,6],[12,2],[12,3],[12,0],[11,2],[11,0],[56,2],[56,1],[56,1],[56,1],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[13,2],[13,3],[13,2],[13,2],[14,5],[14,1],[14,2],[14,1],[14,5],[48,2],[54,1],[75,2],[75,1],[76,2],[76,1],[77,3],[77,3],[77,2],[77,3],[77,2],[77,3],[77,3],[77,3],[77,5],[77,5],[77,3],[77,3],[79,3],[79,0],[37,1],[37,2],[37,1],[37,2],[37,3],[37,2],[37,1],[37,1],[37,3],[37,3],[37,3],[37,3],[37,3],[37,2],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[88,5],[88,0],[15,4],[16,4],[17,4],[18,6],[18,8],[97,2],[97,1],[7,1],[101,2],[101,1],[101,2],[101,1],[102,3],[102,4],[102,1],[103,3],[72,6],[72,5],[104,2],[104,2],[105,2],[105,2],[106,8],[107,4],[108,3],[108,1],[111,5],[32,3],[109,3],[112,1],[112,0],[110,1],[113,2],[113,1],[113,2],[113,1],[114,3],[114,4],[114,1],[115,7],[116,1],[116,3],[116,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 3: case 4:
this.$= new Nodo("INI", "INI" );
        this.$.agregarHijo($$[$0]);
	
break;
case 5:
this.$= new Nodo("INS", "INS" );
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
	
break;
case 6:
this.$= new Nodo("INS", "INS" );
        this.$.agregarHijo($$[$0]);
	
break;
case 7:
this.$= new Nodo("XQY", "XQY" );
	this.$.agregarHijo($$[$0-3]);
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
	
break;
case 8: case 9: case 10: case 11: case 12:
this.$= new Nodo("XQY", "XQY" );
        this.$.agregarHijo($$[$0]);
	
break;
case 13: case 14: case 15: case 17:
this.$= new Nodo("INST", "INST" );
        this.$.agregarHijo($$[$0]);
	
break;
case 16:
this.$= new Nodo("INST", "INST" );
        this.$.agregarHijo($$[$0-1]);
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 18:

            listaErrores.push(new TokenError("XQUERY",'Este es un error sint√°ctico ' , "Me recupero con: " + yytext , _$[$0-1].first_line, _$[$0].first_column ));
        
break;
case 19:
this.$= new Nodo("CF", "CF" );
        this.$.agregarHijo(new Nodo($$[$0-10],$$[$0-10]));
        this.$.agregarHijo(new Nodo($$[$0-9],$$[$0-9]));
        this.$.agregarHijo(new Nodo($$[$0-8],$$[$0-8]));
        this.$.agregarHijo(new Nodo($$[$0-7],$$[$0-7]));
        this.$.agregarHijo(new Nodo($$[$0-6],$$[$0-6]));
        this.$.agregarHijo($$[$0-5]);
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo($$[$0-3]);
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));        
	
break;
case 20:
this.$= new Nodo("CF", "CF" );
        this.$.agregarHijo(new Nodo($$[$0-9],$$[$0-9]));
        this.$.agregarHijo(new Nodo($$[$0-8],$$[$0-8]));
        this.$.agregarHijo(new Nodo($$[$0-7],$$[$0-7]));
        this.$.agregarHijo(new Nodo($$[$0-6],$$[$0-6]));
        this.$.agregarHijo(new Nodo($$[$0-5],$$[$0-5]));
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo($$[$0-3]);
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));        
	
break;
case 21:
this.$= new Nodo("CF", "CF" );
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));       
	
break;
case 22:
this.$= new Nodo("PENT", "PENT" );
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
        
break;
case 23:
this.$= new Nodo("PENT", "PENT" );
        this.$.agregarHijo($$[$0]);
        
break;
case 24:
this.$= new Nodo("PMS", "PMS" );
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
        
break;
case 25:
this.$= new Nodo("PMS", "PMS" );
        this.$.agregarHijo($$[$0]);
        
break;
case 26:
this.$= new Nodo("PMS", "PMS" );
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 27: case 134:
this.$= new Nodo("IF", "IF" );
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
        
break;
case 28: case 133:
this.$= new Nodo("IF", "IF" );
        this.$.agregarHijo(new Nodo($$[$0-5],$$[$0-5]));
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo($$[$0-3]);
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
        
break;
case 29: case 135: case 136:
this.$= new Nodo("THEN", "THEN" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
        
break;
case 30: case 31: case 137: case 138:
this.$= new Nodo("ELSE", "ELSE" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
        
break;
case 32:
this.$= new Nodo("CRV", "CRV" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
        
break;
case 33:
this.$= new Nodo("CRV", "CRV" );
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);        
        
break;
case 34:
this.$= new Nodo("ASV", "ASV" );
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);        
        
break;
case 35:
this.$= new Nodo("FOR", "FOR" );
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 36:
this.$= new Nodo("FOR", "FOR" );
        this.$.agregarHijo(new Nodo($$[$0-5],$$[$0-5]));
        this.$.agregarHijo($$[$0-4]);
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
        
break;
case 37:
this.$= new Nodo("ORD", "ORD" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 38:
this.$= new Nodo("ORD", "ORD" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
	
break;
case 39:
this.$= new Nodo("ORD", "ORD" );
          this.$.agregarHijo(new Nodo("Œµ","Œµ"));         
        
break;
case 40:
this.$= new Nodo("WHE", "WHE" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 41:

        this.$= new Nodo("WHE","WHE");
        this.$.agregarHijo(new Nodo("Œµ","Œµ"));
        
break;
case 42:
this.$= new Nodo("CONDI", "CONDI" );
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
	
break;
case 43:
this.$= new Nodo("CONDI", "CONDI" );
        this.$.agregarHijo($$[$0]);
	
break;
case 44: case 45:
this.$= new Nodo("CONDI", "CONDI" );
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57:
this.$= new Nodo("CONDI", "CONDI" );
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 58: case 60: case 61:
this.$= new Nodo("RET", "RET" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 59:
this.$= new Nodo("RET", "RET" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
	
break;
case 62:
this.$= new Nodo("LLA", "LLA" );
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 63: case 65:
this.$= new Nodo("LLA","LLA");
        this.$.agregarHijo($$[$0]);
        
break;
case 64:
this.$= new Nodo("LLA","LLA");
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
        
break;
case 66:
this.$= new Nodo("LLA","LLA");
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));        
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));                
        
break;
case 67:
this.$= new Nodo("VAR", "VAR" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 68:
this.$= new Nodo("XGRA", "XGRA" );
        this.$.agregarHijo($$[$0]);
	
break;
case 69:
this.$= new Nodo("CONI", "CONI" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 70:
this.$= new Nodo("CONI", "CONI" );
        this.$.agregarHijo($$[$0]);
	
break;
case 71:
this.$= new Nodo("CON", "CON" );
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
	
break;
case 72:
this.$= new Nodo("CON", "CON" );
        this.$.agregarHijo($$[$0]);
	
break;
case 73: case 74: case 78: case 79:
this.$= new Nodo("NODO", "NODO" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 75: case 77:
this.$= new Nodo("NODO", "NODO" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 76:
this.$= new Nodo("NODO", "NODO" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 80: case 83: case 84:
this.$= new Nodo("NODO", "NODO" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 81: case 82:
this.$= new Nodo("NODO", "NODO" );
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 85:
this.$= new Nodo("PRE", "PRE" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 86:

        this.$= new Nodo("PRE","PRE");
        this.$.agregarHijo(new Nodo("Œµ","Œµ"));
        
break;
case 87: case 89:
this.$= new Nodo("DATO", "DATO" );
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 88: case 100:
this.$= new Nodo("DATO", "DATO" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 90:
this.$= new Nodo("DATO", "DATO" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 91:
this.$= new Nodo("DATO", "DATO" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 92:
this.$= new Nodo("DATO", "DATO" );
        this.$.agregarHijo($$[$0-1]);
	this.$.agregarHijo($$[$0]);
        
break;
case 93: case 94:
this.$= new Nodo("DATO", "DATO" );
        this.$.agregarHijo($$[$0]);
	
break;
case 95: case 96: case 97: case 98: case 99: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113: case 114:
this.$= new Nodo("DATO", "DATO" );
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 115:
this.$= new Nodo("FNAT", "FNAT" );
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 116:

        this.$= new Nodo("FNAT","FNAT");
        this.$.agregarHijo(new Nodo("Œµ","Œµ"));
        
break;
case 117:
this.$= new Nodo("FDATA", "FDATA" );
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 118:
this.$= new Nodo("FUP", "FUP" );
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 119:
this.$= new Nodo("FLOW", "FLOW" );
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 120:
this.$= new Nodo("FSUB", "FSUB" );
        this.$.agregarHijo(new Nodo($$[$0-5],$$[$0-5]));
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo($$[$0-3]);
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 121:
this.$= new Nodo("FSUB", "FSUB" );
        this.$.agregarHijo(new Nodo($$[$0-7],$$[$0-7]));
        this.$.agregarHijo(new Nodo($$[$0-6],$$[$0-6]));
        this.$.agregarHijo($$[$0-5]);
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));	
        
break;
case 122:
this.$= new Nodo("CONS", "CONS" );
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
	
break;
case 123:
this.$= new Nodo("CONS", "CONS" );
        this.$.agregarHijo($$[$0]);
        
break;
case 124:
this.$= new Nodo("HTML", "HTML" );
        this.$.agregarHijo($$[$0]);
        
break;
case 125: case 127:
this.$= new Nodo("CONT", "CONT" );
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
        
break;
case 126: case 128:
this.$= new Nodo("CONT", "CONT" );
        this.$.agregarHijo($$[$0]);
        
break;
case 129:
this.$= new Nodo("LCONT", "LCONT" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 130:
this.$= new Nodo("LCONT", "LCONT" );
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 131:
this.$= new Nodo("LCONT", "LCONT" );
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 132:
this.$= new Nodo("COD", "COD" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 139:
this.$= new Nodo("FACE", "FACE" );
        this.$.agregarHijo($$[$0-7]);
        this.$.agregarHijo(new Nodo($$[$0-6],$$[$0-6]));
        this.$.agregarHijo($$[$0-5]);
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo($$[$0-3]);
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
        
break;
case 140:
this.$= new Nodo("CABF", "CABF" );
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 141:
this.$= new Nodo("LISTF", "LISTF" );
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
        
break;
case 142:
this.$= new Nodo("LISTF", "LISTF" );
        this.$.agregarHijo($$[$0]);
        
break;
case 143:
this.$= new Nodo("LISTCF", "LISTCF" );
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 144:
this.$= new Nodo("RETF", "RETF" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 145:
this.$= new Nodo("FNR", "FNR" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 146:
this.$= new Nodo("CFR", "CFR" );
        this.$.agregarHijo($$[$0]);
        
break;
case 147:

        this.$= new Nodo("CFR","CFR");
        this.$.agregarHijo(new Nodo("Œµ","Œµ"));
        
break;
case 148:
this.$= new Nodo("LLFA", "LLFA" );
        this.$.agregarHijo($$[$0]);
        
break;
case 149: case 151:
this.$= new Nodo("LLFAC", "LLFAC" );
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
        
break;
case 150: case 152:
this.$= new Nodo("LLFAC", "LLFAC" );
        this.$.agregarHijo($$[$0]);
        
break;
case 153:
this.$= new Nodo("L_LLFAC", "L_LLFAC" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 154:
this.$= new Nodo("L_LLFAC", "L_LLFAC" );
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 155:
this.$= new Nodo("L_LLFAC", "L_LLFAC" );
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 156:
this.$= new Nodo("LLAD", "LLAD" );
        this.$.agregarHijo(new Nodo($$[$0-6],$$[$0-6]));
        this.$.agregarHijo(new Nodo($$[$0-5],$$[$0-5]));
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 157:
this.$= new Nodo("FF", "FF" );
        this.$.agregarHijo($$[$0]);
        
break;
case 158: case 159:
this.$= new Nodo("FF", "FF" );
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
        
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:13,10:6,14:7,15:8,16:9,17:10,18:11,19:25,20:26,21:27,22:28,24:29,25:$V1,27:$V2,28:$V3,29:$V4,33:$V5,39:$V6,42:$V7,47:$V8,48:17,50:$V9,54:16,60:$Va,73:$Vb,75:31,76:40,77:41,78:$Vc,80:$Vd,96:$Ve,98:$Vf,99:$Vg,100:$Vh,101:12,102:23,103:24},{1:[3]},{5:[1,44]},{5:[2,2]},{5:[2,3]},{2:$V0,5:[2,4],9:45,19:25,20:26,21:27,22:28,24:29,25:$V1,27:$V2,39:$V6,42:$V7,47:$V8,48:46},o($Vi,[2,41],{11:47,55:[1,48]}),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),o($Vj,[2,11]),o($Vj,[2,12]),o($Vk,[2,124],{102:49,103:50,28:$Vl,33:$V5,60:$Va}),o($Vm,[2,6]),{39:$V6,48:52},{29:[1,53]},o($Vn,[2,63]),{5:$Vo,28:$Vp,49:$Vq,54:54,75:31,76:40,77:41,78:$Vc,80:$Vd},{57:[1,57]},{29:[1,58]},{29:[1,59]},{29:[1,60]},{29:[1,61]},o($Vr,[2,126]),o($Vr,[2,128]),o($Vm,[2,13]),o($Vm,[2,14]),o($Vm,[2,15]),{23:[1,62]},o($Vm,[2,17]),{23:[1,63]},o($Vs,[2,68]),{28:[1,64]},{28:[1,65],78:[1,66]},o($Vr,$Vt,{77:41,76:67,78:$Vc,80:$Vd}),{6:68,10:6,14:7,15:8,16:9,17:10,18:11,28:$Vp,29:$V4,39:$V6,48:69,50:$V9,54:16,73:$Vb,75:31,76:40,77:41,78:$Vc,80:$Vd,96:$Ve,98:$Vf,99:$Vg,100:$Vh},{39:$V6,48:70},{29:[1,71]},{26:[1,72]},{28:[1,73]},o($Vs,[2,70],{77:74,78:$Vc,80:$Vd}),o($Vu,[2,72]),{28:[1,75],81:[1,76],82:[1,77],83:[1,78],84:[1,79],85:[1,80]},{28:[1,81],82:[1,84],84:[1,82],85:[1,83]},{1:[2,1]},o($Vm,[2,5]),{49:$Vq},{12:85,53:[1,86],71:[2,39]},{39:$V6,48:88,56:87,57:$Vv,58:$Vw},o($Vr,[2,125]),o($Vr,[2,127]),o($Vr,$Vt),{51:[1,91],52:[1,92]},{58:[1,93]},o($Vn,[2,64]),{24:101,27:$V2,28:$Vx,37:94,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{76:67,77:41,78:$Vc,80:$Vd},{74:[1,104]},{39:$V6,48:106,97:105},{39:$V6,48:106,97:107},{39:$V6,48:106,97:108},{39:$V6,48:106,97:109},o($Vm,[2,16]),o($Vm,[2,18]),o([2,5,25,27,28,31,34,36,39,42,46,47,49,51,52,53,55,59,60,61,62,63,64,65,66,67,68,69,70,71,78,80,83,84,87,90,91,92,93,94,95],[2,67]),{59:[1,110]},{28:[1,111]},o($Vs,[2,69],{77:74,78:$Vc,80:$Vd}),{34:[1,112]},o($Vn,$Vo,{75:31,76:40,77:41,54:54,28:$Vp,78:$Vc,80:$Vd}),o($Vm,[2,32],{49:[1,113]}),{24:101,27:$V2,28:$Vx,37:114,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{27:[1,115]},{29:[1,116]},o($Vu,[2,71]),o($Vu,$VD,{79:117,86:$VE}),o($Vu,[2,75]),{28:[1,119],84:[1,120]},o($Vu,[2,77]),o($Vu,$VD,{79:121,86:$VE}),{29:[1,122]},o($Vu,$VD,{79:123,86:$VE}),o($Vu,$VD,{79:124,86:$VE}),{29:[1,125]},{28:[1,126],84:[1,127]},{13:128,71:[1,129]},{39:$V6,48:130},o($Vi,[2,40],{59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ}),o($VR,[2,43],{75:31,76:40,77:41,54:143,28:$Vp,78:$Vc,80:$Vd}),o($VR,[2,44]),o($VR,[2,45]),{14:144,28:$Vp,29:$V4,39:$V6,48:69,54:16,73:$Vb,75:31,76:40,77:41,78:$Vc,80:$Vd},{39:$V6,48:145},{31:[1,146]},o($Vm,[2,34],{59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,84:$V21,90:$V31,91:$V41,92:$V51,93:$V61,94:$V71,95:$V81}),o($V91,[2,87]),o($V91,$Va1,{77:41,76:67,88:166,78:$Vc,80:$Vd,83:$Vb1}),o($V91,[2,89]),{28:[1,168]},{29:[1,169]},o($V91,$Va1,{88:170,83:$Vb1}),o($V91,[2,93]),o($V91,[2,94]),{24:101,27:$V2,28:$Vx,37:171,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{57:[1,172]},{31:[1,173]},o($Vc1,[2,123],{75:31,76:40,77:41,54:174,28:$Vp,78:$Vc,80:$Vd}),{31:[1,175]},{31:[1,176]},{36:[1,177]},o($Vr,[2,129]),{59:[1,178]},o($Vr,[2,132]),{24:101,27:$V2,28:$Vx,37:179,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{31:[1,180],59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,84:$V21,90:$V31,91:$V41,92:$V51,93:$V61,94:$V71,95:$V81},{28:[1,181]},{24:101,27:$V2,28:$Vx,35:182,37:183,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},o($Vu,[2,73]),{24:101,27:$V2,28:$Vx,37:184,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},o($Vu,[2,76]),o($Vu,[2,80]),o($Vu,[2,78]),{31:[1,185]},o($Vu,[2,74]),o($Vu,[2,79]),{31:[1,186]},o($Vu,[2,83]),o($Vu,[2,84]),o($Vj,[2,7]),{7:188,28:$Vl,33:$V5,39:$V6,42:[1,190],48:187,60:$Va,72:189,101:12,102:23,103:24},{28:$Vp,54:191,71:[2,37],75:31,76:40,77:41,78:$Vc,80:$Vd},{39:$V6,48:88,56:192,57:$Vv,58:$Vw},{39:$V6,48:88,56:193,57:$Vv,58:$Vw},{39:$V6,48:88,56:194,57:$Vv,58:$Vw},{39:$V6,48:88,56:195,57:$Vv,58:$Vw},{39:$V6,48:88,56:196,57:$Vv,58:$Vw},{39:$V6,48:88,56:197,57:$Vv,58:$Vw},{39:$V6,48:88,56:198,57:$Vv,58:$Vw},{39:$V6,48:88,56:199,57:$Vv,58:$Vw},{39:$V6,48:88,56:200,57:$Vv,58:$Vw},{39:$V6,48:88,56:201,57:$Vv,58:$Vw},{39:$V6,48:88,56:202,57:$Vv,58:$Vw},{39:$V6,48:88,56:203,57:$Vv,58:$Vw},o($VR,[2,42]),o($Vd1,[2,35]),{51:[1,204]},{28:$Vp,54:205,75:31,76:40,77:41,78:$Vc,80:$Vd},{24:101,27:$V2,28:$Vx,37:206,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{24:101,27:$V2,28:$Vx,37:207,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{24:101,27:$V2,28:$Vx,37:208,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{24:101,27:$V2,28:$Vx,37:209,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{24:101,27:$V2,28:$Vx,37:210,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{24:101,27:$V2,28:$Vx,37:211,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{24:101,27:$V2,28:$Vx,37:212,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{24:101,27:$V2,28:$Vx,37:213,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{24:101,27:$V2,28:$Vx,37:214,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{24:101,27:$V2,28:$Vx,37:215,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{24:101,27:$V2,28:$Vx,37:216,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{24:101,27:$V2,28:$Vx,37:217,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{24:101,27:$V2,28:$Vx,37:218,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{24:101,27:$V2,28:$Vx,37:219,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{24:101,27:$V2,28:$Vx,37:220,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{24:101,27:$V2,28:$Vx,37:221,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{24:101,27:$V2,28:$Vx,37:222,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{24:101,27:$V2,28:$Vx,37:223,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{24:101,27:$V2,28:$Vx,37:224,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},o($V91,[2,88]),{74:[1,225]},o($V91,[2,90]),{31:[1,226]},o($V91,[2,92]),o($Ve1,[2,100],{84:$V21,92:$V51,93:$V61}),{31:[1,227]},o($Vj,[2,117]),o($Vc1,[2,122]),o($Vj,[2,118]),o($Vj,[2,119]),{57:[1,228]},o($Vr,[2,130]),o($Vm,[2,33],{59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,84:$V21,90:$V31,91:$V41,92:$V51,93:$V61,94:$V71,95:$V81}),{43:229,45:[1,230]},{29:[1,231]},{31:[1,232],36:[1,233]},o($Vc1,[2,23],{59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,84:$V21,90:$V31,91:$V41,92:$V51,93:$V61,94:$V71,95:$V81}),{59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,84:$V21,87:[1,234],90:$V31,91:$V41,92:$V51,93:$V61,94:$V71,95:$V81},o($Vu,$VD,{79:235,86:$VE}),o($Vu,$VD,{79:236,86:$VE}),o($Vj,[2,58],{75:31,76:40,77:41,54:237,28:$Vp,78:$Vc,80:$Vd}),o($Vj,[2,60]),o($Vj,[2,61]),{29:[1,238]},{71:[2,38]},o($VR,[2,46]),o($VR,[2,47]),o($VR,[2,48]),o($VR,[2,49]),o($VR,[2,50]),o([31,53,64,71],[2,51],{59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ}),o($VR,[2,52]),o($VR,[2,53]),o($VR,[2,54]),o($VR,[2,55]),o($VR,[2,56]),o($VR,[2,57]),{14:239,28:$Vp,29:$V4,39:$V6,48:69,54:16,73:$Vb,75:31,76:40,77:41,78:$Vc,80:$Vd},o($Vn,[2,62]),o($Ve1,[2,95],{84:$V21,92:$V51,93:$V61}),o($Ve1,[2,96],{84:$V21,92:$V51,93:$V61}),o($V91,[2,97]),o($V91,[2,98]),o($V91,[2,99]),o($Vf1,[2,101],{84:$V21,90:$V31,91:$V41,92:$V51,93:$V61}),o([2,5,25,27,31,34,36,39,42,46,47,64,87,94,95],[2,102],{59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,84:$V21,90:$V31,91:$V41,92:$V51,93:$V61}),o($Vf1,[2,103],{84:$V21,90:$V31,91:$V41,92:$V51,93:$V61}),o($Vf1,[2,104],{84:$V21,90:$V31,91:$V41,92:$V51,93:$V61}),o($Vf1,[2,105],{84:$V21,90:$V31,91:$V41,92:$V51,93:$V61}),o($Vf1,[2,106],{84:$V21,90:$V31,91:$V41,92:$V51,93:$V61}),o($Vf1,[2,107],{84:$V21,90:$V31,91:$V41,92:$V51,93:$V61}),o($Vf1,[2,108],{84:$V21,90:$V31,91:$V41,92:$V51,93:$V61}),o($Vf1,[2,109],{84:$V21,90:$V31,91:$V41,92:$V51,93:$V61}),o($Vf1,[2,110],{84:$V21,90:$V31,91:$V41,92:$V51,93:$V61}),o($Vf1,[2,111],{84:$V21,90:$V31,91:$V41,92:$V51,93:$V61}),o($Vf1,[2,112],{84:$V21,90:$V31,91:$V41,92:$V51,93:$V61}),o([2,5,25,27,31,34,36,39,42,46,47,87,94,95],[2,113],{59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,84:$V21,90:$V31,91:$V41,92:$V51,93:$V61}),o([2,5,25,27,31,34,36,39,42,46,47,87,95],[2,114],{59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,84:$V21,90:$V31,91:$V41,92:$V51,93:$V61,94:$V71}),{28:[1,240]},o($V91,[2,91]),o($Vn,[2,66]),{31:[1,241],36:[1,242]},o($Vm,[2,27],{44:243,46:[1,244]}),{24:101,27:$V2,28:$Vx,37:245,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},{30:246,31:[1,247],38:248,39:$Vg1},o($V91,[2,21]),{24:101,27:$V2,28:$Vx,37:250,39:$V6,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},o($Vu,[2,85]),o($Vu,[2,81]),o($Vu,[2,82]),o($Vj,[2,59]),{39:$V6,48:88,56:251,57:$Vv,58:$Vw},o($Vd1,[2,36]),{29:[1,252]},o($Vj,[2,120]),{57:[1,253]},o($Vm,[2,28]),{21:255,24:101,27:$V2,28:$Vx,37:254,39:$V6,42:$V7,48:100,54:102,57:$Vy,58:$Vz,75:31,76:40,77:41,78:$Vc,80:$Vd,82:$VA,89:$VB,91:$VC},o([2,5,25,27,34,39,42,46,47],[2,29],{59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,84:$V21,90:$V31,91:$V41,92:$V51,93:$V61,94:$V71,95:$V81}),{31:[1,256],36:[1,257]},{32:258,40:$Vh1},o($Vc1,[2,25]),{28:[1,260]},o($Vc1,[2,22],{59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,84:$V21,90:$V31,91:$V41,92:$V51,93:$V61,94:$V71,95:$V81}),{31:[1,261],59:$VF,60:$VG,61:$VH,62:$VI,63:$VJ,64:$VK,65:$VL,66:$VM,67:$VN,68:$VO,69:$VP,70:$VQ},{31:[1,262]},{31:[1,263]},o($Vm,[2,30],{59:$VS,60:$VT,61:$VU,62:$VV,63:$VW,64:$VX,65:$VY,66:$VZ,67:$V_,68:$V$,69:$V01,70:$V11,84:$V21,90:$V31,91:$V41,92:$V51,93:$V61,94:$V71,95:$V81}),o($Vm,[2,31]),{32:264,40:$Vh1},{38:265,39:$Vg1},{33:[1,266]},{41:[1,267]},{40:[1,268]},{45:[1,270],104:269},o($V91,[2,115]),o($Vj,[2,121]),{33:[1,271]},o($Vc1,[2,24]),{2:$V0,8:272,9:13,19:25,20:26,21:27,22:28,24:29,25:$V1,27:$V2,39:$V6,42:$V7,47:$V8,48:46},{28:[1,273]},{41:[1,274]},o($Vj,[2,134],{105:275,46:[1,276]}),{7:277,14:278,28:$V3,29:$V4,33:$V5,39:$V6,48:69,54:16,60:$Va,73:$Vb,75:31,76:40,77:41,78:$Vc,80:$Vd,101:12,102:23,103:24},{2:$V0,8:279,9:13,19:25,20:26,21:27,22:28,24:29,25:$V1,27:$V2,39:$V6,42:$V7,47:$V8,48:46},{2:$V0,9:45,19:25,20:26,21:27,22:28,24:29,25:$V1,27:$V2,34:[1,280],39:$V6,42:$V7,47:$V8,48:46},{33:[2,144]},{28:[1,281]},o($Vj,[2,133]),{7:282,14:283,28:$V3,29:$V4,33:$V5,39:$V6,48:69,54:16,60:$Va,73:$Vb,75:31,76:40,77:41,78:$Vc,80:$Vd,101:12,102:23,103:24},o($Vk,[2,135]),o($Vk,[2,136]),{2:$V0,9:45,19:25,20:26,21:27,22:28,24:29,25:$V1,27:$V2,34:[1,284],39:$V6,42:$V7,47:$V8,48:46},{23:[2,20]},o($Vc1,[2,26]),o($Vj,[2,137]),o($Vj,[2,138]),{23:[2,19]}],
defaultActions: {3:[2,2],4:[2,3],44:[2,1],191:[2,38],273:[2,144],280:[2,20],284:[2,19]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* Omitir espacios en blanco */ 
break;
case 1: /* Omitir saltos de linea, tabs y retornos*/ 
break;
case 2:
break;
case 3: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 73;
break;
case 4: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 50;
break;
case 5: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 47;
break;
case 6: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 55;
break;
case 7: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 53;
break;
case 8: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 71;
break;
case 9: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 96;
break;
case 10: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 42;
break;
case 11: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 45;
break;
case 12: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 46;
break;
case 13: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 51;
break;
case 14: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 74;
break;
case 15: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 52;
break;
case 16: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 69;
break;
case 17: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 70;
break;
case 18: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 66;
break;
case 19: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 68;
break;
case 20: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 65;
break;
case 21: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 67;
break;
case 22: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 25;
break;
case 23: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 26;
break;
case 24: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 27;
break;
case 25: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 40;
break;
case 26: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 41;
break;
case 27: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 23;
break;
case 28: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_html_abre';
break;
case 29: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_html_cierra';
break;
case 30: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_body_abre';
break;
case 31: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_body_cierra';
break;
case 32: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_h1_abre';
break;
case 33: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_h1_cierra';
break;
case 34: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ul_abre';
break;
case 35: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ul_cierra';
break;
case 36: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_li_abre';
break;
case 37: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_li_cierra';
break;
case 38: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 39;
break;
case 39: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 95;
break;
case 40: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 94;
break;
case 41: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 93;
break;
case 42: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 92;
break;
case 43: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 85;
break;
case 44: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_text';
break;
case 45: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_namespace_node';
break;
case 46: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ancestor_or_self';
break;
case 47: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ancestor';
break;
case 48: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_attribute';
break;
case 49: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_child';
break;
case 50: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_descendant_or_self';
break;
case 51: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_descendant';
break;
case 52: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_following_sibling';
break;
case 53: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_following';
break;
case 54: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_namespace';
break;
case 55: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_parent';
break;
case 56: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_preceding_sibling';
break;
case 57: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_preceding';
break;
case 58: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_self';
break;
case 59: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_child';
break;
case 60: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_attribute';
break;
case 61: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 89;
break;
case 62: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_position';
break;
case 63: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_text';
break;
case 64: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 98;
break;
case 65: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 99;
break;
case 66: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 100;
break;
case 67: listaTokens.push(new Token("ComparacionLet", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 49;
break;
case 68: listaTokens.push(new Token("Barra", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_barra_or';
break;
case 69: listaTokens.push(new Token("Suma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 90;
break;
case 70: listaTokens.push(new Token("Resta", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 91;
break;
case 71: listaTokens.push(new Token("Asterisco", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 84;
break;
case 72: listaTokens.push(new Token("Indiferente", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 64;
break;
case 73: listaTokens.push(new Token("Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 63;
break;
case 74: listaTokens.push(new Token("Menor_igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 62;
break;
case 75: listaTokens.push(new Token("Menor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 60;
break;
case 76: listaTokens.push(new Token("Mayor_Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 61;
break;
case 77: listaTokens.push(new Token("Mayor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 59;
break;
case 78: listaTokens.push(new Token("Cuatro_Puntos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_cuatro_puntos';
break;
case 79: listaTokens.push(new Token("Diagonal_doble", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 80;
break;
case 80: listaTokens.push(new Token("Division", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 78;
break;
case 81: listaTokens.push(new Token("Arroba", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 82;
break;
case 82: listaTokens.push(new Token("Puntos_Seguidos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 81;
break;
case 83: listaTokens.push(new Token("Parentesis_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 29;
break;
case 84: listaTokens.push(new Token("Parentesis_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 31;
break;
case 85: listaTokens.push(new Token("Corchete_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_izq";
break;
case 86: listaTokens.push(new Token("Corchete_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_der";
break;
case 87: listaTokens.push(new Token("Llave_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_llave_izq";
break;
case 88: listaTokens.push(new Token("Llave_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_llave_der";
break;
case 89: listaTokens.push(new Token("Coma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_coma";
break;
case 90: listaTokens.push(new Token("Punto", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 83;
break;
case 91: listaTokens.push(new Token("Caracter", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_caracter";
break;
case 92: listaTokens.push(new Token("Cadena", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_hilera";
break;
case 93: listaTokens.push(new Token("Identificador", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_identificador";
break;
case 94: listaTokens.push(new Token("Numero", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_numero";
break;
case 95: return "EOF"; 
break;
case 96: listaErrores.push(new TokenError("xPATH","ERROR LEXICO","Caracter no reconocido "+ yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column )); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:[\t\r]+)/,/^(?:[(][:][^:]*[:]+[)])/,/^(?:doc\b)/,/^(?:for\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order by\b)/,/^(?:return\b)/,/^(?:data\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:in\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:local:)/,/^(?:as\b)/,/^(?:xs:)/,/^(?:;)/,/^(?:<html>)/,/^(?:<\/html>)/,/^(?:<body>)/,/^(?:<\/body>)/,/^(?:<h1>)/,/^(?:<\/h1>)/,/^(?:<ul>)/,/^(?:<\/ul>)/,/^(?:<li>)/,/^(?:<\/li>)/,/^(?:\$)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:div\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:namespace-node\b)/,/^(?:ancestor-or-self\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:descendant\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:child\b)/,/^(?:attribute\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:text\b)/,/^(?:upper-case\b)/,/^(?:lower-case\b)/,/^(?:substring\b)/,/^(?::=)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:!=)/,/^(?:=)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:::)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:@)/,/^(?:\.\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?:'[^\']*')/,/^(?:"([^\\\"]|\\.)*")/,/^(?:[a-zA-Z_√Ä-√ø\u00F1\u00D1]([a-zA-Z√Ä-√ø\-\.\u00F1\u00D10-9_])*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador_xquery_ast;
exports.Parser = analizador_xquery_ast.Parser;
exports.parse = function () { return analizador_xquery_ast.parse.apply(analizador_xquery_ast, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}