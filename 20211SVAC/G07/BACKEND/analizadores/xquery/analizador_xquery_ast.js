/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador_xquery_ast = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,37],$V1=[1,38],$V2=[1,33],$V3=[1,18],$V4=[1,34],$V5=[1,31],$V6=[1,36],$V7=[1,35],$V8=[1,14],$V9=[1,32],$Va=[1,15],$Vb=[1,41],$Vc=[1,42],$Vd=[1,19],$Ve=[1,20],$Vf=[1,21],$Vg=[1,22],$Vh=[53,71],$Vi=[5,34],$Vj=[5,34,46],$Vk=[1,50],$Vl=[5,25,27,34,39,42,47],$Vm=[5,34,46,53,55,71],$Vn=[2,64],$Vo=[1,55],$Vp=[1,54],$Vq=[5,28,33,34,46,60],$Vr=[5,25,27,31,34,36,39,42,46,47,53,55,59,60,61,62,63,64,65,66,67,68,69,70,71,84,87,90,91,92,93,94,95],$Vs=[2,130],$Vt=[5,25,27,31,34,36,39,42,46,47,53,55,59,60,61,62,63,64,65,66,67,68,69,70,71,78,80,84,87,90,91,92,93,94,95],$Vu=[1,87],$Vv=[1,88],$Vw=[1,94],$Vx=[1,93],$Vy=[1,95],$Vz=[1,96],$VA=[1,97],$VB=[1,101],$VC=[2,85],$VD=[1,116],$VE=[1,129],$VF=[1,130],$VG=[1,131],$VH=[1,132],$VI=[1,133],$VJ=[1,134],$VK=[1,135],$VL=[1,136],$VM=[1,137],$VN=[1,138],$VO=[1,139],$VP=[1,140],$VQ=[31,53,59,60,61,62,63,64,65,66,67,68,69,70,71],$VR=[1,154],$VS=[1,155],$VT=[1,153],$VU=[1,152],$VV=[1,150],$VW=[1,151],$VX=[1,156],$VY=[1,157],$VZ=[1,158],$V_=[1,159],$V$=[1,160],$V01=[1,161],$V11=[1,147],$V21=[1,145],$V31=[1,146],$V41=[1,148],$V51=[1,149],$V61=[1,162],$V71=[1,163],$V81=[5,25,27,31,34,36,39,42,46,47,59,60,61,62,63,64,65,66,67,68,69,70,84,87,90,91,92,93,94,95],$V91=[2,115],$Va1=[1,165],$Vb1=[31,36],$Vc1=[53,55,71],$Vd1=[5,25,27,31,34,36,39,42,46,47,59,60,61,62,63,64,65,66,67,68,69,70,87,90,91,94,95],$Ve1=[5,25,27,31,34,36,39,42,46,47,59,60,61,62,63,64,65,66,67,68,69,70,87,94,95],$Vf1=[1,247],$Vg1=[1,257];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INICIO":4,"EOF":5,"XQUERYGRA":6,"HTML":7,"INSTRUCCIONES":8,"INSTRUCCION":9,"FOR_IN":10,"WHERE":11,"ORDEN":12,"RETURN":13,"LLAMADA":14,"F_DATA":15,"F_UPPER":16,"F_LOWER":17,"F_SUBSTRING":18,"CREAR_V":19,"ASIGNAR_V":20,"IF_":21,"CREAR_F":22,"tk_punto_coma":23,"LLAMADA_F":24,"tk_declare":25,"tk_function":26,"tk_local":27,"tk_identificador":28,"tk_parentesis_izq":29,"PARAMETROS":30,"tk_parentesis_der":31,"RETURNFUNC":32,"tk_llave_izq":33,"tk_llave_der":34,"PARAMETROS_ENTRADA":35,"tk_coma":36,"DATO":37,"PARAMETRO":38,"tk_dolar":39,"tk_as":40,"tk_xs":41,"tk_if":42,"THEN_":43,"ELSE_":44,"tk_then":45,"tk_else":46,"tk_let":47,"VARIABLE":48,"tk_let_igual":49,"tk_for":50,"tk_in":51,"tk_at":52,"tk_order_by":53,"XPATHGRA":54,"tk_where":55,"CONDICIONAL":56,"tk_numero":57,"tk_hilera":58,"tk_mayor":59,"tk_menor":60,"tk_mayor_igual":61,"tk_menor_igual":62,"tk_igual":63,"tk_indiferente":64,"tk_gt":65,"tk_lt":66,"tk_ge":67,"tk_le":68,"tk_eq":69,"tk_ne":70,"tk_return":71,"IF":72,"tk_doc":73,"tk_to":74,"CONSULTA_":75,"CONSULTA":76,"NODO":77,"tk_diagonal":78,"PREDICADO":79,"tk_diagonal_doble":80,"tk_puntos_seguidos":81,"tk_arroba":82,"tk_punto":83,"tk_asterisco":84,"tk_node":85,"tk_corchete_izq":86,"tk_corchete_der":87,"F_NATIVAS":88,"tk_last":89,"tk_mas":90,"tk_menos":91,"tk_div":92,"tk_mod":93,"tk_and":94,"tk_or":95,"tk_data":96,"CONS":97,"tk_upper":98,"tk_lower":99,"tk_substring":100,"CONTENIDO":101,"L_CONTENIDO":102,"COD":103,"THEN":104,"ELSE":105,"FUNCACKERMAN":106,"CABEZAFUNC":107,"LISTAFUNC":108,"FUNCOPERACION":109,"LLAMADAFUNCION":110,"LISTACONF":111,"CODIGOFUNCION":112,"LLAFCONT":113,"L_LLAFCONT":114,"LLAD":115,"FF":116,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",23:"tk_punto_coma",25:"tk_declare",26:"tk_function",27:"tk_local",28:"tk_identificador",29:"tk_parentesis_izq",31:"tk_parentesis_der",33:"tk_llave_izq",34:"tk_llave_der",36:"tk_coma",39:"tk_dolar",40:"tk_as",41:"tk_xs",42:"tk_if",45:"tk_then",46:"tk_else",47:"tk_let",49:"tk_let_igual",50:"tk_for",51:"tk_in",52:"tk_at",53:"tk_order_by",55:"tk_where",57:"tk_numero",58:"tk_hilera",59:"tk_mayor",60:"tk_menor",61:"tk_mayor_igual",62:"tk_menor_igual",63:"tk_igual",64:"tk_indiferente",65:"tk_gt",66:"tk_lt",67:"tk_ge",68:"tk_le",69:"tk_eq",70:"tk_ne",71:"tk_return",73:"tk_doc",74:"tk_to",78:"tk_diagonal",80:"tk_diagonal_doble",81:"tk_puntos_seguidos",82:"tk_arroba",83:"tk_punto",84:"tk_asterisco",85:"tk_node",86:"tk_corchete_izq",87:"tk_corchete_der",89:"tk_last",90:"tk_mas",91:"tk_menos",92:"tk_div",93:"tk_mod",94:"tk_and",95:"tk_or",96:"tk_data",98:"tk_upper",99:"tk_lower",100:"tk_substring"},
productions_: [0,[3,2],[4,1],[4,1],[4,1],[8,2],[8,1],[6,4],[6,1],[6,1],[6,1],[6,1],[6,1],[9,1],[9,1],[9,1],[9,2],[9,1],[22,11],[22,10],[24,5],[35,3],[35,1],[30,3],[30,1],[38,5],[21,5],[21,6],[43,2],[44,2],[44,2],[19,2],[19,4],[20,3],[10,4],[10,6],[12,2],[12,3],[12,0],[11,2],[11,0],[56,2],[56,1],[56,1],[56,1],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[13,2],[13,3],[13,2],[13,2],[14,5],[14,1],[14,2],[14,1],[14,5],[48,2],[54,1],[75,2],[75,1],[76,2],[76,1],[77,3],[77,3],[77,2],[77,3],[77,2],[77,3],[77,3],[77,3],[77,5],[77,5],[77,3],[77,3],[79,3],[79,0],[37,1],[37,2],[37,1],[37,2],[37,3],[37,2],[37,1],[37,1],[37,3],[37,3],[37,3],[37,3],[37,3],[37,2],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[37,3],[88,5],[88,0],[15,4],[16,4],[17,4],[18,6],[18,8],[97,2],[97,1],[7,1],[101,2],[101,1],[101,2],[101,1],[102,3],[102,4],[102,1],[103,3],[72,6],[72,5],[104,2],[104,2],[105,2],[105,2],[106,8],[107,4],[108,3],[108,1],[111,5],[32,3],[109,3],[112,1],[112,0],[110,1],[113,2],[113,1],[113,2],[113,1],[114,3],[114,4],[114,1],[115,7],[116,1],[116,3],[116,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 3: case 4:
this.$= new Nodo("INI", "INI" );
        this.$.agregarHijo($$[$0]);
	
break;
case 5:
this.$= new Nodo("INS", "INS" );
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
	
break;
case 6:
this.$= new Nodo("INS", "INS" );
        this.$.agregarHijo($$[$0]);
	
break;
case 7:
this.$= new Nodo("XQY", "XQY" );
	this.$.agregarHijo($$[$0-3]);
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
	
break;
case 8: case 9: case 10: case 11: case 12:
this.$= new Nodo("XQY", "XQY" );
        this.$.agregarHijo($$[$0]);
	
break;
case 13: case 14: case 15: case 17:
this.$= new Nodo("INST", "INST" );
        this.$.agregarHijo($$[$0]);
	
break;
case 16:
this.$= new Nodo("INST", "INST" );
        this.$.agregarHijo($$[$0-1]);
	this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 18:
this.$= new Nodo("CF", "CF" );
        this.$.agregarHijo(new Nodo($$[$0-10],$$[$0-10]));
        this.$.agregarHijo(new Nodo($$[$0-9],$$[$0-9]));
        this.$.agregarHijo(new Nodo($$[$0-8],$$[$0-8]));
        this.$.agregarHijo(new Nodo($$[$0-7],$$[$0-7]));
        this.$.agregarHijo(new Nodo($$[$0-6],$$[$0-6]));
        this.$.agregarHijo($$[$0-5]);
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo($$[$0-3]);
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));        
	
break;
case 19:
this.$= new Nodo("CF", "CF" );
        this.$.agregarHijo(new Nodo($$[$0-9],$$[$0-9]));
        this.$.agregarHijo(new Nodo($$[$0-8],$$[$0-8]));
        this.$.agregarHijo(new Nodo($$[$0-7],$$[$0-7]));
        this.$.agregarHijo(new Nodo($$[$0-6],$$[$0-6]));
        this.$.agregarHijo(new Nodo($$[$0-5],$$[$0-5]));
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo($$[$0-3]);
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));        
	
break;
case 20:
this.$= new Nodo("CF", "CF" );
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));       
	
break;
case 21:
this.$= new Nodo("PENT", "PENT" );
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
        
break;
case 22:
this.$= new Nodo("PENT", "PENT" );
        this.$.agregarHijo($$[$0]);
        
break;
case 23:
this.$= new Nodo("PMS", "PMS" );
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
        
break;
case 24:
this.$= new Nodo("PMS", "PMS" );
        this.$.agregarHijo($$[$0]);
        
break;
case 25:
this.$= new Nodo("PMS", "PMS" );
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 26: case 133:
this.$= new Nodo("IF", "IF" );
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
        
break;
case 27: case 132:
this.$= new Nodo("IF", "IF" );
        this.$.agregarHijo(new Nodo($$[$0-5],$$[$0-5]));
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo($$[$0-3]);
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
        
break;
case 28: case 134: case 135:
this.$= new Nodo("THEN", "THEN" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
        
break;
case 29: case 30: case 136: case 137:
this.$= new Nodo("ELSE", "ELSE" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
        
break;
case 31:
this.$= new Nodo("CRV", "CRV" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
        
break;
case 32:
this.$= new Nodo("CRV", "CRV" );
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);        
        
break;
case 33:
this.$= new Nodo("ASV", "ASV" );
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);        
        
break;
case 34:
this.$= new Nodo("FOR", "FOR" );
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 35:
this.$= new Nodo("FOR", "FOR" );
        this.$.agregarHijo(new Nodo($$[$0-5],$$[$0-5]));
        this.$.agregarHijo($$[$0-4]);
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
        
break;
case 36:
this.$= new Nodo("ORD", "ORD" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 37:
this.$= new Nodo("ORD", "ORD" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
	
break;
case 38:
this.$= new Nodo("ORD", "ORD" );
          this.$.agregarHijo(new Nodo("ε","ε"));         
        
break;
case 39:
this.$= new Nodo("WHE", "WHE" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 40:

        this.$= new Nodo("WHE","WHE");
        this.$.agregarHijo(new Nodo("ε","ε"));
        
break;
case 41:
this.$= new Nodo("CONDI", "CONDI" );
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
	
break;
case 42:
this.$= new Nodo("CONDI", "CONDI" );
        this.$.agregarHijo($$[$0]);
	
break;
case 43: case 44:
this.$= new Nodo("CONDI", "CONDI" );
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 45: case 46: case 47: case 48: case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56:
this.$= new Nodo("CONDI", "CONDI" );
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 57: case 59: case 60:
this.$= new Nodo("RET", "RET" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 58:
this.$= new Nodo("RET", "RET" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
	
break;
case 61:
this.$= new Nodo("LLA", "LLA" );
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 62: case 64:
this.$= new Nodo("LLA","LLA");
        this.$.agregarHijo($$[$0]);
        
break;
case 63:
this.$= new Nodo("LLA","LLA");
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
        
break;
case 65:
this.$= new Nodo("LLA","LLA");
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));        
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));                
        
break;
case 66:
this.$= new Nodo("VAR", "VAR" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 67:
this.$= new Nodo("XGRA", "XGRA" );
        this.$.agregarHijo($$[$0]);
	
break;
case 68:
this.$= new Nodo("CONI", "CONI" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 69:
this.$= new Nodo("CONI", "CONI" );
        this.$.agregarHijo($$[$0]);
	
break;
case 70:
this.$= new Nodo("CON", "CON" );
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
	
break;
case 71:
this.$= new Nodo("CON", "CON" );
        this.$.agregarHijo($$[$0]);
	
break;
case 72: case 73: case 77: case 78:
this.$= new Nodo("NODO", "NODO" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 74: case 76:
this.$= new Nodo("NODO", "NODO" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 75:
this.$= new Nodo("NODO", "NODO" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 79: case 82: case 83:
this.$= new Nodo("NODO", "NODO" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 80: case 81:
this.$= new Nodo("NODO", "NODO" );
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 84:
this.$= new Nodo("PRE", "PRE" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 85:

        this.$= new Nodo("PRE","PRE");
        this.$.agregarHijo(new Nodo("ε","ε"));
        
break;
case 86: case 88:
this.$= new Nodo("DATO", "DATO" );
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 87: case 99:
this.$= new Nodo("DATO", "DATO" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 89:
this.$= new Nodo("DATO", "DATO" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 90:
this.$= new Nodo("DATO", "DATO" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 91:
this.$= new Nodo("DATO", "DATO" );
        this.$.agregarHijo($$[$0-1]);
	this.$.agregarHijo($$[$0]);
        
break;
case 92: case 93:
this.$= new Nodo("DATO", "DATO" );
        this.$.agregarHijo($$[$0]);
	
break;
case 94: case 95: case 96: case 97: case 98: case 100: case 101: case 102: case 103: case 104: case 105: case 106: case 107: case 108: case 109: case 110: case 111: case 112: case 113:
this.$= new Nodo("DATO", "DATO" );
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 114:
this.$= new Nodo("FNAT", "FNAT" );
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 115:

        this.$= new Nodo("FNAT","FNAT");
        this.$.agregarHijo(new Nodo("ε","ε"));
        
break;
case 116:
this.$= new Nodo("FDATA", "FDATA" );
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 117:
this.$= new Nodo("FUP", "FUP" );
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 118:
this.$= new Nodo("FLOW", "FLOW" );
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 119:
this.$= new Nodo("FSUB", "FSUB" );
        this.$.agregarHijo(new Nodo($$[$0-5],$$[$0-5]));
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo($$[$0-3]);
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 120:
this.$= new Nodo("FSUB", "FSUB" );
        this.$.agregarHijo(new Nodo($$[$0-7],$$[$0-7]));
        this.$.agregarHijo(new Nodo($$[$0-6],$$[$0-6]));
        this.$.agregarHijo($$[$0-5]);
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));	
        
break;
case 121:
this.$= new Nodo("CONS", "CONS" );
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
	
break;
case 122:
this.$= new Nodo("CONS", "CONS" );
        this.$.agregarHijo($$[$0]);
        
break;
case 123:
this.$= new Nodo("HTML", "HTML" );
        this.$.agregarHijo($$[$0]);
        
break;
case 124: case 126:
this.$= new Nodo("CONT", "CONT" );
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
        
break;
case 125: case 127:
this.$= new Nodo("CONT", "CONT" );
        this.$.agregarHijo($$[$0]);
        
break;
case 128:
this.$= new Nodo("LCONT", "LCONT" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 129:
this.$= new Nodo("LCONT", "LCONT" );
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 130:
this.$= new Nodo("LCONT", "LCONT" );
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 131:
this.$= new Nodo("COD", "COD" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 138:
this.$= new Nodo("FACE", "FACE" );
        this.$.agregarHijo($$[$0-7]);
        this.$.agregarHijo(new Nodo($$[$0-6],$$[$0-6]));
        this.$.agregarHijo($$[$0-5]);
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo($$[$0-3]);
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
        
break;
case 139:
this.$= new Nodo("CABF", "CABF" );
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 140:
this.$= new Nodo("LISTF", "LISTF" );
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
        
break;
case 141:
this.$= new Nodo("LISTF", "LISTF" );
        this.$.agregarHijo($$[$0]);
        
break;
case 142:
this.$= new Nodo("LISTCF", "LISTCF" );
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 143:
this.$= new Nodo("RETF", "RETF" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 144:
this.$= new Nodo("FNR", "FNR" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 145:
this.$= new Nodo("CFR", "CFR" );
        this.$.agregarHijo($$[$0]);
        
break;
case 146:

        this.$= new Nodo("CFR","CFR");
        this.$.agregarHijo(new Nodo("ε","ε"));
        
break;
case 147:
this.$= new Nodo("LLFA", "LLFA" );
        this.$.agregarHijo($$[$0]);
        
break;
case 148: case 150:
this.$= new Nodo("LLFAC", "LLFAC" );
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
        
break;
case 149: case 151:
this.$= new Nodo("LLFAC", "LLFAC" );
        this.$.agregarHijo($$[$0]);
        
break;
case 152:
this.$= new Nodo("L_LLFAC", "L_LLFAC" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 153:
this.$= new Nodo("L_LLFAC", "L_LLFAC" );
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 154:
this.$= new Nodo("L_LLFAC", "L_LLFAC" );
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 155:
this.$= new Nodo("LLAD", "LLAD" );
        this.$.agregarHijo(new Nodo($$[$0-6],$$[$0-6]));
        this.$.agregarHijo(new Nodo($$[$0-5],$$[$0-5]));
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 156:
this.$= new Nodo("FF", "FF" );
        this.$.agregarHijo($$[$0]);
        
break;
case 157: case 158:
this.$= new Nodo("FF", "FF" );
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
        
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:13,10:6,14:7,15:8,16:9,17:10,18:11,19:25,20:26,21:27,22:28,24:29,25:$V0,27:$V1,28:$V2,29:$V3,33:$V4,39:$V5,42:$V6,47:$V7,48:17,50:$V8,54:16,60:$V9,73:$Va,75:30,76:39,77:40,78:$Vb,80:$Vc,96:$Vd,98:$Ve,99:$Vf,100:$Vg,101:12,102:23,103:24},{1:[3]},{5:[1,43]},{5:[2,2]},{5:[2,3]},{5:[2,4],9:44,19:25,20:26,21:27,22:28,24:29,25:$V0,27:$V1,39:$V5,42:$V6,47:$V7,48:45},o($Vh,[2,40],{11:46,55:[1,47]}),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vj,[2,123],{102:48,103:49,28:$Vk,33:$V4,60:$V9}),o($Vl,[2,6]),{39:$V5,48:51},{29:[1,52]},o($Vm,[2,62]),{5:$Vn,28:$Vo,49:$Vp,54:53,75:30,76:39,77:40,78:$Vb,80:$Vc},{57:[1,56]},{29:[1,57]},{29:[1,58]},{29:[1,59]},{29:[1,60]},o($Vq,[2,125]),o($Vq,[2,127]),o($Vl,[2,13]),o($Vl,[2,14]),o($Vl,[2,15]),{23:[1,61]},o($Vl,[2,17]),o($Vr,[2,67]),{28:[1,62]},{28:[1,63],78:[1,64]},o($Vq,$Vs,{77:40,76:65,78:$Vb,80:$Vc}),{6:66,10:6,14:7,15:8,16:9,17:10,18:11,28:$Vo,29:$V3,39:$V5,48:67,50:$V8,54:16,73:$Va,75:30,76:39,77:40,78:$Vb,80:$Vc,96:$Vd,98:$Ve,99:$Vf,100:$Vg},{39:$V5,48:68},{29:[1,69]},{26:[1,70]},{28:[1,71]},o($Vr,[2,69],{77:72,78:$Vb,80:$Vc}),o($Vt,[2,71]),{28:[1,73],81:[1,74],82:[1,75],83:[1,76],84:[1,77],85:[1,78]},{28:[1,79],82:[1,82],84:[1,80],85:[1,81]},{1:[2,1]},o($Vl,[2,5]),{49:$Vp},{12:83,53:[1,84],71:[2,38]},{39:$V5,48:86,56:85,57:$Vu,58:$Vv},o($Vq,[2,124]),o($Vq,[2,126]),o($Vq,$Vs),{51:[1,89],52:[1,90]},{58:[1,91]},o($Vm,[2,63]),{24:99,27:$V1,28:$Vw,37:92,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{76:65,77:40,78:$Vb,80:$Vc},{74:[1,102]},{39:$V5,48:104,97:103},{39:$V5,48:104,97:105},{39:$V5,48:104,97:106},{39:$V5,48:104,97:107},o($Vl,[2,16]),o([5,25,27,28,31,34,36,39,42,46,47,49,51,52,53,55,59,60,61,62,63,64,65,66,67,68,69,70,71,78,80,83,84,87,90,91,92,93,94,95],[2,66]),{59:[1,108]},{28:[1,109]},o($Vr,[2,68],{77:72,78:$Vb,80:$Vc}),{34:[1,110]},o($Vm,$Vn,{75:30,76:39,77:40,54:53,28:$Vo,78:$Vb,80:$Vc}),o($Vl,[2,31],{49:[1,111]}),{24:99,27:$V1,28:$Vw,37:112,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{27:[1,113]},{29:[1,114]},o($Vt,[2,70]),o($Vt,$VC,{79:115,86:$VD}),o($Vt,[2,74]),{28:[1,117],84:[1,118]},o($Vt,[2,76]),o($Vt,$VC,{79:119,86:$VD}),{29:[1,120]},o($Vt,$VC,{79:121,86:$VD}),o($Vt,$VC,{79:122,86:$VD}),{29:[1,123]},{28:[1,124],84:[1,125]},{13:126,71:[1,127]},{39:$V5,48:128},o($Vh,[2,39],{59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP}),o($VQ,[2,42],{75:30,76:39,77:40,54:141,28:$Vo,78:$Vb,80:$Vc}),o($VQ,[2,43]),o($VQ,[2,44]),{14:142,28:$Vo,29:$V3,39:$V5,48:67,54:16,73:$Va,75:30,76:39,77:40,78:$Vb,80:$Vc},{39:$V5,48:143},{31:[1,144]},o($Vl,[2,33],{59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,84:$V11,90:$V21,91:$V31,92:$V41,93:$V51,94:$V61,95:$V71}),o($V81,[2,86]),o($V81,$V91,{77:40,76:65,88:164,78:$Vb,80:$Vc,83:$Va1}),o($V81,[2,88]),{28:[1,166]},{29:[1,167]},o($V81,$V91,{88:168,83:$Va1}),o($V81,[2,92]),o($V81,[2,93]),{24:99,27:$V1,28:$Vw,37:169,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{57:[1,170]},{31:[1,171]},o($Vb1,[2,122],{75:30,76:39,77:40,54:172,28:$Vo,78:$Vb,80:$Vc}),{31:[1,173]},{31:[1,174]},{36:[1,175]},o($Vq,[2,128]),{59:[1,176]},o($Vq,[2,131]),{24:99,27:$V1,28:$Vw,37:177,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{31:[1,178],59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,84:$V11,90:$V21,91:$V31,92:$V41,93:$V51,94:$V61,95:$V71},{28:[1,179]},{24:99,27:$V1,28:$Vw,35:180,37:181,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},o($Vt,[2,72]),{24:99,27:$V1,28:$Vw,37:182,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},o($Vt,[2,75]),o($Vt,[2,79]),o($Vt,[2,77]),{31:[1,183]},o($Vt,[2,73]),o($Vt,[2,78]),{31:[1,184]},o($Vt,[2,82]),o($Vt,[2,83]),o($Vi,[2,7]),{7:186,28:$Vk,33:$V4,39:$V5,42:[1,188],48:185,60:$V9,72:187,101:12,102:23,103:24},{28:$Vo,54:189,71:[2,36],75:30,76:39,77:40,78:$Vb,80:$Vc},{39:$V5,48:86,56:190,57:$Vu,58:$Vv},{39:$V5,48:86,56:191,57:$Vu,58:$Vv},{39:$V5,48:86,56:192,57:$Vu,58:$Vv},{39:$V5,48:86,56:193,57:$Vu,58:$Vv},{39:$V5,48:86,56:194,57:$Vu,58:$Vv},{39:$V5,48:86,56:195,57:$Vu,58:$Vv},{39:$V5,48:86,56:196,57:$Vu,58:$Vv},{39:$V5,48:86,56:197,57:$Vu,58:$Vv},{39:$V5,48:86,56:198,57:$Vu,58:$Vv},{39:$V5,48:86,56:199,57:$Vu,58:$Vv},{39:$V5,48:86,56:200,57:$Vu,58:$Vv},{39:$V5,48:86,56:201,57:$Vu,58:$Vv},o($VQ,[2,41]),o($Vc1,[2,34]),{51:[1,202]},{28:$Vo,54:203,75:30,76:39,77:40,78:$Vb,80:$Vc},{24:99,27:$V1,28:$Vw,37:204,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{24:99,27:$V1,28:$Vw,37:205,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{24:99,27:$V1,28:$Vw,37:206,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{24:99,27:$V1,28:$Vw,37:207,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{24:99,27:$V1,28:$Vw,37:208,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{24:99,27:$V1,28:$Vw,37:209,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{24:99,27:$V1,28:$Vw,37:210,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{24:99,27:$V1,28:$Vw,37:211,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{24:99,27:$V1,28:$Vw,37:212,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{24:99,27:$V1,28:$Vw,37:213,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{24:99,27:$V1,28:$Vw,37:214,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{24:99,27:$V1,28:$Vw,37:215,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{24:99,27:$V1,28:$Vw,37:216,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{24:99,27:$V1,28:$Vw,37:217,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{24:99,27:$V1,28:$Vw,37:218,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{24:99,27:$V1,28:$Vw,37:219,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{24:99,27:$V1,28:$Vw,37:220,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{24:99,27:$V1,28:$Vw,37:221,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{24:99,27:$V1,28:$Vw,37:222,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},o($V81,[2,87]),{74:[1,223]},o($V81,[2,89]),{31:[1,224]},o($V81,[2,91]),o($Vd1,[2,99],{84:$V11,92:$V41,93:$V51}),{31:[1,225]},o($Vi,[2,116]),o($Vb1,[2,121]),o($Vi,[2,117]),o($Vi,[2,118]),{57:[1,226]},o($Vq,[2,129]),o($Vl,[2,32],{59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,84:$V11,90:$V21,91:$V31,92:$V41,93:$V51,94:$V61,95:$V71}),{43:227,45:[1,228]},{29:[1,229]},{31:[1,230],36:[1,231]},o($Vb1,[2,22],{59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,84:$V11,90:$V21,91:$V31,92:$V41,93:$V51,94:$V61,95:$V71}),{59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,84:$V11,87:[1,232],90:$V21,91:$V31,92:$V41,93:$V51,94:$V61,95:$V71},o($Vt,$VC,{79:233,86:$VD}),o($Vt,$VC,{79:234,86:$VD}),o($Vi,[2,57],{75:30,76:39,77:40,54:235,28:$Vo,78:$Vb,80:$Vc}),o($Vi,[2,59]),o($Vi,[2,60]),{29:[1,236]},{71:[2,37]},o($VQ,[2,45]),o($VQ,[2,46]),o($VQ,[2,47]),o($VQ,[2,48]),o($VQ,[2,49]),o([31,53,64,71],[2,50],{59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP}),o($VQ,[2,51]),o($VQ,[2,52]),o($VQ,[2,53]),o($VQ,[2,54]),o($VQ,[2,55]),o($VQ,[2,56]),{14:237,28:$Vo,29:$V3,39:$V5,48:67,54:16,73:$Va,75:30,76:39,77:40,78:$Vb,80:$Vc},o($Vm,[2,61]),o($Vd1,[2,94],{84:$V11,92:$V41,93:$V51}),o($Vd1,[2,95],{84:$V11,92:$V41,93:$V51}),o($V81,[2,96]),o($V81,[2,97]),o($V81,[2,98]),o($Ve1,[2,100],{84:$V11,90:$V21,91:$V31,92:$V41,93:$V51}),o([5,25,27,31,34,36,39,42,46,47,64,87,94,95],[2,101],{59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,84:$V11,90:$V21,91:$V31,92:$V41,93:$V51}),o($Ve1,[2,102],{84:$V11,90:$V21,91:$V31,92:$V41,93:$V51}),o($Ve1,[2,103],{84:$V11,90:$V21,91:$V31,92:$V41,93:$V51}),o($Ve1,[2,104],{84:$V11,90:$V21,91:$V31,92:$V41,93:$V51}),o($Ve1,[2,105],{84:$V11,90:$V21,91:$V31,92:$V41,93:$V51}),o($Ve1,[2,106],{84:$V11,90:$V21,91:$V31,92:$V41,93:$V51}),o($Ve1,[2,107],{84:$V11,90:$V21,91:$V31,92:$V41,93:$V51}),o($Ve1,[2,108],{84:$V11,90:$V21,91:$V31,92:$V41,93:$V51}),o($Ve1,[2,109],{84:$V11,90:$V21,91:$V31,92:$V41,93:$V51}),o($Ve1,[2,110],{84:$V11,90:$V21,91:$V31,92:$V41,93:$V51}),o($Ve1,[2,111],{84:$V11,90:$V21,91:$V31,92:$V41,93:$V51}),o([5,25,27,31,34,36,39,42,46,47,87,94,95],[2,112],{59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,84:$V11,90:$V21,91:$V31,92:$V41,93:$V51}),o([5,25,27,31,34,36,39,42,46,47,87,95],[2,113],{59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,84:$V11,90:$V21,91:$V31,92:$V41,93:$V51,94:$V61}),{28:[1,238]},o($V81,[2,90]),o($Vm,[2,65]),{31:[1,239],36:[1,240]},o($Vl,[2,26],{44:241,46:[1,242]}),{24:99,27:$V1,28:$Vw,37:243,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},{30:244,31:[1,245],38:246,39:$Vf1},o($V81,[2,20]),{24:99,27:$V1,28:$Vw,37:248,39:$V5,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},o($Vt,[2,84]),o($Vt,[2,80]),o($Vt,[2,81]),o($Vi,[2,58]),{39:$V5,48:86,56:249,57:$Vu,58:$Vv},o($Vc1,[2,35]),{29:[1,250]},o($Vi,[2,119]),{57:[1,251]},o($Vl,[2,27]),{21:253,24:99,27:$V1,28:$Vw,37:252,39:$V5,42:$V6,48:98,54:100,57:$Vx,58:$Vy,75:30,76:39,77:40,78:$Vb,80:$Vc,82:$Vz,89:$VA,91:$VB},o([5,25,27,34,39,42,46,47],[2,28],{59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,84:$V11,90:$V21,91:$V31,92:$V41,93:$V51,94:$V61,95:$V71}),{31:[1,254],36:[1,255]},{32:256,40:$Vg1},o($Vb1,[2,24]),{28:[1,258]},o($Vb1,[2,21],{59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,84:$V11,90:$V21,91:$V31,92:$V41,93:$V51,94:$V61,95:$V71}),{31:[1,259],59:$VE,60:$VF,61:$VG,62:$VH,63:$VI,64:$VJ,65:$VK,66:$VL,67:$VM,68:$VN,69:$VO,70:$VP},{31:[1,260]},{31:[1,261]},o($Vl,[2,29],{59:$VR,60:$VS,61:$VT,62:$VU,63:$VV,64:$VW,65:$VX,66:$VY,67:$VZ,68:$V_,69:$V$,70:$V01,84:$V11,90:$V21,91:$V31,92:$V41,93:$V51,94:$V61,95:$V71}),o($Vl,[2,30]),{32:262,40:$Vg1},{38:263,39:$Vf1},{33:[1,264]},{41:[1,265]},{40:[1,266]},{45:[1,268],104:267},o($V81,[2,114]),o($Vi,[2,120]),{33:[1,269]},o($Vb1,[2,23]),{8:270,9:13,19:25,20:26,21:27,22:28,24:29,25:$V0,27:$V1,39:$V5,42:$V6,47:$V7,48:45},{28:[1,271]},{41:[1,272]},o($Vi,[2,133],{105:273,46:[1,274]}),{7:275,14:276,28:$V2,29:$V3,33:$V4,39:$V5,48:67,54:16,60:$V9,73:$Va,75:30,76:39,77:40,78:$Vb,80:$Vc,101:12,102:23,103:24},{8:277,9:13,19:25,20:26,21:27,22:28,24:29,25:$V0,27:$V1,39:$V5,42:$V6,47:$V7,48:45},{9:44,19:25,20:26,21:27,22:28,24:29,25:$V0,27:$V1,34:[1,278],39:$V5,42:$V6,47:$V7,48:45},{33:[2,143]},{28:[1,279]},o($Vi,[2,132]),{7:280,14:281,28:$V2,29:$V3,33:$V4,39:$V5,48:67,54:16,60:$V9,73:$Va,75:30,76:39,77:40,78:$Vb,80:$Vc,101:12,102:23,103:24},o($Vj,[2,134]),o($Vj,[2,135]),{9:44,19:25,20:26,21:27,22:28,24:29,25:$V0,27:$V1,34:[1,282],39:$V5,42:$V6,47:$V7,48:45},{23:[2,19]},o($Vb1,[2,25]),o($Vi,[2,136]),o($Vi,[2,137]),{23:[2,18]}],
defaultActions: {3:[2,2],4:[2,3],43:[2,1],189:[2,37],271:[2,143],278:[2,19],282:[2,18]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* Omitir espacios en blanco */ 
break;
case 1: /* Omitir saltos de linea, tabs y retornos*/ 
break;
case 2:
break;
case 3: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 73;
break;
case 4: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 50;
break;
case 5: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 47;
break;
case 6: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 55;
break;
case 7: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 53;
break;
case 8: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 71;
break;
case 9: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 96;
break;
case 10: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 42;
break;
case 11: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 45;
break;
case 12: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 46;
break;
case 13: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 51;
break;
case 14: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 74;
break;
case 15: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 52;
break;
case 16: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 69;
break;
case 17: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 70;
break;
case 18: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 66;
break;
case 19: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 68;
break;
case 20: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 65;
break;
case 21: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 67;
break;
case 22: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 25;
break;
case 23: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 26;
break;
case 24: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 27;
break;
case 25: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 40;
break;
case 26: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 41;
break;
case 27: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 23;
break;
case 28: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_html_abre';
break;
case 29: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_html_cierra';
break;
case 30: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_body_abre';
break;
case 31: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_body_cierra';
break;
case 32: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_h1_abre';
break;
case 33: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_h1_cierra';
break;
case 34: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ul_abre';
break;
case 35: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ul_cierra';
break;
case 36: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_li_abre';
break;
case 37: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_li_cierra';
break;
case 38: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 39;
break;
case 39: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 95;
break;
case 40: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 94;
break;
case 41: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 93;
break;
case 42: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 92;
break;
case 43: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 85;
break;
case 44: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_text';
break;
case 45: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_namespace_node';
break;
case 46: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ancestor_or_self';
break;
case 47: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ancestor';
break;
case 48: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_attribute';
break;
case 49: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_child';
break;
case 50: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_descendant_or_self';
break;
case 51: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_descendant';
break;
case 52: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_following_sibling';
break;
case 53: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_following';
break;
case 54: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_namespace';
break;
case 55: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_parent';
break;
case 56: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_preceding_sibling';
break;
case 57: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_preceding';
break;
case 58: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_self';
break;
case 59: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_child';
break;
case 60: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_attribute';
break;
case 61: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 89;
break;
case 62: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_position';
break;
case 63: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_text';
break;
case 64: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 98;
break;
case 65: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 99;
break;
case 66: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 100;
break;
case 67: listaTokens.push(new Token("ComparacionLet", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 49;
break;
case 68: listaTokens.push(new Token("Barra", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_barra_or';
break;
case 69: listaTokens.push(new Token("Suma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 90;
break;
case 70: listaTokens.push(new Token("Resta", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 91;
break;
case 71: listaTokens.push(new Token("Asterisco", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 84;
break;
case 72: listaTokens.push(new Token("Indiferente", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 64;
break;
case 73: listaTokens.push(new Token("Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 63;
break;
case 74: listaTokens.push(new Token("Menor_igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 62;
break;
case 75: listaTokens.push(new Token("Menor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 60;
break;
case 76: listaTokens.push(new Token("Mayor_Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 61;
break;
case 77: listaTokens.push(new Token("Mayor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 59;
break;
case 78: listaTokens.push(new Token("Cuatro_Puntos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_cuatro_puntos';
break;
case 79: listaTokens.push(new Token("Diagonal_doble", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 80;
break;
case 80: listaTokens.push(new Token("Division", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 78;
break;
case 81: listaTokens.push(new Token("Arroba", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 82;
break;
case 82: listaTokens.push(new Token("Puntos_Seguidos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 81;
break;
case 83: listaTokens.push(new Token("Parentesis_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 29;
break;
case 84: listaTokens.push(new Token("Parentesis_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 31;
break;
case 85: listaTokens.push(new Token("Corchete_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_izq";
break;
case 86: listaTokens.push(new Token("Corchete_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_der";
break;
case 87: listaTokens.push(new Token("Llave_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_llave_izq";
break;
case 88: listaTokens.push(new Token("Llave_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_llave_der";
break;
case 89: listaTokens.push(new Token("Coma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_coma";
break;
case 90: listaTokens.push(new Token("Punto", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 83;
break;
case 91: listaTokens.push(new Token("Caracter", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_caracter";
break;
case 92: listaTokens.push(new Token("Cadena", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_hilera";
break;
case 93: listaTokens.push(new Token("Identificador", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_identificador";
break;
case 94: listaTokens.push(new Token("Numero", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_numero";
break;
case 95: return "EOF"; 
break;
case 96: listaErrores.push(new TokenError("xPATH","ERROR LEXICO","Caracter no reconocido "+ yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column )); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:[\t\r]+)/,/^(?:[(][:][^:]*[:]+[)])/,/^(?:doc\b)/,/^(?:for\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order by\b)/,/^(?:return\b)/,/^(?:data\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:in\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:declare\b)/,/^(?:function\b)/,/^(?:local:)/,/^(?:as\b)/,/^(?:xs:)/,/^(?:;)/,/^(?:<html>)/,/^(?:<\/html>)/,/^(?:<body>)/,/^(?:<\/body>)/,/^(?:<h1>)/,/^(?:<\/h1>)/,/^(?:<ul>)/,/^(?:<\/ul>)/,/^(?:<li>)/,/^(?:<\/li>)/,/^(?:\$)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:div\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:namespace-node\b)/,/^(?:ancestor-or-self\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:descendant\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:child\b)/,/^(?:attribute\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:text\b)/,/^(?:upper-case\b)/,/^(?:lower-case\b)/,/^(?:substring\b)/,/^(?::=)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:!=)/,/^(?:=)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:::)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:@)/,/^(?:\.\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?:'[^\']*')/,/^(?:"([^\\\"]|\\.)*")/,/^(?:[a-zA-Z_À-ÿ\u00F1\u00D1]([a-zA-ZÀ-ÿ\-\.\u00F1\u00D10-9_])*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador_xquery_ast;
exports.Parser = analizador_xquery_ast.Parser;
exports.parse = function () { return analizador_xquery_ast.parse.apply(analizador_xquery_ast, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}