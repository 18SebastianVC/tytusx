/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador_xquery_ast = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,21],$V2=[1,12],$V3=[1,20],$V4=[1,22],$V5=[1,26],$V6=[1,27],$V7=[1,15],$V8=[1,16],$V9=[1,23],$Va=[19,37],$Vb=[5,70],$Vc=[5,70,75],$Vd=[1,33],$Ve=[5,19,21,37,70,75],$Vf=[1,37],$Vg=[5,26,43,69,70,75],$Vh=[5,19,21,25,26,27,28,29,30,31,32,33,34,35,36,37,41,70,75],$Vi=[2,87],$Vj=[5,19,21,25,26,27,28,29,30,31,32,33,34,35,36,37,41,47,49,70,75],$Vk=[1,60],$Vl=[1,61],$Vm=[2,58],$Vn=[1,71],$Vo=[1,84],$Vp=[1,85],$Vq=[1,86],$Vr=[1,87],$Vs=[1,88],$Vt=[1,89],$Vu=[1,90],$Vv=[1,91],$Vw=[1,92],$Vx=[1,93],$Vy=[1,94],$Vz=[1,95],$VA=[19,25,26,27,28,29,30,31,32,33,34,35,36,37,41],$VB=[1,104],$VC=[1,106],$VD=[1,105],$VE=[1,107],$VF=[1,108],$VG=[1,109],$VH=[1,140],$VI=[1,141],$VJ=[1,139],$VK=[1,138],$VL=[1,136],$VM=[1,133],$VN=[1,131],$VO=[1,132],$VP=[1,134],$VQ=[1,135],$VR=[25,26,27,28,29,30,53,57,59,60,61,62],$VS=[25,26,27,28,29,30,57,59,60],$VT=[25,26,27,28,29,30,57];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INICIO":4,"EOF":5,"XQUERYGRA":6,"HTML":7,"FUNCACKERMAN":8,"FOR_IN":9,"WHERE":10,"ORDEN":11,"RETURN":12,"LLAMADA":13,"F_DATA":14,"F_UPPER":15,"tk_for":16,"VARIABLE":17,"tk_in":18,"tk_order_by":19,"XPATHGRA":20,"tk_where":21,"CONDICIONAL":22,"tk_numero":23,"tk_hilera":24,"tk_mayor":25,"tk_menor":26,"tk_mayor_igual":27,"tk_menor_igual":28,"tk_igual":29,"tk_indiferente":30,"tk_gt":31,"tk_lt":32,"tk_ge":33,"tk_le":34,"tk_eq":35,"tk_ne":36,"tk_return":37,"IF":38,"tk_doc":39,"tk_parentesis_izq":40,"tk_parentesis_der":41,"tk_dolar":42,"tk_identificador":43,"CONSULTA_":44,"CONSULTA":45,"NODO":46,"tk_diagonal":47,"PREDICADO":48,"tk_diagonal_doble":49,"tk_puntos_seguidos":50,"tk_arroba":51,"tk_punto":52,"tk_asterisco":53,"tk_node":54,"tk_corchete_izq":55,"DATO":56,"tk_corchete_der":57,"tk_last":58,"tk_mas":59,"tk_menos":60,"tk_div":61,"tk_mod":62,"tk_data":63,"CONS":64,"tk_upper":65,"CONTENIDO":66,"L_CONTENIDO":67,"COD":68,"tk_llave_izq":69,"tk_llave_der":70,"tk_if":71,"THEN":72,"ELSE":73,"tk_then":74,"tk_else":75,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"FUNCACKERMAN",16:"tk_for",18:"tk_in",19:"tk_order_by",21:"tk_where",23:"tk_numero",24:"tk_hilera",25:"tk_mayor",26:"tk_menor",27:"tk_mayor_igual",28:"tk_menor_igual",29:"tk_igual",30:"tk_indiferente",31:"tk_gt",32:"tk_lt",33:"tk_ge",34:"tk_le",35:"tk_eq",36:"tk_ne",37:"tk_return",39:"tk_doc",40:"tk_parentesis_izq",41:"tk_parentesis_der",42:"tk_dolar",43:"tk_identificador",47:"tk_diagonal",49:"tk_diagonal_doble",50:"tk_puntos_seguidos",51:"tk_arroba",52:"tk_punto",53:"tk_asterisco",54:"tk_node",55:"tk_corchete_izq",57:"tk_corchete_der",58:"tk_last",59:"tk_mas",60:"tk_menos",61:"tk_div",62:"tk_mod",63:"tk_data",65:"tk_upper",69:"tk_llave_izq",70:"tk_llave_der",71:"tk_if",74:"tk_then",75:"tk_else"},
productions_: [0,[3,2],[4,1],[4,1],[4,1],[6,4],[6,1],[6,1],[6,1],[9,4],[11,0],[11,2],[11,3],[10,2],[10,0],[22,2],[22,1],[22,1],[22,1],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[12,2],[12,3],[12,2],[12,2],[13,5],[13,1],[13,2],[13,1],[17,2],[20,1],[44,2],[44,1],[45,2],[45,1],[46,3],[46,3],[46,2],[46,3],[46,2],[46,3],[46,3],[46,3],[46,5],[46,5],[46,3],[46,3],[48,3],[48,0],[56,1],[56,1],[56,1],[56,2],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[56,2],[56,3],[56,3],[56,3],[56,3],[56,3],[56,3],[14,4],[15,4],[64,2],[64,1],[7,1],[66,2],[66,1],[66,2],[66,1],[67,3],[67,4],[67,1],[68,3],[38,6],[38,5],[72,2],[72,2],[73,2],[73,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 3: case 4:
this.$= new Nodo("INI", "INI" );
        this.$.agregarHijo($$[$0]);
	
break;
case 5:
this.$= new Nodo("XQY", "XQY" );
	this.$.agregarHijo($$[$0-3]);
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
	
break;
case 6: case 7: case 8:
this.$= new Nodo("XQY", "XQY" );
        this.$.agregarHijo($$[$0]);
	
break;
case 9:
this.$= new Nodo("FOR", "FOR" );
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 11:
this.$= new Nodo("ORD", "ORD" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 12:
this.$= new Nodo("ORD", "ORD" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
	
break;
case 13:
this.$= new Nodo("WHE", "WHE" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 14:

        this.$= new Nodo("WHE","WHE");
        this.$.agregarHijo(new Nodo("ε","ε"));
        
break;
case 15:
this.$= new Nodo("CONDI", "CONDI" );
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
	
break;
case 16:
this.$= new Nodo("CONDI", "CONDI" );
        this.$.agregarHijo($$[$0]);
	
break;
case 17: case 18:
this.$= new Nodo("CONDI", "CONDI" );
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 19: case 20: case 21: case 22: case 23: case 24: case 25: case 26: case 27: case 28: case 29: case 30:
this.$= new Nodo("CONDI", "CONDI" );
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 31: case 33: case 34:
this.$= new Nodo("RET", "RET" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 32:
this.$= new Nodo("RET", "RET" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
	
break;
case 35:
this.$= new Nodo("LLA", "LLA" );
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 36: case 38:
this.$= new Nodo("LLA","LLA");
        this.$.agregarHijo($$[$0]);
        
break;
case 37:
this.$= new Nodo("LLA","LLA");
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
        
break;
case 39:
this.$= new Nodo("VAR", "VAR" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 40:
this.$= new Nodo("XGRA", "XGRA" );
        this.$.agregarHijo($$[$0]);
	
break;
case 41:
this.$= new Nodo("CONI", "CONI" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 42:
this.$= new Nodo("CONI", "CONI" );
        this.$.agregarHijo($$[$0]);
	
break;
case 43:
this.$= new Nodo("CON", "CON" );
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
	
break;
case 44:
this.$= new Nodo("CON", "CON" );
        this.$.agregarHijo($$[$0]);
	
break;
case 45: case 46: case 50: case 51:
this.$= new Nodo("NODO", "NODO" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 47: case 49:
this.$= new Nodo("NODO", "NODO" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 48:
this.$= new Nodo("NODO", "NODO" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 52: case 55: case 56:
this.$= new Nodo("NODO", "NODO" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 53: case 54:
this.$= new Nodo("NODO", "NODO" );
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 57:
this.$= new Nodo("PRE", "PRE" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 58:

        this.$= new Nodo("PRE","PRE");
        this.$.agregarHijo(new Nodo("ε","ε"));
        
break;
case 59: case 60: case 61:
this.$= new Nodo("DATO", "DATO" );
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 62:
this.$= new Nodo("DATO", "DATO" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 63:
this.$= new Nodo("DATO", "DATO" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 64: case 65: case 66: case 67: case 68: case 70: case 71: case 72: case 73: case 74: case 75:
this.$= new Nodo("DATO", "DATO" );
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 69:
this.$= new Nodo("DATO", "DATO" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
	
break;
case 76:
this.$= new Nodo("FDATA", "FDATA" );
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 77:
this.$= new Nodo("FUP", "FUP" );
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 78:
this.$= new Nodo("CONS", "CONS" );
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
	
break;
case 79:
this.$= new Nodo("CONS", "CONS" );
        this.$.agregarHijo($$[$0]);
        
break;
case 80:
this.$= new Nodo("HTML", "HTML" );
        this.$.agregarHijo($$[$0]);
        
break;
case 81: case 83:
this.$= new Nodo("CONT", "CONT" );
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
        
break;
case 82: case 84:
this.$= new Nodo("CONT", "CONT" );
        this.$.agregarHijo($$[$0]);
        
break;
case 85:
this.$= new Nodo("LCONT", "LCONT" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 86:
this.$= new Nodo("LCONT", "LCONT" );
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 87:
this.$= new Nodo("LCONT", "LCONT" );
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
        
break;
case 88:
this.$= new Nodo("COD", "COD" );
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo(new Nodo($$[$0],$$[$0]));
	
break;
case 89:
this.$= new Nodo("IF", "IF" );
        this.$.agregarHijo(new Nodo($$[$0-5],$$[$0-5]));
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo($$[$0-3]);
        this.$.agregarHijo(new Nodo($$[$0-2],$$[$0-2]));
        this.$.agregarHijo($$[$0-1]);
        this.$.agregarHijo($$[$0]);
        
break;
case 90:
this.$= new Nodo("IF", "IF" );
        this.$.agregarHijo(new Nodo($$[$0-4],$$[$0-4]));
        this.$.agregarHijo(new Nodo($$[$0-3],$$[$0-3]));
        this.$.agregarHijo($$[$0-2]);
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
        
break;
case 91: case 92:
this.$= new Nodo("THEN", "THEN" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
        
break;
case 93: case 94:
this.$= new Nodo("ELSE", "ELSE" );
        this.$.agregarHijo(new Nodo($$[$0-1],$$[$0-1]));
        this.$.agregarHijo($$[$0]);
        
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:[1,5],9:6,13:7,14:8,15:9,16:$V0,17:14,20:13,26:$V1,39:$V2,42:$V3,43:$V4,44:19,45:24,46:25,47:$V5,49:$V6,63:$V7,65:$V8,66:10,67:17,68:18,69:$V9},{1:[3]},{5:[1,28]},{5:[2,2]},{5:[2,3]},{5:[2,4]},o($Va,[2,14],{10:29,21:[1,30]}),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vc,[2,80],{67:31,68:32,26:$V1,43:$Vd,69:$V9}),{17:34,42:$V3},{40:[1,35]},o($Ve,[2,36]),o($Ve,[2,38],{44:19,45:24,46:25,20:36,43:$Vf,47:$V5,49:$V6}),{40:[1,38]},{40:[1,39]},o($Vg,[2,82]),o($Vg,[2,84]),o($Vh,[2,40]),{43:[1,40]},{43:[1,41],47:[1,42]},o($Vg,$Vi,{46:25,45:43,47:$V5,49:$V6}),{6:44,9:6,13:7,14:8,15:9,16:$V0,17:14,20:13,39:$V2,42:$V3,43:$Vf,44:19,45:24,46:25,47:$V5,49:$V6,63:$V7,65:$V8},o($Vh,[2,42],{46:45,47:$V5,49:$V6}),o($Vj,[2,44]),{43:[1,46],50:[1,47],51:[1,48],52:[1,49],53:[1,50],54:[1,51]},{43:[1,52],51:[1,55],53:[1,53],54:[1,54]},{1:[2,1]},{11:56,19:[1,57],37:[2,10]},{17:59,22:58,23:$Vk,24:$Vl,42:$V3},o($Vg,[2,81]),o($Vg,[2,83]),o($Vg,$Vi),{18:[1,62]},{24:[1,63]},o($Ve,[2,37]),{45:43,46:25,47:$V5,49:$V6},{17:65,42:$V3,64:64},{17:65,42:$V3,64:66},o([5,18,19,21,25,26,27,28,29,30,31,32,33,34,35,36,37,41,43,47,49,70,75],[2,39]),{25:[1,67]},{43:[1,68]},o($Vh,[2,41],{46:45,47:$V5,49:$V6}),{70:[1,69]},o($Vj,[2,43]),o($Vj,$Vm,{48:70,55:$Vn}),o($Vj,[2,47]),{43:[1,72],53:[1,73]},o($Vj,[2,49]),o($Vj,$Vm,{48:74,55:$Vn}),{40:[1,75]},o($Vj,$Vm,{48:76,55:$Vn}),o($Vj,$Vm,{48:77,55:$Vn}),{40:[1,78]},{43:[1,79],53:[1,80]},{12:81,37:[1,82]},{17:83,42:$V3},o($Va,[2,13],{25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz}),o($VA,[2,16],{44:19,45:24,46:25,20:96,43:$Vf,47:$V5,49:$V6}),o($VA,[2,17]),o($VA,[2,18]),{13:97,17:14,20:13,39:$V2,42:$V3,43:$Vf,44:19,45:24,46:25,47:$V5,49:$V6},{41:[1,98]},{41:[1,99]},{20:100,41:[2,79],43:$Vf,44:19,45:24,46:25,47:$V5,49:$V6},{41:[1,101]},o($Vg,[2,85]),{25:[1,102]},o($Vg,[2,88]),o($Vj,[2,45]),{23:$VB,24:$VC,43:$VD,51:$VE,56:103,58:$VF,60:$VG},o($Vj,[2,48]),o($Vj,[2,52]),o($Vj,[2,50]),{41:[1,110]},o($Vj,[2,46]),o($Vj,[2,51]),{41:[1,111]},o($Vj,[2,55]),o($Vj,[2,56]),o($Vb,[2,5]),{7:113,17:112,26:$V1,38:114,42:$V3,43:$Vd,66:10,67:17,68:18,69:$V9,71:[1,115]},{20:116,37:[2,11],43:$Vf,44:19,45:24,46:25,47:$V5,49:$V6},{17:59,22:117,23:$Vk,24:$Vl,42:$V3},{17:59,22:118,23:$Vk,24:$Vl,42:$V3},{17:59,22:119,23:$Vk,24:$Vl,42:$V3},{17:59,22:120,23:$Vk,24:$Vl,42:$V3},{17:59,22:121,23:$Vk,24:$Vl,42:$V3},{17:59,22:122,23:$Vk,24:$Vl,42:$V3},{17:59,22:123,23:$Vk,24:$Vl,42:$V3},{17:59,22:124,23:$Vk,24:$Vl,42:$V3},{17:59,22:125,23:$Vk,24:$Vl,42:$V3},{17:59,22:126,23:$Vk,24:$Vl,42:$V3},{17:59,22:127,23:$Vk,24:$Vl,42:$V3},{17:59,22:128,23:$Vk,24:$Vl,42:$V3},o($VA,[2,15]),o([19,21,37],[2,9]),{20:129,43:$Vf,44:19,45:24,46:25,47:$V5,49:$V6},o($Vb,[2,76]),{41:[2,78]},o($Vb,[2,77]),o($Vg,[2,86]),{25:$VH,26:$VI,27:$VJ,28:$VK,29:$VL,30:[1,137],53:$VM,57:[1,130],59:$VN,60:$VO,61:$VP,62:$VQ},o($VR,[2,59]),o($VR,[2,60]),o($VR,[2,61]),{43:[1,142]},{40:[1,143]},{23:$VB,24:$VC,43:$VD,51:$VE,56:144,58:$VF,60:$VG},o($Vj,$Vm,{48:145,55:$Vn}),o($Vj,$Vm,{48:146,55:$Vn}),o($Vb,[2,31],{44:19,45:24,46:25,20:147,43:$Vf,47:$V5,49:$V6}),o($Vb,[2,33]),o($Vb,[2,34]),{40:[1,148]},{37:[2,12]},o($VA,[2,19]),o($VA,[2,20]),o($VA,[2,21]),o($VA,[2,22]),o($VA,[2,23]),o([19,30,37,41],[2,24],{25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz}),o($VA,[2,25]),o($VA,[2,26]),o($VA,[2,27]),o($VA,[2,28]),o($VA,[2,29]),o($VA,[2,30]),o($Ve,[2,35]),o($Vj,[2,57]),{23:$VB,24:$VC,43:$VD,51:$VE,56:149,58:$VF,60:$VG},{23:$VB,24:$VC,43:$VD,51:$VE,56:150,58:$VF,60:$VG},{23:$VB,24:$VC,43:$VD,51:$VE,56:151,58:$VF,60:$VG},{23:$VB,24:$VC,43:$VD,51:$VE,56:152,58:$VF,60:$VG},{23:$VB,24:$VC,43:$VD,51:$VE,56:153,58:$VF,60:$VG},{23:$VB,24:$VC,43:$VD,51:$VE,56:154,58:$VF,60:$VG},{23:$VB,24:$VC,43:$VD,51:$VE,56:155,58:$VF,60:$VG},{23:$VB,24:$VC,43:$VD,51:$VE,56:156,58:$VF,60:$VG},{23:$VB,24:$VC,43:$VD,51:$VE,56:157,58:$VF,60:$VG},{23:$VB,24:$VC,43:$VD,51:$VE,56:158,58:$VF,60:$VG},{23:$VB,24:$VC,43:$VD,51:$VE,56:159,58:$VF,60:$VG},o($VR,[2,62]),{41:[1,160]},o($VS,[2,69],{53:$VM,61:$VP,62:$VQ}),o($Vj,[2,53]),o($Vj,[2,54]),o($Vb,[2,32]),{17:59,22:161,23:$Vk,24:$Vl,42:$V3},o($VS,[2,64],{53:$VM,61:$VP,62:$VQ}),o($VS,[2,65],{53:$VM,61:$VP,62:$VQ}),o($VR,[2,66]),o($VR,[2,67]),o($VR,[2,68]),o($VT,[2,70],{53:$VM,59:$VN,60:$VO,61:$VP,62:$VQ}),o([30,57],[2,71],{25:$VH,26:$VI,27:$VJ,28:$VK,29:$VL,53:$VM,59:$VN,60:$VO,61:$VP,62:$VQ}),o($VT,[2,72],{53:$VM,59:$VN,60:$VO,61:$VP,62:$VQ}),o($VT,[2,73],{53:$VM,59:$VN,60:$VO,61:$VP,62:$VQ}),o($VT,[2,74],{53:$VM,59:$VN,60:$VO,61:$VP,62:$VQ}),o($VT,[2,75],{53:$VM,59:$VN,60:$VO,61:$VP,62:$VQ}),o($VR,[2,63]),{25:$Vo,26:$Vp,27:$Vq,28:$Vr,29:$Vs,30:$Vt,31:$Vu,32:$Vv,33:$Vw,34:$Vx,35:$Vy,36:$Vz,41:[1,162]},{72:163,74:[1,164]},o($Vb,[2,90],{73:165,75:[1,166]}),{7:167,13:168,17:14,20:13,26:$V1,39:$V2,42:$V3,43:$V4,44:19,45:24,46:25,47:$V5,49:$V6,66:10,67:17,68:18,69:$V9},o($Vb,[2,89]),{7:169,13:170,17:14,20:13,26:$V1,39:$V2,42:$V3,43:$V4,44:19,45:24,46:25,47:$V5,49:$V6,66:10,67:17,68:18,69:$V9},o($Vc,[2,91]),o($Vc,[2,92]),o($Vb,[2,93]),o($Vb,[2,94])],
defaultActions: {3:[2,2],4:[2,3],5:[2,4],28:[2,1],100:[2,78],116:[2,12]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    
    
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-sensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* Omitir espacios en blanco */ 
break;
case 1: /* Omitir saltos de linea, tabs y retornos*/ 
break;
case 2:
break;
case 3: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 39;
break;
case 4: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 16;
break;
case 5: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_let';
break;
case 6: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 21;
break;
case 7: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 19;
break;
case 8: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 37;
break;
case 9: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 63;
break;
case 10: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 71;
break;
case 11: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 74;
break;
case 12: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 75;
break;
case 13: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 18;
break;
case 14: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_to';
break;
case 15: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_at';
break;
case 16: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 35;
break;
case 17: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 36;
break;
case 18: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 32;
break;
case 19: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 34;
break;
case 20: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 31;
break;
case 21: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 33;
break;
case 22: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_html_abre';
break;
case 23: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_html_cierra';
break;
case 24: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_body_abre';
break;
case 25: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_body_cierra';
break;
case 26: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_h1_abre';
break;
case 27: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_h1_cierra';
break;
case 28: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ul_abre';
break;
case 29: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ul_cierra';
break;
case 30: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_li_abre';
break;
case 31: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_li_cierra';
break;
case 32: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 42;
break;
case 33: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_or';
break;
case 34: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_and';
break;
case 35: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 62;
break;
case 36: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 61;
break;
case 37: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 54;
break;
case 38: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_text';
break;
case 39: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_namespace_node';
break;
case 40: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ancestor_or_self';
break;
case 41: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_ancestor';
break;
case 42: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_attribute';
break;
case 43: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_child';
break;
case 44: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_descendant_or_self';
break;
case 45: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_descendant';
break;
case 46: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_following_sibling';
break;
case 47: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_following';
break;
case 48: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_namespace';
break;
case 49: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_parent';
break;
case 50: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_preceding_sibling';
break;
case 51: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_preceding';
break;
case 52: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_self';
break;
case 53: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_child';
break;
case 54: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_attribute';
break;
case 55: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 58;
break;
case 56: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_position';
break;
case 57: listaTokens.push(new Token("Palabra_Reservada", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_text';
break;
case 58: listaTokens.push(new Token("ComparacionLet", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_let_igual';
break;
case 59: listaTokens.push(new Token("Barra", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_barra_or';
break;
case 60: listaTokens.push(new Token("Suma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 59;
break;
case 61: listaTokens.push(new Token("Resta", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 60;
break;
case 62: listaTokens.push(new Token("Asterisco", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 53;
break;
case 63: listaTokens.push(new Token("Indiferente", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 30;
break;
case 64: listaTokens.push(new Token("Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 29;
break;
case 65: listaTokens.push(new Token("Menor_igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 28;
break;
case 66: listaTokens.push(new Token("Menor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 26;
break;
case 67: listaTokens.push(new Token("Mayor_Igual", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 27;
break;
case 68: listaTokens.push(new Token("Mayor", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 25;
break;
case 69: listaTokens.push(new Token("Cuatro_Puntos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 'tk_cuatro_puntos';
break;
case 70: listaTokens.push(new Token("Diagonal_doble", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 49;
break;
case 71: listaTokens.push(new Token("Division", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 47;
break;
case 72: listaTokens.push(new Token("Arroba", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 51;
break;
case 73: listaTokens.push(new Token("Puntos_Seguidos", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 50;
break;
case 74: listaTokens.push(new Token("Parentesis_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 40;
break;
case 75: listaTokens.push(new Token("Parentesis_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 41;
break;
case 76: listaTokens.push(new Token("Corchete_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_izq";
break;
case 77: listaTokens.push(new Token("Corchete_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_corchete_der";
break;
case 78: listaTokens.push(new Token("Llave_Izq", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_llave_izq";
break;
case 79: listaTokens.push(new Token("Llave_Der", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_llave_der";
break;
case 80: listaTokens.push(new Token("Coma", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_coma";
break;
case 81: listaTokens.push(new Token("Punto", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return 52;
break;
case 82: listaTokens.push(new Token("Caracter", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_caracter";
break;
case 83: listaTokens.push(new Token("Cadena", yy_.yytext.substr(1, yy_.yyleng-2), yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_hilera";
break;
case 84: listaTokens.push(new Token("Identificador", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_identificador";
break;
case 85: listaTokens.push(new Token("Numero", yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column)); return "tk_numero";
break;
case 86: return "EOF"; 
break;
case 87: listaErrores.push(new TokenError("xPATH","ERROR LEXICO","Caracter no reconocido "+ yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column )); 
break;
}
},
rules: [/^(?:\s+)/,/^(?:[\t\r]+)/,/^(?:[(][:][^:]*[:]+[)])/,/^(?:doc\b)/,/^(?:for\b)/,/^(?:let\b)/,/^(?:where\b)/,/^(?:order by\b)/,/^(?:return\b)/,/^(?:data\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:in\b)/,/^(?:to\b)/,/^(?:at\b)/,/^(?:eq\b)/,/^(?:ne\b)/,/^(?:lt\b)/,/^(?:le\b)/,/^(?:gt\b)/,/^(?:ge\b)/,/^(?:<html>)/,/^(?:<\/html>)/,/^(?:<body>)/,/^(?:<\/body>)/,/^(?:<h1>)/,/^(?:<\/h1>)/,/^(?:<ul>)/,/^(?:<\/ul>)/,/^(?:<li>)/,/^(?:<\/li>)/,/^(?:\$)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:div\b)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:namespace-node\b)/,/^(?:ancestor-or-self\b)/,/^(?:ancestor\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant-or-self\b)/,/^(?:descendant\b)/,/^(?:following-sibling\b)/,/^(?:following\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding-sibling\b)/,/^(?:preceding\b)/,/^(?:self\b)/,/^(?:child\b)/,/^(?:attribute\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:text\b)/,/^(?::=)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:!=)/,/^(?:=)/,/^(?:<=)/,/^(?:<)/,/^(?:>=)/,/^(?:>)/,/^(?:::)/,/^(?:\/\/)/,/^(?:\/)/,/^(?:@)/,/^(?:\.\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\.)/,/^(?:'[^\']*')/,/^(?:"([^\\\"]|\\.)*")/,/^(?:[a-zA-Z_À-ÿ\u00F1\u00D1]([a-zA-ZÀ-ÿ\-\.\u00F1\u00D10-9_])*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador_xquery_ast;
exports.Parser = analizador_xquery_ast.Parser;
exports.parse = function () { return analizador_xquery_ast.parse.apply(analizador_xquery_ast, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}