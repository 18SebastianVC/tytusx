/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Xpath = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,46],$V1=[1,48],$V2=[1,49],$V3=[1,17],$V4=[1,18],$V5=[1,12],$V6=[1,23],$V7=[1,24],$V8=[1,66],$V9=[1,25],$Va=[1,26],$Vb=[1,56],$Vc=[1,58],$Vd=[1,59],$Ve=[1,60],$Vf=[1,61],$Vg=[1,62],$Vh=[1,63],$Vi=[1,64],$Vj=[1,65],$Vk=[1,50],$Vl=[1,51],$Vm=[1,52],$Vn=[1,53],$Vo=[1,54],$Vp=[1,55],$Vq=[1,43],$Vr=[1,44],$Vs=[1,45],$Vt=[1,47],$Vu=[1,68],$Vv=[1,69],$Vw=[1,8,9,19,24],$Vx=[1,8,9,19,24,35,37,38,43,46,47,50,55,58,59,60,63,121],$Vy=[1,8,9,19,24,35,37,38,43,46,47,50,55,58,59,60,63,65,121],$Vz=[1,74],$VA=[1,81],$VB=[1,83],$VC=[1,84],$VD=[1,85],$VE=[1,86],$VF=[1,78],$VG=[1,8,9,19,24,35,37,38,43,46,47,50,55,58,59,60,63,65,67,121],$VH=[35,37,38,43,46,47,50,60],$VI=[1,98],$VJ=[1,100],$VK=[1,8,9,19,24,35,37,38,43,46,47,50,55,58,59,60,63,65,67,70,71,72,73,74,75,121],$VL=[1,102],$VM=[1,103],$VN=[1,8,9,19,24,35,37,38,43,46,47,50,55,58,59,60,63,65,67,70,71,72,73,74,75,77,79,80,121],$VO=[1,104],$VP=[1,105],$VQ=[1,106],$VR=[1,107],$VS=[1,8,9,19,24,35,37,38,43,46,47,50,55,58,59,60,63,65,67,70,71,72,73,74,75,77,79,80,82,83,84,85,121],$VT=[1,112],$VU=[1,113],$VV=[1,8,9,19,24,35,37,38,43,46,47,50,55,58,59,60,63,65,67,70,71,72,73,74,75,77,79,80,82,83,84,85,87,89,121],$VW=[1,116],$VX=[1,8,9,19,24,35,37,38,43,46,47,50,55,58,59,60,63,65,67,70,71,72,73,74,75,77,79,80,82,83,84,85,87,89,120,121],$VY=[1,120],$VZ=[2,113],$V_=[1,125],$V$=[2,16,17,22,38,43,61,79,80,82,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,127,128,129,130],$V01=[16,17,22,79,80,82,87,89,100,101,103,104,105,106,107,108,109,113,114,115,116,117,118,127,128,129,130],$V11=[9,35,37,38,43,46,47,50,60],$V21=[16,82],$V31=[1,188],$V41=[1,189],$V51=[1,195],$V61=[1,206],$V71=[1,207],$V81=[9,19],$V91=[9,35,37,38,43,46,47,50,55,60];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"XPath":3,"Expr":4,"AnnotatedDecl":5,"ExprSingle":6,"Separador":7,"PIPE":8,"COMA":9,"RDECLARE":10,"FunctionDecl":11,"TypeDeclaration":12,"RAS":13,"VarValue":14,"RFUNCTION":15,"NOMBRE":16,"PARENTESISA":17,"ParamList":18,"PARENTESISC":19,"FunctionBody":20,"Param":21,"DOLAR":22,"LLAVEA":23,"LLAVEC":24,"OrExpr":25,"FLWORExpr":26,"IfExpr":27,"InitialClause":28,"IntermediateClauseR":29,"ReturnClause":30,"IntermediateClause":31,"ForClause":32,"LetClause":33,"WhereClause":34,"GroupByClause":35,"OrderByClause":36,"CountClause":37,"RFOR":38,"ForBinding":39,"PositionalVar":40,"RIN":41,"RAT":42,"RLET":43,"LetBinding":44,"DOSPUNTOSIGUAL":45,"RWHERE":46,"RORDER":47,"RBY":48,"OrderSpecList":49,"RSTABLE":50,"OrderSpec":51,"OrderModifier":52,"OrderOrder":53,"OrderEmpty":54,"REMPTY":55,"RGREATEST":56,"RLEAST":57,"RASCENDING":58,"RDESCENDING":59,"RRETURN":60,"RIF":61,"RTHEN":62,"RELSE":63,"AndExpr":64,"ROR":65,"ComparisonExpr":66,"RAND":67,"RangeExpr":68,"GeneralComp":69,"IGUAL":70,"DIFERENTE":71,"MENOR":72,"MENORIG":73,"MAYOR":74,"MAYORIG":75,"AdditiveExpr":76,"RTO":77,"MultiplicativeExpr":78,"MAS":79,"MENOS":80,"UnaryExpr":81,"POR":82,"DIV":83,"IDIV":84,"MOD":85,"PathExpr":86,"BARRA":87,"RelativePathExpr":88,"DOBLEBARRA":89,"StepExpr":90,"PostfixExpr":91,"AxisStep":92,"ReverseStep":93,"ForwardStep":94,"PredicateList":95,"Predicate":96,"AbbrevForwardStep":97,"ForwardAxis":98,"NameTest":99,"ARROBA":100,"RCHILD":101,"DOBLEDOSPUNTOS":102,"RDESCENDANT":103,"RATTRIBUTE":104,"RSELF":105,"RDESSELF":106,"RFOLLOWSIBLING":107,"RFOLLOW":108,"RNAMESPACE":109,"NodeTest":110,"AbbrevReverseStep":111,"ReverseAxis":112,"DOBLEPUNTO":113,"RPARENT":114,"RANCESTOR":115,"RPRECEDSIBLING":116,"RPRECED":117,"RANCESTORORSELF":118,"PrimaryExpr":119,"CORA":120,"CORB":121,"Literal":122,"FunctionCall":123,"ContextItemExpr":124,"ParenthesizedExpr":125,"Variable":126,"INTEGER":127,"DECIMAL":128,"CADENA":129,"PUNTO":130,"$accept":0,"$end":1},
terminals_: {2:"error",8:"PIPE",9:"COMA",10:"RDECLARE",13:"RAS",15:"RFUNCTION",16:"NOMBRE",17:"PARENTESISA",19:"PARENTESISC",22:"DOLAR",23:"LLAVEA",24:"LLAVEC",35:"GroupByClause",37:"CountClause",38:"RFOR",41:"RIN",42:"RAT",43:"RLET",45:"DOSPUNTOSIGUAL",46:"RWHERE",47:"RORDER",48:"RBY",50:"RSTABLE",55:"REMPTY",56:"RGREATEST",57:"RLEAST",58:"RASCENDING",59:"RDESCENDING",60:"RRETURN",61:"RIF",62:"RTHEN",63:"RELSE",65:"ROR",67:"RAND",70:"IGUAL",71:"DIFERENTE",72:"MENOR",73:"MENORIG",74:"MAYOR",75:"MAYORIG",77:"RTO",79:"MAS",80:"MENOS",82:"POR",83:"DIV",84:"IDIV",85:"MOD",87:"BARRA",89:"DOBLEBARRA",100:"ARROBA",101:"RCHILD",102:"DOBLEDOSPUNTOS",103:"RDESCENDANT",104:"RATTRIBUTE",105:"RSELF",106:"RDESSELF",107:"RFOLLOWSIBLING",108:"RFOLLOW",109:"RNAMESPACE",113:"DOBLEPUNTO",114:"RPARENT",115:"RANCESTOR",116:"RPRECEDSIBLING",117:"RPRECED",118:"RANCESTORORSELF",120:"CORA",121:"CORB",127:"INTEGER",128:"DECIMAL",129:"CADENA",130:"PUNTO"},
productions_: [0,[3,1],[3,1],[3,1],[4,1],[4,3],[4,3],[4,3],[7,1],[7,1],[5,2],[12,1],[14,1],[11,7],[11,6],[11,6],[11,5],[18,3],[18,1],[21,3],[21,2],[20,3],[20,2],[6,1],[6,1],[6,1],[26,3],[26,2],[29,1],[29,2],[28,1],[28,1],[31,1],[31,1],[31,1],[31,1],[31,1],[32,2],[32,3],[39,5],[39,4],[40,3],[33,2],[33,3],[44,4],[34,2],[36,3],[36,4],[49,3],[49,1],[51,2],[52,2],[52,1],[52,1],[54,2],[54,2],[53,1],[53,1],[30,2],[27,8],[25,1],[25,3],[64,1],[64,3],[66,1],[66,3],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[68,1],[68,3],[76,1],[76,3],[76,3],[78,1],[78,3],[78,3],[78,3],[78,3],[81,1],[81,2],[81,2],[86,2],[86,2],[86,1],[86,1],[88,1],[88,3],[88,3],[90,1],[90,1],[92,1],[92,1],[92,2],[92,2],[95,1],[95,2],[94,1],[94,2],[97,2],[97,1],[98,2],[98,2],[98,2],[98,2],[98,2],[98,2],[98,2],[98,2],[110,1],[99,1],[99,1],[93,1],[93,2],[111,1],[112,2],[112,2],[112,2],[112,2],[112,2],[91,1],[91,2],[96,3],[119,1],[119,1],[119,1],[119,1],[119,1],[126,2],[122,1],[122,1],[122,1],[123,3],[123,4],[124,1],[125,2],[125,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
    grafo.generarPadre(1, "INICIO");grafo.generarHijos("Expr");
    var retornoErrores = Object.assign([], ListaErrores);
    ListaErrores = [];
    var retornoGrafo = Object.assign({}, grafo);
    grafo = new grafoCST();
    this.$=new Comando($$[$0],retornoGrafo.pilaNodos,retornoGrafo.PilaEdges,retornoGrafo.GrahpvizNodo+retornoGrafo.GrahpvizEdges,retornoErrores,retornoGrafo.TablaGramatica);
    return this.$ 
  
break;
case 2:

    return new Comando([],[],[],"",retornoErrores,[])
  
break;
case 3:
  
      ListaErrores.push({Error:"Error sintactico :"+yytext,tipo:"Sintactico",Linea:this._$.first_line,columna:this._$.first_column});
      var retornoErrores = Object.assign([], ListaErrores);
      ListaErrores = [];
      grafo = new grafoCST(); 
      return new Comando([],[],[],"",retornoErrores,[])
    
break;
case 4:
 
    this.$=[];this.$.push($$[$0]); 
    grafo.generarPadre(1, "ExprSingle");
    grafo.generarHijos("ExprSingle");
    grafo.generarTexto(`expr = []; expr.push(ExprSingle.valor);`);
  
break;
case 5:
 
    this.$=$$[$0-2];this.$.push($$[$0]);
    grafo.generarPadre(3, "ExprSingle");
    grafo.generarPadre(1, "Expr");
    grafo.generarHijos("Expr",$$[$0-1],"ExprSingle");
    grafo.generarTexto(`expr.push(ExprSingle.valor);`);
  
break;
case 6:
 
    this.$=$$[$0-2];grafo.generarPadre(1, "Expr");
    ListaErrores.push({Error:"Error sintactico se recupero en:"+yytext,tipo:"Sintactico",Linea:this._$.first_line,columna:this._$.first_column}); 
    grafo.generarHijos("Expt",$$[$0-1],"error");
    grafo.generarTexto(`return expr; new Error();`); 
  
break;
case 7:
 
    this.$=[];this.$.push($$[$0]); grafo.generarPadre(3, "ExprSingle");
    grafo.generarHijos("error",$$[$0-1],"ExprSingle");
    ListaErrores.push({Error:"Error sintactico se recupero en:"+yytext,tipo:"Sintactico",Linea:this._$.first_line,columna:this._$.first_column}); 
    grafo.generarPadre(1, "error"); grafo.generarHijos("error",$$[$0-1]);
    grafo.generarTexto(`expr = []; new Error();`);
  
break;
case 8: case 9:
this.$=$$[$0]
break;
case 23:
 
    this.$=$$[$0]; grafo.generarPadre(1, "OrExpr");
    grafo.generarHijos("OrExpr");
    grafo.generarTexto(`ExprSingle.valor = OrExpr.valor`); 
break;
case 24:
 
      this.$=$$[$0];
      grafo.generarPadre(1,"FLWORExpr");
      grafo.generarHijos("FLWORExpr");
      grafo.generarTexto(`ExprSingle.valor=FLWORExpr.valor`) 
    
break;
case 27:

    this.$=$$[$0-1];this.$.return=$$[$0];
    grafo.generarPadre(2,"ReturnClause");
    grafo.generarPadre(1,"InitialClause");
    grafo.generarHijos("InitialClause","ReturnClause");
    grafo.generarTexto(`FLWORExpr.valor=InitialClause.valor;FLWORExpr.retorno=ReturnClause.valor`)
  
break;
case 31:
 
    this.$=$$[$0];
    grafo.generarPadre(1,"LetClause");
    grafo.generarHijos("LetClause");
    grafo.generarTexto(`InitialClouse.valor=LetClause.valor`) 
break;
case 42:
 
    this.$=new Let($$[$0]);
    grafo.generarPadre(2,"LetBinding");
    grafo.generarHijos($$[$0-1],"LetBinding");
    grafo.generarTexto(`LetClouse.valor=[];LetClouse.valor.push(LetBinding.valor)`) 
break;
case 43:
 
    this.$=$$[$0-2];this.$.declaraciones.push($$[$0]);
    grafo.generarPadre(3,"LetBinding");
    grafo.generarPadre(1,"LetClause");
    grafo.generarHijos("LetClause",$$[$0-1],"LetBinding");
    grafo.generarTexto(`LetClause1.valor.push(LetBinding.valor);LetClouse.valor=LetClause1.valor`) 
break;
case 44:
 
    this.$=new Declaracion($$[$0-3]+$$[$0-2],$$[$0]);
    grafo.generarPadre(4,"ExprSingle");
    grafo.generarHijos($$[$0-3],$$[$0-2],$$[$0-1],"ExprSingle");
    grafo.generarTexto(`LetBinding.nombre=${$$[$0-3]};LetBinding.valor=ExptrSingle.valor`); 
break;
case 58:
 
    this.$=new Return($$[$0]); 
    grafo.generarPadre(2,"ExprSingle")
    grafo.generarHijos($$[$0-1],"ExprSingle")
    grafo.generarTexto("ReturnClause.valor=ExprSingle.valor")
break;
case 60:
 
    this.$ = $$[$0]; grafo.generarPadre(1,"AndExpr");
    grafo.generarHijos("AndExpr");
    grafo.generarTexto(`OrExpr.valor = AndExpr.valor`);
  
break;
case 61:
 
    this.$ = new Logical($$[$0-2],$$[$0-1],$$[$0]); grafo.generarPadre(3, "AndExpr");
    grafo.generarPadre(1, "OrExpr");
    grafo.generarHijos("OrExpr",$$[$0-1],"AndExpr");
    grafo.generarTexto(`OrExpr.valor = new Logical(OrExpr.valor,${$$[$0-1]},AndExpr.valor);`);
  
break;
case 62:
 
    this.$ = $$[$0]; grafo.generarPadre(1, "ComparisonExpr");
    grafo.generarHijos("ComparisonExpr");
    grafo.generarTexto(`AndExpr.valor = ComparisonExpr.valor`);
  
break;
case 63:
 
    this.$ = new Logical($$[$0-2],$$[$0-1],$$[$0]); grafo.generarPadre(3, "ComparisonExpr");
    grafo.generarPadre(1, "AndExpr");
    grafo.generarHijos("AndExpr",$$[$0-1],"ComparisonExpr");
    grafo.generarTexto(`AndExpr.valor = new Logical(AndExpr.valor,${$$[$0-1]},ComparisonExpr.valor);`);
  
break;
case 64:
 
    this.$=$$[$0]; 
    grafo.generarPadre(1, "RangeExpr");
    grafo.generarHijos("RangeExpr");
    grafo.generarTexto(`ComparisonExpr.valor = RangeExpr.valor`);
  
break;
case 65:
 
    this.$ = new ComparisonExp($$[$0-2],$$[$0-1],$$[$0]); 
    grafo.generarPadre(3, "RangeExpr");
    grafo.generarPadre(2, "GeneralComp");
    grafo.generarPadre(1, "RangeExpr");
    grafo.generarHijos("RangeExpr","GeneralComp","RangeExpr");
    grafo.generarTexto(`ComparisonExpr.valor = new ComparisonExp(RangeExpr.valor, GeneralComp.valor, RangeExpr.valor)`);
  
break;
case 66: case 67: case 68: case 69: case 70: case 71:
 this.$ = $$[$0]; grafo.generarHijos($$[$0]); grafo.generarTexto(`GeneralComp.valor = ${$$[$0]}`); 
break;
case 72:
 
    this.$=$$[$0]; 
    grafo.generarPadre(1, "AdditiveExpr");
    grafo.generarHijos("AdditiveExpr");
    grafo.generarTexto(`ComparisonExpr.valor = AdditiveExpr.valor`);
    
break;
case 73:

    this.$=new RangeExp($$[$0-2],$$[$0]);
    grafo.generarPadre(3,"AdditiveExpr")
    grafo.generarPadre(1,"AdditiveExpr")
    grafo.generarHijos("AdditiveExpr",$$[$0-2],"AdditiveExpr")
    grafo.generarTexto(`RangeExp.Valor = new Range(AdditiveExpr.valor,AdditiveExpr1.valor`)
break;
case 74:
 
    this.$=$$[$0]; grafo.generarPadre(1, "MultiplicativeExpr"); grafo.generarHijos("MultiplicativeExpr");
    grafo.generarTexto(`AdditiveExpr.valor = MultiplicativeExpr.valor`);
  
break;
case 75: case 76:
 
    this.$= new Arithmetic($$[$0-2],$$[$0-1],$$[$0]); grafo.generarPadre(3, "MultiplicativeExpr");
    grafo.generarPadre(1, "AdditiveExpr");
    grafo.generarHijos("AdditiveExpr",$$[$0-1],"MultiplicativeExpr");
    grafo.generarTexto(`AdditiveExpr.valor = new Arithmetic(AdditiveExpr.valor, ${$$[$0-1]}, MultiplicativeExpr.valor);`);
  
break;
case 77:
 
    this.$=$$[$0]; grafo.generarPadre(1, "UnaryExpr");
    grafo.generarHijos("UnaryExpr");
    grafo.generarTexto(`MultiplicativeExpr.valor = UnaryExpr.valor;`);
  
break;
case 78:
 
    this.$= new Arithmetic($$[$0-2],$$[$0-1],$$[$0]);
    grafo.generarPadre(3, "UnaryExpr");
    grafo.generarPadre(1, "MultiplicativeExpr");
    grafo.generarHijos("MultiplicativeExpr",$$[$0-1],"UnaryExpr");
    grafo.generarTexto(`MultiplicativeExpr.valor = new Arithmetic(MultiplicativeExpr.valor,${$$[$0-1]},UnaryExpr.valor);`);
  
break;
case 79: case 80: case 81:
 
    this.$= new Arithmetic($$[$0-2],$$[$0-1],$$[$0]); grafo.generarPadre(3, "UnaryExpr");
    grafo.generarPadre(1, "MultiplicativeExpr");
    grafo.generarHijos("MultiplicativeExpr",$$[$0-1],"UnaryExpr");
    grafo.generarTexto(`MultiplicativeExpr.valor = new Arithmetic(MultiplicativeExpr.valor,${$$[$0-1]},UnaryExpr.valor);`);
  
break;
case 82:
 
    this.$=$$[$0]; grafo.generarPadre(1, "PathExpr");
    grafo.generarHijos("PathExpr");
    grafo.generarTexto(`UnaryExpr.valor = PathExpr.valor;`);
  
break;
case 83:
 
    this.$=new Unary($$[$0-1], $$[$0]); grafo.generarPadre(2, "UnaryExpr");
    grafo.generarHijos($$[$0-1],"UnaryExp");
    grafo.generarTexto(`UnaryExp.valor = new Unary(${$$[$0-1]},UnaryExpr.valor);`);
  
break;
case 84:
 
    this.$=new Unary($$[$0-1], $$[$0]);
    grafo.generarPadre(2, "UnaryExpr");
    grafo.generarHijos($$[$0-1],"UnaryExp");
    grafo.generarTexto(`UnaryExp.valor = new Unary(${$$[$0-1]},UnaryExpr.valor);`);
  
break;
case 85:
 
    $$[$0][0].tipo=TipoPath.ABS;
    this.$=new PathExp($$[$0]); 
    grafo.generarPadre(2, "RelativePathExpr");
    grafo.generarHijos($$[$0-1],"RelativePathExpr");
    grafo.generarTexto(`path[0].tipo = Absoluto; PathExpr.valor = new PathExp(path.valor);`);
  
break;
case 86:
 
    $$[$0][0].tipo=TipoPath.REL;
    this.$=new PathExp($$[$0]);
    grafo.generarPadre(2, "RelativePathExpr");
    grafo.generarHijos($$[$0-1],"RelativePathExpr");
    grafo.generarTexto(`path[0].tipo = Relativo; PathExpr.valor = new PathExp(path.valor);`);
  
break;
case 87:
 
    this.$=new PathExp($$[$0]); 
    grafo.generarPadre(1, "RelativePathExpr");
    grafo.generarHijos("RelativePathExpr");
    grafo.generarTexto(`PathExpr.valor = new PathExp(path.valor);`);
  
break;
case 88:
 
    this.$=new PathExp([]);
    grafo.generarHijos($$[$0]);
    grafo.generarTexto(`PathExpr.valor = new PathExp();`);
  
break;
case 89:
 
    this.$ = []; this.$.push($$[$0]); grafo.generarPadre(1, "StepExpr");
    grafo.generarHijos("StepExpr");
    grafo.generarTexto(`path = []; path.push(StepExpr.valor);`);
  
break;
case 90:
 
    this.$ = $$[$0-2]; $$[$0].tipo=TipoPath.ABS; this.$.push($$[$0]); 
    grafo.generarPadre(3, "StepExpr");
    grafo.generarPadre(1, "RelativePathExpr");
    grafo.generarHijos("RelativePathExpr",$$[$0-1],"StepExpr");
    grafo.generarTexto(`StepExpr.tipo = Absoluto; path.push(StepExpr.valor); `);
  
break;
case 91:
 
    this.$ = $$[$0-2]; $$[$0].tipo=TipoPath.REL; this.$.push($$[$0]);
    grafo.generarPadre(3,"StepExpr");
    grafo.generarPadre(1, "RelativePathExpr");
    grafo.generarHijos("RelativePathExpr",$$[$0-1],"StepExpr");
    grafo.generarTexto(`StepExpr.tipo = Relativo; path.push(StepExpr.valor);`);
  
break;
case 92:
 this.$=$$[$0]; grafo.generarPadre(1, "PostfixExpr"); grafo.generarHijos("PostfixExpr"); grafo.generarTexto(`StepExpr.valor = PostfixExpr.valor;`); 
break;
case 93:
 this.$=$$[$0]; grafo.generarPadre(1, "AxisStep"); grafo.generarHijos("AxisStep"); grafo.generarTexto(`StepExpr.valor = AxisStep.valor`);  
break;
case 94:
 this.$=$$[$0]; grafo.generarPadre(1, "ReverseStep");grafo.generarHijos("ReverseStep"); grafo.generarTexto(`AxisStep.valor = ReverseStep.valor;`); 
break;
case 95:
 this.$=$$[$0]; grafo.generarPadre(1, "ForwardStep");grafo.generarHijos("ForwardStep"); grafo.generarTexto(`AxisStep.valor = ForwardStep.valor;`);
break;
case 96:
 
    this.$=$$[$0-1]; this.$.predicado=$$[$0]; grafo.generarPadre(2, "PredicateList");
    grafo.generarPadre(1, "ReverseStep"); 
    grafo.generarHijos("ReverseStep","PredicateList");
    grafo.generarTexto(`ReverseStep.predicado = PredicateList.valor; AxisStep.valor = ReverseStep;`);
  
break;
case 97:
 
    this.$=$$[$0-1]; this.$.predicado=$$[$0]; grafo.generarPadre(2, "PredicateList");
    grafo.generarPadre(1, "ForwardStep"); 
    grafo.generarHijos("ForwardStep","PredicateList");
    grafo.generarTexto(`ForwardStep.predicado = PredicateList.valor; AxisStep.valor = ForwardStep;`);
  
break;
case 98:
 
    this.$=[];this.$.push($$[$0]);
    grafo.generarPadre(1, "Predicate");
    grafo.generarHijos("Predicate");
    grafo.generarTexto(`predicateList = []; predicateList.push(Predicate.valor);`);  
  
break;
case 99:
 
    this.$=$$[$0-1];this.$.push($$[$0]); grafo.generarPadre(2, "Predicate");
    grafo.generarPadre(1, "PredicateList");
    grafo.generarHijos("PredicateList","Predicate");
    grafo.generarTexto(`predicateList.push(Predicate.valor);`);
  
break;
case 100:
 
    this.$=$$[$0]; grafo.generarPadre(1, "AbbrevForwardStep");
    grafo.generarHijos("AbbrevForwardStep");
    grafo.generarTexto(`ForwardStep.valor = AbbrevForwardStep.valor`);
  
break;
case 101:
 
    this.$=$$[$0-1]; this.$.nombre=$$[$0]; grafo.generarPadre(2, "NameTest");
    grafo.generarPadre(1, "ForwardAxis");
    grafo.generarHijos("ForwardAxis","NameTest");
    grafo.generarTexto(`ForwardAxis.nombre = NameTest.valor; ForwardStep.valor = ForwardAxis.valor`);
  
break;
case 102:
 
    this.$=new Atributo($$[$0],[],TipoPath.ABS);
    grafo.generarPadre(2, "NameTest");
    grafo.generarHijos($$[$0-1],"NameTest");
    grafo.generarTexto(`AbbrevForwardStep.valor = new Atributo(NameTest.valor);`);
  
break;
case 103:
 
    this.$=new Camino($$[$0],[],TipoPath.ABS);
    grafo.generarPadre(1, "NameTest");
    grafo.generarHijos("NameTest");
    grafo.generarTexto(`AbbrevForwardStep.valor = new Camino(NameTest.valor);`);
  
break;
case 104:
 this.$=new Child(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ForwardAxis.valor = new Child();`); 
break;
case 105:
 this.$=new Descendant(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ForwardAxis.valor = new Descendant();`); 
break;
case 106:
 this.$=new Attribute(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ForwardAxis.valor = new Attribute();`); 
break;
case 107:
 this.$=new Self(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ForwardAxis.valor = new Self();`); 
break;
case 108:
 this.$=new DescSelf(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ForwardAxis.valor = new DescSelf();`); 
break;
case 109:
 this.$=new FollowSibling(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ForwardAxis.valor = new FollowSibling();`); 
break;
case 110:
 this.$=new Follow(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ForwardAxis.valor = new Follow();`);  
break;
case 112:
 this.$=$$[$0]; grafo.generarPadre(1, "NameTest"); grafo.generarHijos("NameTest"); grafo.generarTexto(`NodeTest.valor = NameTest.valor;`); 
break;
case 113: case 114:
 this.$=$$[$0]; grafo.generarHijos($$[$0]); grafo.generarTexto(`NameTest.valor = ${$$[$0]};`); 
break;
case 115:
 
    this.$=$$[$0]; grafo.generarPadre(1, "AbbrevReverseStep");
    grafo.generarHijos("AbbrevReverseStep");
    grafo.generarTexto(`ReverseStep.valor = AbbrevReverseStep.valor`);
 
break;
case 116:
 this.$=$$[$0-1]; this.$.nombre=$$[$0];
    grafo.generarPadre(2, "NameTest");
    grafo.generarPadre(1, "ReverseAxis");
    grafo.generarHijos("ReverseAxis","NameTest");
    grafo.generarTexto(`ReverseAxis.nombre = NameTest; ReverseStep.valor = ReverseAxis;`);
  
break;
case 117:
 this.$=new CaminoInverso("*",[],TipoPath.ABS); grafo.generarHijos($$[$0]); grafo.generarTexto(`caminoInverso = new CaminoInverso(); caminoInverso.tipo = Absoluto; AbbrevReverseStep.valor = caminoInverso;`); 
break;
case 118:
 this.$=new Parent(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`parent = new Parent(); parent.tipo = Absoluto; ReverseAxis.valor = parent;`); 
break;
case 119:
 this.$=new Ancestor(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ancestor = new Ancestor(); ancestor.tipo = Absoluto; ReverseAxis.valor = ancestor;`); 
break;
case 120:
 this.$=new PrecedingSibling(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`precedingS = new PrecedingSibling(); precedingS.tipo = Absoluto; ReverseAxis.valor = precedingS;`); 
break;
case 121:
 this.$=new Preceding(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`preceding = new Preceding(); preceding.tipo = Absoluto; ReverseAxis.valor = preceding;`);
break;
case 122:
 this.$=new AncestorSelf(null,[],TipoPath.ABS); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ancestorS = new AncestorSelf(); ancestorS.tipo = Absoluto; ReverseAxis.valor = ancestorS;`); 
break;
case 123:
 
    this.$=$$[$0]; grafo.generarPadre(1, "PrimaryExpr"); 
    grafo.generarHijos("PrimaryExpr");
    grafo.generarTexto(`PostfixExpr.valor = PrimaryExpr.valor;`);
  
break;
case 124:
 this.$=$$[$0-1]; this.$.predicado = $$[$0]; grafo.generarPadre(2, "PredicateList");
    grafo.generarPadre(1, "PrimaryExpr");
    grafo.generarHijos("PrimaryExpr","PostfixExprL");
    grafo.generarTexto(`PrimaryExpr.predicado = predicateList.valor; PostfixExpr.valor = PrimaryExpr.valor`);
  
break;
case 125:
 
    this.$=$$[$0-1]; grafo.generarPadre(2, "ExprSingle");
    grafo.generarHijos($$[$0-2],"ExprSingle",$$[$0]);
    grafo.generarTexto(`Predicate.valor = ExprSingle.valor;`);
  
break;
case 126:
 this.$=$$[$0]; grafo.generarPadre(1, "Literal"); grafo.generarHijos("Literal"); grafo.generarTexto("PrimaryExpr.valor = literal.valor"); 
break;
case 127:
 this.$=$$[$0]; grafo.generarPadre(1, "FunctionCall"); grafo.generarHijos("FunctionCall"); grafo.generarTexto("PrimaryExpr.valor = functionCall.valor");
break;
case 128:
 this.$=$$[$0]; grafo.generarPadre(1, "ContextItemExpr"); grafo.generarHijos("ContextItemExpr"); grafo.generarTexto("PrimaryExpr.valor = contextItemExpr.valor");
break;
case 129:
 this.$=$$[$0]; grafo.generarPadre(1, "ParenthesizedExpr"); grafo.generarHijos("ParenthesizedExpr"); grafo.generarTexto("PrimaryExpr.valor = ParenthesizedExpr.valor"); 
break;
case 130:
 this.$=$$[$0]; grafo.generarPadre(1, "Variable"); grafo.generarHijos("Variable"); grafo.generarTexto("PrimaryExpr.valor = Variable.valor");
break;
case 131:
 this.$=new Variable(null,$$[$0-1]+$$[$0]); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`Variable.valor = ${$$[$0-1]+$$[$0]}`) 
break;
case 132:
 this.$=new Literal(Tipo.INTEGER,$$[$0]); grafo.generarHijos($$[$0]); grafo.generarTexto(`return literal = new Literal(${$$[$0]}); literal.tipo = INTEGER;`); 
break;
case 133:
 this.$=new Literal(Tipo.DECIMAL,$$[$0]); grafo.generarHijos($$[$0]); grafo.generarTexto(`return literal = new Literal(${$$[$0]}); literal.tipo = DECIMAL;`); 
break;
case 134:
 this.$=new Literal(Tipo.STRING,$$[$0]);  grafo.generarHijos($$[$0]); grafo.generarTexto(`return literal = new Literal(${$$[$0]}); literal.tipo = STRING;`); 
break;
case 135:

    this.$ = new CallFunction([],TipoPath.ABS,$$[$0-2]);
    grafo.generarHijos($$[$0-2],$$[$0-1],$$[$0]);
    grafo.generarTexto(`functionCall = new CallFunction(); functionCall.tipo = Absoluto;`);
  
break;
case 136:
  
break;
case 137:
 this.$=new ContextItemExpr([],TipoPath.ABS); grafo.generarHijos($$[$0]); grafo.generarTexto(`contextItemExpr =  new ContextItemExpr(); contextItemExpr.tipo = Absoluto;`);
break;
case 138:
 this.$=new Parentesis([]); grafo.generarHijos($$[$0-1],$$[$0]); grafo.generarTexto(`ParenthesizedExpr.valor = [];`);
break;
case 139:
 this.$=new Parentesis($$[$0-1]); grafo.generarHijos($$[$0-2],$$[$0-1],$$[$0]); grafo.generarTexto(`ParenthesizedExpr.valor = ExprSingle.valor;`); 
break;
}
},
table: [{2:[1,4],3:1,4:2,5:3,6:5,10:[1,6],16:$V0,17:$V1,22:$V2,25:7,26:8,27:9,28:11,32:14,33:15,38:$V3,43:$V4,61:$V5,64:10,66:13,68:16,76:19,78:20,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{1:[3]},{1:[2,1],7:67,8:$Vu,9:$Vv},{1:[2,2]},{1:[2,3],7:70,8:$Vu,9:$Vv},o($Vw,[2,4]),{11:71,15:[1,72]},o($Vx,[2,23],{65:[1,73]}),o($Vx,[2,24]),o($Vx,[2,25]),o($Vy,[2,60],{67:$Vz}),{28:79,29:75,30:76,31:77,32:14,33:15,34:80,35:$VA,36:82,37:$VB,38:$V3,43:$V4,46:$VC,47:$VD,50:$VE,60:$VF},{17:[1,87]},o($VG,[2,62]),o($VH,[2,30],{9:[1,88]}),o($VH,[2,31],{9:[1,89]}),o($VG,[2,64],{69:90,70:[1,91],71:[1,92],72:[1,93],73:[1,94],74:[1,95],75:[1,96]}),{22:$VI,39:97},{22:$VJ,44:99},o($VK,[2,72],{77:[1,101],79:$VL,80:$VM}),o($VN,[2,74],{82:$VO,83:$VP,84:$VQ,85:$VR}),o($VS,[2,77]),o($VS,[2,82]),{16:$V0,17:$V1,22:$V2,79:$V6,80:$V7,81:108,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{16:$V0,17:$V1,22:$V2,79:$V6,80:$V7,81:109,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o([1,8,9,19,24,35,37,38,43,46,47,50,55,58,59,60,63,65,67,70,71,72,73,74,75,77,79,80,83,84,85,121],[2,88],{90:28,91:29,92:30,119:31,93:32,94:33,122:34,123:35,124:36,125:37,126:38,111:39,112:40,97:41,98:42,99:57,88:110,16:$V0,17:$V1,22:$V2,82:$V8,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,127:$Vq,128:$Vr,129:$Vs,130:$Vt}),{16:$V0,17:$V1,22:$V2,82:$V8,88:111,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($VS,[2,87],{87:$VT,89:$VU}),o($VV,[2,89]),o($VV,[2,92]),o($VV,[2,93]),o($VV,[2,123],{95:114,96:115,120:$VW}),o($VV,[2,94],{96:115,95:117,120:$VW}),o($VV,[2,95],{96:115,95:118,120:$VW}),o($VX,[2,126]),o($VX,[2,127]),o($VX,[2,128]),o($VX,[2,129]),o($VX,[2,130]),o($VX,[2,115]),{16:$VY,82:$V8,99:119},o($VX,[2,100]),{16:$VY,82:$V8,99:121},o($VX,[2,132]),o($VX,[2,133]),o($VX,[2,134]),o($VX,$VZ,{17:[1,122]}),o($VX,[2,137]),{2:$V_,4:124,6:5,16:$V0,17:$V1,19:[1,123],22:$V2,25:7,26:8,27:9,28:11,32:14,33:15,38:$V3,43:$V4,61:$V5,64:10,66:13,68:16,76:19,78:20,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{16:[1,126]},o($VX,[2,117]),{102:[1,127]},{102:[1,128]},{102:[1,129]},{102:[1,130]},{102:[1,131]},{16:$VY,82:$V8,99:132},o($VX,[2,103]),{102:[1,133]},{102:[1,134]},{102:[1,135]},{102:[1,136]},{102:[1,137]},{102:[1,138]},{102:[1,139]},{102:[1,140]},o($VX,[2,114]),{2:[1,142],6:141,16:$V0,17:$V1,22:$V2,25:7,26:8,27:9,28:11,32:14,33:15,38:$V3,43:$V4,61:$V5,64:10,66:13,68:16,76:19,78:20,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($V$,[2,8]),o($V$,[2,9]),{6:143,16:$V0,17:$V1,22:$V2,25:7,26:8,27:9,28:11,32:14,33:15,38:$V3,43:$V4,61:$V5,64:10,66:13,68:16,76:19,78:20,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{1:[2,10]},{16:[1,144]},{16:$V0,17:$V1,22:$V2,64:145,66:13,68:16,76:19,78:20,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{16:$V0,17:$V1,22:$V2,66:146,68:16,76:19,78:20,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{28:79,30:147,31:148,32:14,33:15,34:80,35:$VA,36:82,37:$VB,38:$V3,43:$V4,46:$VC,47:$VD,50:$VE,60:$VF},o($Vx,[2,27]),o($VH,[2,28]),{6:149,16:$V0,17:$V1,22:$V2,25:7,26:8,27:9,28:11,32:14,33:15,38:$V3,43:$V4,61:$V5,64:10,66:13,68:16,76:19,78:20,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($VH,[2,32]),o($VH,[2,33]),o($VH,[2,34]),o($VH,[2,35]),o($VH,[2,36]),{6:150,16:$V0,17:$V1,22:$V2,25:7,26:8,27:9,28:11,32:14,33:15,38:$V3,43:$V4,61:$V5,64:10,66:13,68:16,76:19,78:20,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{48:[1,151]},{47:[1,152]},{2:$V_,4:153,6:5,16:$V0,17:$V1,22:$V2,25:7,26:8,27:9,28:11,32:14,33:15,38:$V3,43:$V4,61:$V5,64:10,66:13,68:16,76:19,78:20,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{22:$VI,39:154},{22:$VJ,44:155},{16:$V0,17:$V1,22:$V2,68:156,76:19,78:20,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($V01,[2,66]),o($V01,[2,67]),o($V01,[2,68]),o($V01,[2,69]),o($V01,[2,70]),o($V01,[2,71]),o($V11,[2,37]),{16:[1,157]},o($V11,[2,42]),{16:[1,158]},{16:$V0,17:$V1,22:$V2,76:159,78:20,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{16:$V0,17:$V1,22:$V2,78:160,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{16:$V0,17:$V1,22:$V2,78:161,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{16:$V0,17:$V1,22:$V2,79:$V6,80:$V7,81:162,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{16:$V0,17:$V1,22:$V2,79:$V6,80:$V7,81:163,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{16:$V0,17:$V1,22:$V2,79:$V6,80:$V7,81:164,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{16:$V0,17:$V1,22:$V2,79:$V6,80:$V7,81:165,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($VS,[2,83]),o($VS,[2,84]),o($VS,[2,85],{87:$VT,89:$VU}),o($VS,[2,86],{87:$VT,89:$VU}),{16:$V0,17:$V1,22:$V2,82:$V8,90:166,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{16:$V0,17:$V1,22:$V2,82:$V8,90:167,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($VV,[2,124],{96:168,120:$VW}),o($VX,[2,98]),{6:169,16:$V0,17:$V1,22:$V2,25:7,26:8,27:9,28:11,32:14,33:15,38:$V3,43:$V4,61:$V5,64:10,66:13,68:16,76:19,78:20,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($VV,[2,96],{96:168,120:$VW}),o($VV,[2,97],{96:168,120:$VW}),o($VX,[2,116]),o($VX,$VZ),o($VX,[2,101]),{19:[1,170],129:[1,171]},o($VX,[2,138]),{7:67,8:$Vu,9:$Vv,19:[1,172]},{7:70,8:$Vu,9:$Vv},o($VX,[2,131]),o($V21,[2,118]),o($V21,[2,119]),o($V21,[2,120]),o($V21,[2,121]),o($V21,[2,122]),o($VX,[2,102]),o($V21,[2,104]),o($V21,[2,105]),o($V21,[2,106]),o($V21,[2,107]),o($V21,[2,108]),o($V21,[2,109]),o($V21,[2,110]),o($V21,[2,111]),o($Vw,[2,5]),o($Vw,[2,6]),o($Vw,[2,7]),{17:[1,173]},o($Vy,[2,61],{67:$Vz}),o($VG,[2,63]),o($Vx,[2,26]),o($VH,[2,29]),o($Vx,[2,58]),o($VH,[2,45]),{6:176,16:$V0,17:$V1,22:$V2,25:7,26:8,27:9,28:11,32:14,33:15,38:$V3,43:$V4,49:174,51:175,61:$V5,64:10,66:13,68:16,76:19,78:20,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{48:[1,177]},{7:67,8:$Vu,9:$Vv,19:[1,178]},o($V11,[2,38]),o($V11,[2,43]),o($VG,[2,65]),{40:179,41:[1,180],42:[1,181]},{45:[1,182]},o($VK,[2,73],{79:$VL,80:$VM}),o($VN,[2,75],{82:$VO,83:$VP,84:$VQ,85:$VR}),o($VN,[2,76],{82:$VO,83:$VP,84:$VQ,85:$VR}),o($VS,[2,78]),o($VS,[2,79]),o($VS,[2,80]),o($VS,[2,81]),o($VV,[2,90]),o($VV,[2,91]),o($VX,[2,99]),{121:[1,183]},o($VX,[2,135]),{19:[1,184]},o($VX,[2,139]),{18:185,19:[1,186],21:187,22:$V31},o($VH,[2,46],{9:$V41}),o($V11,[2,49]),{52:190,53:191,54:192,55:$V51,58:[1,193],59:[1,194]},{6:176,16:$V0,17:$V1,22:$V2,25:7,26:8,27:9,28:11,32:14,33:15,38:$V3,43:$V4,49:196,51:175,61:$V5,64:10,66:13,68:16,76:19,78:20,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{62:[1,197]},{41:[1,198]},{6:199,16:$V0,17:$V1,22:$V2,25:7,26:8,27:9,28:11,32:14,33:15,38:$V3,43:$V4,61:$V5,64:10,66:13,68:16,76:19,78:20,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{22:[1,200]},{6:201,16:$V0,17:$V1,22:$V2,25:7,26:8,27:9,28:11,32:14,33:15,38:$V3,43:$V4,61:$V5,64:10,66:13,68:16,76:19,78:20,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($VX,[2,125]),o($VX,[2,136]),{9:[1,203],19:[1,202]},{12:204,13:$V61,20:205,23:$V71},o($V81,[2,18]),{16:[1,208]},{6:176,16:$V0,17:$V1,22:$V2,25:7,26:8,27:9,28:11,32:14,33:15,38:$V3,43:$V4,51:209,61:$V5,64:10,66:13,68:16,76:19,78:20,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($V11,[2,50]),o($V11,[2,53],{54:210,55:$V51}),o($V11,[2,52]),o($V91,[2,56]),o($V91,[2,57]),{56:[1,211],57:[1,212]},o($VH,[2,47],{9:$V41}),{6:213,16:$V0,17:$V1,22:$V2,25:7,26:8,27:9,28:11,32:14,33:15,38:$V3,43:$V4,61:$V5,64:10,66:13,68:16,76:19,78:20,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{6:214,16:$V0,17:$V1,22:$V2,25:7,26:8,27:9,28:11,32:14,33:15,38:$V3,43:$V4,61:$V5,64:10,66:13,68:16,76:19,78:20,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($V11,[2,40]),{16:[1,215]},o($V11,[2,44]),{12:216,13:$V61,20:217,23:$V71},{21:218,22:$V31},{20:219,23:$V71},{1:[2,16]},o([9,19,23],[2,11]),{2:$V_,4:220,6:5,16:$V0,17:$V1,22:$V2,24:[1,221],25:7,26:8,27:9,28:11,32:14,33:15,38:$V3,43:$V4,61:$V5,64:10,66:13,68:16,76:19,78:20,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},o($V81,[2,20],{12:222,13:$V61}),o($V11,[2,48]),o($V11,[2,51]),o($V11,[2,54]),o($V11,[2,55]),{63:[1,223]},o($V11,[2,39]),{41:[2,41]},{20:224,23:$V71},{1:[2,15]},o($V81,[2,17]),{1:[2,14]},{7:67,8:$Vu,9:$Vv,24:[1,225]},{1:[2,22]},o($V81,[2,19]),{6:226,16:$V0,17:$V1,22:$V2,25:7,26:8,27:9,28:11,32:14,33:15,38:$V3,43:$V4,61:$V5,64:10,66:13,68:16,76:19,78:20,79:$V6,80:$V7,81:21,82:$V8,86:22,87:$V9,88:27,89:$Va,90:28,91:29,92:30,93:32,94:33,97:41,98:42,99:57,100:$Vb,101:$Vc,103:$Vd,104:$Ve,105:$Vf,106:$Vg,107:$Vh,108:$Vi,109:$Vj,111:39,112:40,113:$Vk,114:$Vl,115:$Vm,116:$Vn,117:$Vo,118:$Vp,119:31,122:34,123:35,124:36,125:37,126:38,127:$Vq,128:$Vr,129:$Vs,130:$Vt},{1:[2,13]},{1:[2,21]},o($Vx,[2,59])],
defaultActions: {3:[2,2],71:[2,10],205:[2,16],215:[2,41],217:[2,15],219:[2,14],221:[2,22],224:[2,13],225:[2,21]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

  const { Tipo, TipoPath, Comando } = require("./AST/Entorno");
  const { Logical } = require("./Expresion/Logical");
  const { Arithmetic, Unary, RangeExp } = require("./Expresion/Arithmetics")
  const { Literal, PathExp, Variable, Parentesis } = require("./Expresion/Expresiones");
  const { ComparisonExp } = require('./Expresion/Comparison')
  const { Atributo, Camino, Child, Descendant, Attribute, Self, DescSelf, FollowSibling, Follow } = require('./Expresion/axes')
  const { CaminoInverso, Parent, Ancestor, PrecedingSibling, AncestorSelf, Preceding } = require('./Expresion/axes')
  const { ContextItemExpr, CallFunction } = require('./Expresion/postfix')
  const { Declaracion, Let, Return } = require('./Instruccion/Xquery')
  const { grafoCST } = require('../CST')
  
  var grafo = new grafoCST(); 

  var ListaErrores = []
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "ROR"
break;
case 1:return "RAND"
break;
case 2:return "IDIV"
break;
case 3:return "DIV"
break;
case 4:return "MOD"
break;
case 5:return "RIN"
break;
case 6:return "EQ"
break;
case 7:return "NE"
break;
case 8:return "LT"
break;
case 9:return "LE"
break;
case 10:return "GT"
break;
case 11:return "GE"
break;
case 12:return "RCHILD"
break;
case 13:return "RDESSELF"
break;
case 14:return "RDESCENDANT"
break;
case 15:return "RATTRIBUTE"
break;
case 16:return "RSELF"
break;
case 17:return "RFOLLOWSIBLING"
break;
case 18:return "RFOLLOW"
break;
case 19:return "RNAMESPACE"
break;
case 20:return "RPARENT"
break;
case 21:return "RANCESTORORSELF"
break;
case 22:return "RANCESTOR"
break;
case 23:return "RPRECEDSIBLING"
break;
case 24:return "RPRECED"
break;
case 25:return "RRETURN"
break;
case 26:return "RFUNCTION"
break;
case 27:return "RLET"
break;
case 28:return "RDECLARE"
break;
case 29:return "RVARIABLE"
break;
case 30:return "RDOC"
break;
case 31:return "RFOR"
break;
case 32:return "RWHERE"
break;
case 33:return "RSTABLE"
break;
case 34:return "RORDER"
break;
case 35:return "RBY"
break;
case 36:return "RTO"
break;
case 37:return "RAT"
break;
case 38:return "LLAVEA"
break;
case 39:return "LLAVEC"
break;
case 40:return "PERCENTAGE"
break;
case 41:return "REXTERNAL"
break;
case 42:return "RAS"
break;
case 43:return "RASCENDING"
break;
case 44:return "RDESCENDING"
break;
case 45:return "RIF"
break;
case 46:return "RTHEN"
break;
case 47:return "RELSE"
break;
case 48:return "REMPTY" 
break;
case 49:return "RGREATEST"
break;
case 50:return "RLEAST"
break;
case 51:return "DECIMAL"
break;
case 52:return "INTEGER"
break;
case 53: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return "CADENA" 
break;
case 54:return "NOMBRE"
break;
case 55:return "DOBLEBARRA"
break;
case 56:return "BARRA"
break;
case 57:return "ARROBA"
break;
case 58:return "CORA"
break;
case 59:return "CORB"
break;
case 60:return "MAS"
break;
case 61:return "MENOS"
break;
case 62:return "DobleAsterisco"
break;
case 63:return "POR"
break;
case 64:return "MAYORIG"
break;
case 65:return "MENORIG"
break;
case 66:return "DIFERENTE"
break;
case 67:return "MENOR"
break;
case 68:return "MAYOR"
break;
case 69:return "DOSPUNTOSIGUAL"
break;
case 70:return "IGUAL"
break;
case 71:return "PIPE"
break;
case 72:return "COMA"
break;
case 73:return "ADMIRACION"
break;
case 74:return "ARROBA"
break;
case 75:return "DOBLEPUNTO"
break;
case 76:return "PARENTESISA"
break;
case 77:return "PARENTESISC"
break;
case 78:return "INTERROGACIONC"
break;
case 79:return "PUNTO"
break;
case 80:return "DOBLEDOSPUNTOS"
break;
case 81:return "DOSPUNTOS"
break;
case 82:return "DOLAR"
break;
case 83:
break;
case 84:
break;
case 85: ListaErrores.push({Error:'Este es un error léxico: ' + yy_.yytext,tipo:"Lexico", Linea: yy_.yylloc.first_line , columna:yy_.yylloc.first_column}) 
break;
}
},
rules: [/^(?:or\b)/i,/^(?:and\b)/i,/^(?:idiv\b)/i,/^(?:div\b)/i,/^(?:mod\b)/i,/^(?:in\b)/i,/^(?:eq\b)/i,/^(?:ne\b)/i,/^(?:lt\b)/i,/^(?:le\b)/i,/^(?:gt\b)/i,/^(?:ge\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:attribute\b)/i,/^(?:self\b)/i,/^(?:following-sibling\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:preceding-sibling\b)/i,/^(?:preceding\b)/i,/^(?:return\b)/i,/^(?:function\b)/i,/^(?:let\b)/i,/^(?:declare\b)/i,/^(?:variable\b)/i,/^(?:doc\b)/i,/^(?:for\b)/i,/^(?:where\b)/i,/^(?:stable\b)/i,/^(?:order\b)/i,/^(?:by\b)/i,/^(?:to\b)/i,/^(?:at\b)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:%)/i,/^(?:external\b)/i,/^(?:as\b)/i,/^(?:ascending\b)/i,/^(?:descending\b)/i,/^(?:if\b)/i,/^(?:then\b)/i,/^(?:else\b)/i,/^(?:empty\b)/i,/^(?:greatest\b)/i,/^(?:least\b)/i,/^(?:(\.[0-9]+)|([0-9]+\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:("[^"]*")|('[^']*'))/i,/^(?:([a-zA-ZñÑ_])([a-zA-ZñÑ0-9_-]|\.)*)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:@)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*\*)/i,/^(?:\*)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?::=)/i,/^(?:=)/i,/^(?:\|)/i,/^(?:,)/i,/^(?:!)/i,/^(?:@)/i,/^(?:\.\.)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\?)/i,/^(?:\.)/i,/^(?:::)/i,/^(?::)/i,/^(?:\$)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Xpath;
exports.Parser = Xpath.Parser;
exports.parse = function () { return Xpath.parse.apply(Xpath, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}