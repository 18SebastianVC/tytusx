/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jisonXpaht = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,6,16],$V1=[2,11],$V2=[1,7],$V3=[1,9],$V4=[5,6],$V5=[5,6,20,25,48,50,51,52,53,54,55,56,57,58,59,60,61],$V6=[1,13],$V7=[5,6,16,20,25,48,50,51,52,53,54,55,56,57,58,59,60,61],$V8=[2,46],$V9=[1,20],$Va=[5,6,15,16,20,25,48,50,51,52,53,54,55,56,57,58,59,60,61],$Vb=[5,6,15,16,20,25,46,48,50,51,52,53,54,55,56,57,58,59,60,61],$Vc=[1,34],$Vd=[1,33],$Ve=[1,32],$Vf=[1,36],$Vg=[1,37],$Vh=[1,38],$Vi=[1,39],$Vj=[1,40],$Vk=[1,41],$Vl=[1,42],$Vm=[1,43],$Vn=[1,44],$Vo=[1,45],$Vp=[1,46],$Vq=[1,47],$Vr=[15,17,20,23,26,27,32,33,34,35,36,37,38,39,40,41,42,43],$Vs=[16,20,48,50,51,52,53,54,55,56,57,58,59,60,61],$Vt=[1,53],$Vu=[1,55],$Vv=[1,56],$Vw=[1,60],$Vx=[1,61],$Vy=[48,56,57],$Vz=[1,83],$VA=[1,81],$VB=[1,82],$VC=[1,84],$VD=[1,85],$VE=[20,25,48,50,51,52,53,54,55,56,57,58,59,60,61],$VF=[16,20,48,56,57,58,59,60,61],$VG=[16,20,25,48,50,51,52,53,54,55,56,57,58,59,60,61],$VH=[25,48,50,51,52,53,54,55,56,57,58,59];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INIT":3,"CONSULTAS_XPATH":4,"eof":5,"operador_o":6,"CONSULTA_XPATH":7,"RELATIVA":8,"EXPRESIONES_RUTA":9,"PUNTOS":10,"EXPRESION_RUTA":11,"DIAGONALES":12,"ACCESORES":13,"OPCIONAL_PREDICADO":14,"identificador":15,"diagonal":16,"punto":17,"ID":18,"ATRIBUTO":19,"multiplicacion":20,"NODE":21,"TEXT":22,"text":23,"parentesis_abierto":24,"parentesis_cerrado":25,"node":26,"arroba":27,"EJE":28,"EJES":29,"dos_puntos":30,"ACCESORES_EJE":31,"ancestor":32,"ancestor-or-self":33,"attribute":34,"child":35,"descendant":36,"descendant-or-self":37,"following":38,"following-sibling":39,"parent":40,"preceding":41,"preceding-sibling":42,"self":43,"PREDICADOS":44,"PREDICADO":45,"corchete_abierto":46,"FILTRO":47,"corchete_cerrado":48,"EXPR":49,"igual":50,"diferente":51,"mayor":52,"menor":53,"mayor_igual":54,"menor_igual":55,"and":56,"or":57,"suma":58,"resta":59,"division":60,"mod":61,"TIPOS":62,"string":63,"digito":64,"last":65,"position":66,"$accept":0,"$end":1},
terminals_: {2:"error",5:"eof",6:"operador_o",15:"identificador",16:"diagonal",17:"punto",20:"multiplicacion",23:"text",24:"parentesis_abierto",25:"parentesis_cerrado",26:"node",27:"arroba",30:"dos_puntos",32:"ancestor",33:"ancestor-or-self",34:"attribute",35:"child",36:"descendant",37:"descendant-or-self",38:"following",39:"following-sibling",40:"parent",41:"preceding",42:"preceding-sibling",43:"self",46:"corchete_abierto",48:"corchete_cerrado",50:"igual",51:"diferente",52:"mayor",53:"menor",54:"mayor_igual",55:"menor_igual",56:"and",57:"or",58:"suma",59:"resta",60:"division",61:"mod",63:"string",64:"digito",65:"last",66:"position"},
productions_: [0,[3,2],[4,3],[4,1],[7,1],[7,1],[7,2],[9,2],[9,1],[11,3],[11,4],[8,0],[8,2],[12,2],[12,1],[10,1],[10,2],[13,2],[13,2],[13,1],[13,1],[13,1],[22,3],[21,3],[19,2],[19,2],[19,2],[18,1],[18,1],[28,4],[31,1],[31,1],[31,1],[31,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[14,0],[14,1],[44,2],[44,1],[45,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,3],[47,2],[47,1],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[49,1],[62,1],[62,1],[62,1],[62,1],[62,1],[62,3],[62,3],[62,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    console.log('\n\nexito al analizar');
    
break;
}
},
table: [o($V0,$V1,{3:1,4:2,7:3,8:4,9:5,10:6,11:8,15:$V2,17:$V3}),{1:[3]},{5:[1,10],6:[1,11]},o($V4,[2,3]),o($V5,[2,4],{12:12,16:$V6}),o($V5,[2,5],{11:14,8:15,15:$V2,16:$V1}),{8:15,9:16,11:8,15:$V2,16:$V1},o($V7,$V8,{14:17,44:18,45:19,46:$V9}),o($Va,[2,8]),o($Vb,[2,15],{17:[1,21]}),{1:[2,1]},o($V0,$V1,{8:4,9:5,10:6,11:8,7:22,15:$V2,17:$V3}),{10:24,13:23,15:[1,30],17:$V3,18:25,19:26,20:[1,27],21:28,22:29,23:$Vc,26:$Vd,27:$Ve,28:31,29:35,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq},o($Vr,[2,14],{16:[1,48]}),o($Va,[2,7]),{12:12,16:$V6},o($V5,[2,6],{11:14,8:15,15:$V2,16:$V1}),o($V7,[2,12]),o($Va,[2,47],{45:49,46:$V9}),o($Vb,[2,49]),o($Vs,$V1,{8:4,9:5,11:8,29:35,47:50,49:51,28:52,62:54,19:57,10:58,7:59,22:62,15:$V2,17:$V3,23:$Vc,24:$Vt,27:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o($Vb,[2,16]),o($V4,[2,2]),o($Va,[2,9]),o($Va,$V8,{44:18,45:19,14:63,46:$V9}),o($Va,$V8,{44:18,45:19,14:64,46:$V9}),o($Va,$V8,{44:18,45:19,14:65,46:$V9}),o($Va,[2,19]),o($Va,[2,20]),o($Va,[2,21]),o($Vb,[2,27]),o($Vb,[2,28]),{15:[1,66],20:[1,67],21:68,26:$Vd},{24:[1,69]},{24:[1,70]},{30:[1,71]},{30:[2,34]},{30:[2,35]},{30:[2,36]},{30:[2,37]},{30:[2,38]},{30:[2,39]},{30:[2,40]},{30:[2,41]},{30:[2,42]},{30:[2,43]},{30:[2,44]},{30:[2,45]},o($Vr,[2,13]),o($Vb,[2,48]),{48:[1,72],56:[1,73],57:[1,74]},o($Vy,[2,60],{20:$Vz,50:[1,75],51:[1,76],52:[1,77],53:[1,78],54:[1,79],55:[1,80],58:$VA,59:$VB,60:$VC,61:$VD}),o($Vy,$V8,{44:18,45:19,14:86,46:$V9}),o([16,20,25,58,59,60,61],$V1,{8:4,9:5,11:8,62:54,19:57,10:58,7:59,22:62,49:87,15:$V2,17:$V3,23:$Vc,24:$Vt,27:$Ve,63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o($VE,[2,67]),o($VE,[2,68]),o($VE,[2,69]),o($VE,[2,70]),o($VE,[2,71],{11:8,8:15,9:16,15:$V2,16:$V1}),o($VE,[2,72]),{24:[1,88]},{24:[1,89]},o($VE,[2,75]),o($Va,[2,10]),o($Va,[2,17]),o($Va,[2,18]),o($Vb,[2,24]),o($Vb,[2,25]),o($Vb,[2,26]),{25:[1,90]},{25:[1,91]},{30:[1,92]},o($Vb,[2,50]),o($Vs,$V1,{8:4,9:5,11:8,29:35,49:51,28:52,62:54,19:57,10:58,7:59,22:62,47:93,15:$V2,17:$V3,23:$Vc,24:$Vt,27:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o($Vs,$V1,{8:4,9:5,11:8,29:35,49:51,28:52,62:54,19:57,10:58,7:59,22:62,47:94,15:$V2,17:$V3,23:$Vc,24:$Vt,27:$Ve,32:$Vf,33:$Vg,34:$Vh,35:$Vi,36:$Vj,37:$Vk,38:$Vl,39:$Vm,40:$Vn,41:$Vo,42:$Vp,43:$Vq,63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o($VF,$V1,{8:4,9:5,11:8,62:54,19:57,10:58,7:59,22:62,49:95,15:$V2,17:$V3,23:$Vc,24:$Vt,27:$Ve,63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o($VF,$V1,{8:4,9:5,11:8,62:54,19:57,10:58,7:59,22:62,49:96,15:$V2,17:$V3,23:$Vc,24:$Vt,27:$Ve,63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o($VF,$V1,{8:4,9:5,11:8,62:54,19:57,10:58,7:59,22:62,49:97,15:$V2,17:$V3,23:$Vc,24:$Vt,27:$Ve,63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o($VF,$V1,{8:4,9:5,11:8,62:54,19:57,10:58,7:59,22:62,49:98,15:$V2,17:$V3,23:$Vc,24:$Vt,27:$Ve,63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o($VF,$V1,{8:4,9:5,11:8,62:54,19:57,10:58,7:59,22:62,49:99,15:$V2,17:$V3,23:$Vc,24:$Vt,27:$Ve,63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o($VF,$V1,{8:4,9:5,11:8,62:54,19:57,10:58,7:59,22:62,49:100,15:$V2,17:$V3,23:$Vc,24:$Vt,27:$Ve,63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o($VG,$V1,{8:4,9:5,11:8,62:54,19:57,10:58,7:59,22:62,49:101,15:$V2,17:$V3,23:$Vc,24:$Vt,27:$Ve,63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o($VG,$V1,{8:4,9:5,11:8,62:54,19:57,10:58,7:59,22:62,49:102,15:$V2,17:$V3,23:$Vc,24:$Vt,27:$Ve,63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o($VG,$V1,{8:4,9:5,11:8,62:54,19:57,10:58,7:59,22:62,49:103,15:$V2,17:$V3,23:$Vc,24:$Vt,27:$Ve,63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o($VG,$V1,{8:4,9:5,11:8,62:54,19:57,10:58,7:59,22:62,49:104,15:$V2,17:$V3,23:$Vc,24:$Vt,27:$Ve,63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o($VG,$V1,{8:4,9:5,11:8,62:54,19:57,10:58,7:59,22:62,49:105,15:$V2,17:$V3,23:$Vc,24:$Vt,27:$Ve,63:$Vu,64:$Vv,65:$Vw,66:$Vx}),o($Vy,[2,59]),{20:$Vz,25:[1,106],58:$VA,59:$VB,60:$VC,61:$VD},{25:[1,107]},{25:[1,108]},o($Vb,[2,23]),o($Vb,[2,22]),{15:[1,110],20:[1,113],21:111,22:112,23:$Vc,26:$Vd,31:109},o($Vy,[2,57]),o($Vy,[2,58]),o($Vy,[2,51],{20:$Vz,58:$VA,59:$VB,60:$VC,61:$VD}),o($Vy,[2,52],{20:$Vz,58:$VA,59:$VB,60:$VC,61:$VD}),o($Vy,[2,53],{20:$Vz,58:$VA,59:$VB,60:$VC,61:$VD}),o($Vy,[2,54],{20:$Vz,58:$VA,59:$VB,60:$VC,61:$VD}),o($Vy,[2,55],{20:$Vz,58:$VA,59:$VB,60:$VC,61:$VD}),o($Vy,[2,56],{20:$Vz,58:$VA,59:$VB,60:$VC,61:$VD}),o($VH,[2,61],{20:$Vz,60:$VC,61:$VD}),o($VH,[2,62],{20:$Vz,60:$VC,61:$VD}),o($VE,[2,63]),o($VE,[2,64]),o($VE,[2,65]),o($VE,[2,66]),o($VE,[2,73]),o($VE,[2,74]),o($Vb,[2,29]),o($Vb,[2,30]),o($Vb,[2,31]),o($Vb,[2,32]),o($Vb,[2,33])],
defaultActions: {10:[2,1],36:[2,34],37:[2,35],38:[2,36],39:[2,37],40:[2,38],41:[2,39],42:[2,40],43:[2,41],44:[2,42],45:[2,43],46:[2,44],47:[2,45]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

//metodos o atributos 
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*espacio en blanco*/
break;
case 1:
    console.log('Detecto diagonal'); 
     return 16; 

break;
case 2:
    console.log('Detecto punto');
     return 17; 

break;
case 3:
    console.log('Detecto arroba');
     return 27; 

break;
case 4:
    console.log('Detecto node');
     return 26; 

break;
case 5:
    console.log('Detecto text');
     return 23; 

break;
case 6:
    console.log('Detecto last');
     return 65; 

break;
case 7:
    console.log('Detecto position');
     return 66; 

break;
case 8:
    console.log('Detecto ancestor');
     return 32; 

break;
case 9:
    console.log('Detecto ancestor-or-self');
     return 33; 

break;
case 10:
    console.log('Detecto attribute');
     return 34; 

break;
case 11:
    console.log('Detecto child');
     return 35; 

break;
case 12:
    console.log('Detecto descendant');
     return 36; 

break;
case 13:
    console.log('Detecto descendant-or-self');
     return 37; 

break;
case 14:
    console.log('Detecto following');
     return 38; 

break;
case 15:
    console.log('Detecto following-sibling');
     return 39; 

break;
case 16:
    console.log('Detecto parent');
     return 40; 

break;
case 17:
    console.log('Detecto preceding');
     return 41; 

break;
case 18:
    console.log('Detecto preceding-sibling');
     return 42; 

break;
case 19:
    console.log('Detecto self');
     return 43;

break;
case 20:
    console.log('Detecto operador_o');
    return 6;

break;
case 21:
    console.log('Detecto suma');
    return 58;

break;
case 22:
    console.log('Detecto resta');
    return 59;

break;
case 23:
    console.log('Detecto multiplicacion');
    return 20;

break;
case 24:
    console.log('Detecto division');
    return 60;

break;
case 25:
    console.log('Detecto igual');
    return 50;

break;
case 26:
    console.log('Detecto diferente');
    return 51;

break;
case 27:
    console.log('Detecto menor');
    return 53;

break;
case 28:
    console.log('Detecto menor_igual');
    return 55;

break;
case 29:
    console.log('Detecto mayor');
    return 52;

break;
case 30:
    console.log('Detecto mayor_igual');
    return 54;

break;
case 31:
    console.log('Detecto or');
    return 57;

break;
case 32:
    console.log('Detecto and');
    return 56;

break;
case 33:
    // equivalente a %
    console.log('Detecto mod');
    return 61;

break;
case 34: 
    console.log('Detecto parentesis_abierto'); 
     return 24; 
    
break;
case 35: 
    console.log('Detecto parentesis_cerrado'); 
     return 25; 
    
break;
case 36: 
    console.log('Detecto corchete_abierto');
    return 46; 
    
break;
case 37: 
    console.log('Detecto corchete_cerrado');
     return 48; 
    
break;
case 38: 
    console.log('Detecto dos_puntos'); 
     return 30; 
    
break;
case 39: 
    console.log('Detecto digito'); 
     return 64; 
    
break;
case 40: 
    console.log('Detecto identificador'); 
     return 15; 
    
break;
case 41:
    console.log('Salto linea '+yy_.yytext);

break;
case 42:
    console.log('string '+yy_.yytext);
    return 63;

break;
case 43:return 5;
break;
case 44:     
    //errores.push(['Lexico','dato: '+yy_.yytext,'Linea '+yy_.yylloc.first_line,'columna '+yy_.yylloc.first_column]);
    console.log('error lexico '+yy_.yytext);
    
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/)/,/^(?:\.)/,/^(?:@)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:ancestor\b)/,/^(?:ancestor-or-self\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:descendant-or-self\b)/,/^(?:following\b)/,/^(?:following-sibling\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:preceding-sibling\b)/,/^(?:self\b)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:div\b)/,/^(?:=)/,/^(?:!=)/,/^(?:<)/,/^(?:<=)/,/^(?:>)/,/^(?:>)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:(0|[1-9][0-9]*)(\.(0|[0-9]*[1-9](0)?))?)/,/^(?:\w+)/,/^(?:&&[^\n]*)/,/^(?:"[^"\""]*")/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jisonXpaht;
exports.Parser = jisonXpaht.Parser;
exports.parse = function () { return jisonXpaht.parse.apply(jisonXpaht, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}