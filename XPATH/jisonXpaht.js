/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jisonXpaht = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,7,16],$V1=[2,10],$V2=[1,6],$V3=[5,7],$V4=[1,11],$V5=[2,35],$V6=[1,15],$V7=[5,7,14,16],$V8=[1,24],$V9=[1,26],$Va=[1,27],$Vb=[1,28],$Vc=[1,29],$Vd=[1,30],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[1,36],$Vk=[1,37],$Vl=[1,38],$Vm=[14,17,20,24,25,26,27,28,29,30,31,32,33,34,35,36],$Vn=[1,48],$Vo=[1,43],$Vp=[1,45],$Vq=[1,46],$Vr=[5,7,14,16,37],$Vs=[1,55],$Vt=[1,56],$Vu=[1,57],$Vv=[1,58],$Vw=[1,59],$Vx=[1,60],$Vy=[1,61],$Vz=[1,62],$VA=[1,63],$VB=[1,64],$VC=[1,65],$VD=[1,66],$VE=[1,67],$VF=[39,41,42,43,44,45,46,47,48,49,50,51,52,53,55],$VG=[39,41,42,43,44,45,46,49,50,51,52,53,55],$VH=[39,49,50,55],$VI=[39,49,50,51,52,53,55];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"INIT":3,"CARLOS2":4,"eof":5,"CARLOS":6,"operador_o":7,"RELATIVA":8,"EXPRESIONES_RUTA":9,"EXPRESION_RUTA":10,"DIAGONALES":11,"ACCESORES":12,"PUNTOS":13,"identificador":14,"PREDICADO":15,"diagonal":16,"punto":17,"ID":18,"ATRIBUTO":19,"arroba":20,"EJE":21,"EJES":22,"dos_puntos":23,"ancestor":24,"ancestor-or-self":25,"attribute":26,"childz":27,"descendant":28,"descendant-or-self":29,"following":30,"following-sibling":31,"namespace":32,"parent":33,"preceding":34,"preceding-sibling":35,"self":36,"corchete_abierto":37,"OPCIONES_PREDICADO":38,"corchete_cerrado":39,"OPERACIONES":40,"igual":41,"diferente":42,"menor":43,"menor_igual":44,"mayor":45,"mayor_igual":46,"or":47,"and":48,"suma":49,"resta":50,"multiplicacion":51,"division":52,"mod":53,"parentesis_abierto":54,"parentesis_cerrado":55,"TIPOS":56,"string":57,"digito":58,"$accept":0,"$end":1},
terminals_: {2:"error",5:"eof",7:"operador_o",14:"identificador",16:"diagonal",17:"punto",20:"arroba",23:"dos_puntos",24:"ancestor",25:"ancestor-or-self",26:"attribute",27:"childz",28:"descendant",29:"descendant-or-self",30:"following",31:"following-sibling",32:"namespace",33:"parent",34:"preceding",35:"preceding-sibling",36:"self",37:"corchete_abierto",39:"corchete_cerrado",41:"igual",42:"diferente",43:"menor",44:"menor_igual",45:"mayor",46:"mayor_igual",47:"or",48:"and",49:"suma",50:"resta",51:"multiplicacion",52:"division",53:"mod",54:"parentesis_abierto",55:"parentesis_cerrado",57:"string",58:"digito"},
productions_: [0,[3,2],[4,3],[4,1],[6,1],[6,1],[9,2],[9,1],[10,3],[10,3],[8,0],[8,2],[11,2],[11,1],[13,1],[13,2],[12,2],[12,2],[19,2],[18,1],[18,1],[21,4],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[15,0],[15,3],[38,1],[38,1],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,3],[40,1],[56,1],[56,1],[56,1],[56,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

    console.log('\n\nexito al analizar');

break;
}
},
table: [o($V0,$V1,{3:1,4:2,6:3,8:4,9:5,10:7,14:$V2}),{1:[3]},{5:[1,8]},{5:[2,3],7:[1,9]},o($V3,[2,4],{11:10,16:$V4}),o($V3,[2,5],{10:12,8:13,14:$V2,16:$V1}),o($V0,$V5,{15:14,37:$V6}),o($V7,[2,7]),{1:[2,1]},o($V0,$V1,{6:3,8:4,9:5,10:7,4:16,14:$V2}),{12:17,13:18,14:[1,22],17:[1,21],18:19,19:20,20:$V8,21:23,22:25,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl},o($Vm,[2,13],{16:[1,39]}),o($V7,[2,6]),{11:10,16:$V4},o($V0,[2,11]),{14:$Vn,19:47,20:$V8,21:42,22:25,24:$V9,25:$Va,26:$Vb,27:$Vc,28:$Vd,29:$Ve,30:$Vf,31:$Vg,32:$Vh,33:$Vi,34:$Vj,35:$Vk,36:$Vl,38:40,40:41,54:$Vo,56:44,57:$Vp,58:$Vq},{5:[2,2]},o($V7,[2,8]),o($V7,[2,9]),o($V7,$V5,{15:49,37:$V6}),o($V7,$V5,{15:50,37:$V6}),o($V7,[2,14],{17:[1,51]}),o($Vr,[2,19]),o($Vr,[2,20]),{14:[1,52]},{23:[1,53]},{23:[2,22]},{23:[2,23]},{23:[2,24]},{23:[2,25]},{23:[2,26]},{23:[2,27]},{23:[2,28]},{23:[2,29]},{23:[2,30]},{23:[2,31]},{23:[2,32]},{23:[2,33]},{23:[2,34]},o($Vm,[2,12]),{39:[1,54]},{39:[2,37],41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE},{39:[2,38]},{14:$Vn,19:47,20:$V8,40:68,54:$Vo,56:44,57:$Vp,58:$Vq},o($VF,[2,53]),o($VF,[2,54]),o($VF,[2,55]),o($VF,[2,56]),o($VF,[2,57]),o($V7,[2,16]),o($V7,[2,17]),o($V7,[2,15]),o([5,7,14,16,37,39,41,42,43,44,45,46,47,48,49,50,51,52,53,55],[2,18]),{23:[1,69]},o($V7,[2,36]),{14:$Vn,19:47,20:$V8,40:70,54:$Vo,56:44,57:$Vp,58:$Vq},{14:$Vn,19:47,20:$V8,40:71,54:$Vo,56:44,57:$Vp,58:$Vq},{14:$Vn,19:47,20:$V8,40:72,54:$Vo,56:44,57:$Vp,58:$Vq},{14:$Vn,19:47,20:$V8,40:73,54:$Vo,56:44,57:$Vp,58:$Vq},{14:$Vn,19:47,20:$V8,40:74,54:$Vo,56:44,57:$Vp,58:$Vq},{14:$Vn,19:47,20:$V8,40:75,54:$Vo,56:44,57:$Vp,58:$Vq},{14:$Vn,19:47,20:$V8,40:76,54:$Vo,56:44,57:$Vp,58:$Vq},{14:$Vn,19:47,20:$V8,40:77,54:$Vo,56:44,57:$Vp,58:$Vq},{14:$Vn,19:47,20:$V8,40:78,54:$Vo,56:44,57:$Vp,58:$Vq},{14:$Vn,19:47,20:$V8,40:79,54:$Vo,56:44,57:$Vp,58:$Vq},{14:$Vn,19:47,20:$V8,40:80,54:$Vo,56:44,57:$Vp,58:$Vq},{14:$Vn,19:47,20:$V8,40:81,54:$Vo,56:44,57:$Vp,58:$Vq},{14:$Vn,19:47,20:$V8,40:82,54:$Vo,56:44,57:$Vp,58:$Vq},{41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,49:$VA,50:$VB,51:$VC,52:$VD,53:$VE,55:[1,83]},{14:[1,84]},o($VG,[2,39],{47:$Vy,48:$Vz}),o($VG,[2,40],{47:$Vy,48:$Vz}),o($VG,[2,41],{47:$Vy,48:$Vz}),o($VG,[2,42],{47:$Vy,48:$Vz}),o($VG,[2,43],{47:$Vy,48:$Vz}),o($VG,[2,44],{47:$Vy,48:$Vz}),o($VF,[2,45]),o($VF,[2,46]),o($VH,[2,47],{41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,51:$VC,52:$VD,53:$VE}),o($VH,[2,48],{41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz,51:$VC,52:$VD,53:$VE}),o($VI,[2,49],{41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz}),o($VI,[2,50],{41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz}),o($VI,[2,51],{41:$Vs,42:$Vt,43:$Vu,44:$Vv,45:$Vw,46:$Vx,47:$Vy,48:$Vz}),o($VF,[2,52]),o([5,7,14,16,37,39],[2,21])],
defaultActions: {8:[2,1],16:[2,2],26:[2,22],27:[2,23],28:[2,24],29:[2,25],30:[2,26],31:[2,27],32:[2,28],33:[2,29],34:[2,30],35:[2,31],36:[2,32],37:[2,33],38:[2,34],42:[2,38]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

//metodos o atributos 
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*espacio en blanco*/
break;
case 1:
    console.log('Detecto diagonal'); 
     return 16; 

break;
case 2:
    console.log('Detecto punto');
     return 17; 

break;
case 3:
    console.log('Detecto arroba');
     return 20; 

break;
case 4:
    console.log('Detecto node');
     return 'node'; 

break;
case 5:
    console.log('Detecto node');
     return 'node'; 

break;
case 6:
    console.log('Detecto last');
     return 'last'; 

break;
case 7:
    console.log('Detecto position');
     return 'position'; 

break;
case 8:
    console.log('Detecto POSITION');
     return 'POSITION'; 

break;
case 9:
    console.log('Detecto ancestor-or-self');
     return 25; 

break;
case 10:
    console.log('Detecto attribute');
     return 26; 

break;
case 11:
    console.log('Detecto child');
     return 'child'; 

break;
case 12:
    console.log('Detecto descendant');
     return 28; 

break;
case 13:
    console.log('Detecto descendant-or-self');
     return 29; 

break;
case 14:
    console.log('Detecto following');
     return 30; 

break;
case 15:
    console.log('Detecto following-sibling');
     return 31; 

break;
case 16:
    console.log('Detecto namespace');
     return 32; 

break;
case 17:
    console.log('Detecto parent');
     return 33; 

break;
case 18:
    console.log('Detecto preceding');
     return 34; 

break;
case 19:
    console.log('Detecto preceding-sibling');
     return 35; 

break;
case 20:
    console.log('Detecto self');
     return 36;

break;
case 21:
    console.log('Detecto operador_o');
    return 7;

break;
case 22:
    console.log('Detecto suma');
    return 49;

break;
case 23:
    console.log('Detecto resta');
    return 50;

break;
case 24:
    console.log('Detecto multiplicacion');
    return 51;

break;
case 25:
    console.log('Detecto division');
    return 52;

break;
case 26:
    console.log('Detecto igual');
    return 41;

break;
case 27:
    console.log('Detecto diferente');
    return 42;

break;
case 28:
    console.log('Detecto menor');
    return 43;

break;
case 29:
    console.log('Detecto menor_igual');
    return 44;

break;
case 30:
    console.log('Detecto mayor');
    return 45;

break;
case 31:
    console.log('Detecto mayor_igual');
    return 46;

break;
case 32:
    console.log('Detecto or');
    return 47;

break;
case 33:
    console.log('Detecto and');
    return 48;

break;
case 34:
    // equivalente a %
    console.log('Detecto mod');
    return 53;

break;
case 35: 
    console.log('Detecto parentesis_abierto'); 
     return 54; 
    
break;
case 36: 
    console.log('Detecto parentesis_cerrado'); 
     return 55; 
    
break;
case 37: 
    console.log('Detecto corchete_abierto');
    return 37; 
    
break;
case 38: 
    console.log('Detecto corchete_cerrado');
     return 39; 
    
break;
case 39: 
    console.log('Detecto dos_puntos'); 
     return 23; 
    
break;
case 40: 
    console.log('Detecto digito'); 
     return 58; 
    
break;
case 41: 
    console.log('Detecto identificador'); 
     return 14; 
    
break;
case 42:
    console.log('Salto linea '+yy_.yytext);

break;
case 43:
    console.log('string '+yy_.yytext);
    return 57;

break;
case 44:return 5;
break;
case 45:     
    //errores.push(['Lexico','dato: '+yy_.yytext,'Linea '+yy_.yylloc.first_line,'columna '+yy_.yylloc.first_column]);
    console.log('error lexico '+yy_.yytext);
    
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/)/,/^(?:\.)/,/^(?:@)/,/^(?:node\b)/,/^(?:text\b)/,/^(?:last\b)/,/^(?:position\b)/,/^(?:ancestor\b)/,/^(?:ancestor-or-self\b)/,/^(?:attribute\b)/,/^(?:child\b)/,/^(?:descendant\b)/,/^(?:descendant-or-self\b)/,/^(?:following\b)/,/^(?:following-sibling\b)/,/^(?:namespace\b)/,/^(?:parent\b)/,/^(?:preceding\b)/,/^(?:preceding-sibling\b)/,/^(?:self\b)/,/^(?:\|)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:div\b)/,/^(?:=)/,/^(?:!=)/,/^(?:<)/,/^(?:<=)/,/^(?:>)/,/^(?:>)/,/^(?:or\b)/,/^(?:and\b)/,/^(?:mod\b)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?::)/,/^(?:[1-9][0-9]*(\.0*[1-9]*0*)?\b)/,/^(?:\w+)/,/^(?:&&[^\n]*)/,/^(?:"[^"\""]*")/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jisonXpaht;
exports.Parser = jisonXpaht.Parser;
exports.parse = function () { return jisonXpaht.parse.apply(jisonXpaht, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}