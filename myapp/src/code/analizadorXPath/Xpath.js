/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Xpath = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,16],$V3=[1,17],$V4=[1,18],$V5=[1,46],$V6=[1,48],$V7=[1,49],$V8=[1,50],$V9=[1,51],$Va=[1,52],$Vb=[1,53],$Vc=[1,54],$Vd=[1,55],$Ve=[1,37],$Vf=[1,57],$Vg=[1,40],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[1,45],$Vm=[1,34],$Vn=[1,35],$Vo=[1,36],$Vp=[1,39],$Vq=[1,38],$Vr=[1,58],$Vs=[1,6,82],$Vt=[1,6,9,73,82,85],$Vu=[1,60],$Vv=[1,6,9,11,73,82,85],$Vw=[1,62],$Vx=[1,6,9,11,14,15,16,17,18,19,21,73,82,85],$Vy=[1,69],$Vz=[1,70],$VA=[1,6,9,11,14,15,16,17,18,19,21,23,24,73,82,85],$VB=[1,71],$VC=[1,72],$VD=[1,73],$VE=[1,74],$VF=[1,6,9,11,14,15,16,17,18,19,21,23,24,26,27,28,29,73,82,85],$VG=[1,80],$VH=[1,81],$VI=[1,6,9,11,14,15,16,17,18,19,21,23,24,26,27,28,29,35,37,73,82,85],$VJ=[1,84],$VK=[1,6,9,11,14,15,16,17,18,19,21,23,24,26,27,28,29,35,37,72,73,82,85],$VL=[1,89],$VM=[2,61],$VN=[23,24,33,35,37,48,49,51,52,53,54,55,56,57,59,61,64,65,66,67,68,69,78,79,80,81,87],$VO=[1,129],$VP=[59,61],$VQ=[82,85];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"XPath":3,"Expr":4,"ExprSingle":5,"PIPE":6,"OrExpr":7,"AndExpr":8,"ROR":9,"ComparisonExpr":10,"RAND":11,"StringConcatExpr":12,"GeneralComp":13,"IGUAL":14,"DIFERENTE":15,"MENOR":16,"MENORIG":17,"MAYOR":18,"MAYORIG":19,"AdditiveExpr":20,"OR_EXP":21,"MultiplicativeExpr":22,"MAS":23,"MENOS":24,"UnaryExpr":25,"POR":26,"DIV":27,"IDIV":28,"MOD":29,"ValueExpr":30,"SimpleMapExpr":31,"PathExpr":32,"SimpleLetClause":33,"ADMIRACION":34,"BARRA":35,"RelativePathExpr":36,"DOBLEBARRA":37,"StepExpr":38,"PostfixExpr":39,"AxisStep":40,"ReverseStep":41,"ForwardStep":42,"PredicateList":43,"Predicate":44,"AbbrevForwardStep":45,"ForwardAxis":46,"NameTest":47,"ARROBA":48,"RCHILD":49,"DOBLEDOSPUNTOS":50,"RDESCENDANT":51,"RATTRIBUTE":52,"RSELF":53,"RDESSELF":54,"RFOLLOWSIBLING":55,"RFOLLOW":56,"RNAMESPACE":57,"NodeTest":58,"NOMBRE":59,"Wildcard":60,"ASTERISCO":61,"AbbrevReverseStep":62,"ReverseAxis":63,"DOBLEPUNTO":64,"RPARENT":65,"RANCESTOR":66,"RPRECEDSIBLING":67,"RPRECED":68,"RANCESTORORSELF":69,"PrimaryExpr":70,"PostfixExprL":71,"CORA":72,"CORB":73,"Literal":74,"FunctionCall":75,"ContextItemExpr":76,"ParenthesizedExpr":77,"INTEGER":78,"DECIMAL":79,"CADENA":80,"PARENTESISA":81,"PARENTESISC":82,"ArgumentList":83,"Argument":84,"COMA":85,"INTERROGACIONC":86,"PUNTO":87,"$accept":0,"$end":1},
terminals_: {2:"error",6:"PIPE",9:"ROR",11:"RAND",14:"IGUAL",15:"DIFERENTE",16:"MENOR",17:"MENORIG",18:"MAYOR",19:"MAYORIG",21:"OR_EXP",23:"MAS",24:"MENOS",26:"POR",27:"DIV",28:"IDIV",29:"MOD",33:"SimpleLetClause",34:"ADMIRACION",35:"BARRA",37:"DOBLEBARRA",48:"ARROBA",49:"RCHILD",50:"DOBLEDOSPUNTOS",51:"RDESCENDANT",52:"RATTRIBUTE",53:"RSELF",54:"RDESSELF",55:"RFOLLOWSIBLING",56:"RFOLLOW",57:"RNAMESPACE",59:"NOMBRE",61:"ASTERISCO",64:"DOBLEPUNTO",65:"RPARENT",66:"RANCESTOR",67:"RPRECEDSIBLING",68:"RPRECED",69:"RANCESTORORSELF",72:"CORA",73:"CORB",78:"INTEGER",79:"DECIMAL",80:"CADENA",81:"PARENTESISA",82:"PARENTESISC",85:"COMA",86:"INTERROGACIONC",87:"PUNTO"},
productions_: [0,[3,1],[4,1],[4,3],[5,1],[7,1],[7,3],[8,1],[8,3],[10,1],[10,3],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[12,1],[12,3],[20,1],[20,3],[20,3],[22,1],[22,3],[22,3],[22,3],[22,3],[25,1],[25,2],[25,2],[30,1],[31,1],[31,3],[32,2],[32,2],[32,1],[32,1],[36,1],[36,3],[36,3],[38,1],[38,1],[40,1],[40,1],[40,2],[40,2],[43,1],[43,2],[42,1],[42,2],[45,2],[45,1],[46,2],[46,2],[46,2],[46,2],[46,2],[46,2],[46,2],[46,2],[58,1],[47,1],[47,1],[60,1],[41,1],[41,2],[62,1],[63,2],[63,2],[63,2],[63,2],[63,2],[39,1],[39,2],[71,1],[71,2],[44,3],[70,1],[70,1],[70,1],[70,1],[74,1],[74,1],[74,1],[75,3],[75,4],[83,1],[83,3],[84,1],[84,1],[76,1],[77,2],[77,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$=new Comando($$[$0]);return this.$ 
break;
case 2: case 46:
 this.$=[];this.$.push($$[$0]) 
break;
case 3:
 this.$=$$[$0-2];this.$.push($$[$0]) 
break;
case 4: case 9: case 17: case 19: case 22: case 27: case 30: case 31: case 40: case 41: case 42: case 43: case 48: case 60: case 61: case 62: case 63: case 64: case 72: case 74: case 77: case 78: case 79: case 80: case 86: case 88: case 89: case 90:
 this.$=$$[$0] 
break;
case 5: case 7: case 11: case 12: case 14: case 16:
 this.$ = $$[$0] 
break;
case 6: case 8:
 this.$ = new Logical($$[$0-2],$$[$0-1],$$[$0]) 
break;
case 10:
 this.$ = new ComparisonExp($$[$0-2],$$[$0-1],$$[$0]) 
break;
case 13: case 15:
 this.$ = $$[$0]	
break;
case 18: case 70:
 
break;
case 20: case 21: case 23: case 24: case 25: case 26:
 this.$= new Arithmetic($$[$0-2],$$[$0-1],$$[$0]) 
break;
case 33:
 $$[$0][0].tipo=TipoPath.ABS;this.$=new PathExp($$[$0]) 
break;
case 34:
 $$[$0][0].tipo=TipoPath.REL;this.$=new PathExp($$[$0]) 
break;
case 35:
 this.$=new PathExp($$[$0]) 
break;
case 36:
 this.$=new PathExp([]) 
break;
case 37:
 this.$ = []; this.$.push($$[$0]) 
break;
case 38:
 this.$ = $$[$0-2]; $$[$0].tipo=TipoPath.ABS; this.$.push($$[$0]) 
break;
case 39:
 this.$ = $$[$0-2]; $$[$0].tipo=TipoPath.REL; this.$.push($$[$0]) 
break;
case 44: case 45:
 this.$=$$[$0-1]; this.$.predicado=$$[$0] 
break;
case 47:
 this.$=$$[$0-1];this.$.push($$[$0]) 
break;
case 49:
 this.$=$$[$0-1]; this.$.nombre=$$[$0] 
break;
case 50:
 this.$=new Atributo($$[$0],[],TipoPath.ABS) 
break;
case 51:
 this.$=new Camino($$[$0],[],TipoPath.ABS) 
break;
case 52:
 this.$=new Child(null,[],TipoPath.ABS) 
break;
case 53:
 this.$=new Descendant(null,[],TipoPath.ABS) 
break;
case 54:
 this.$=new Attribute(null,[],TipoPath.ABS) 
break;
case 55:
 this.$=new Self(null,[],TipoPath.ABS) 
break;
case 56:
 this.$=new DescSelf(null,[],TipoPath.ABS) 
break;
case 57:
 this.$=new FollowSibling(null,[],TipoPath.ABS) 
break;
case 58:
 this.$=new Follow(null,[],TipoPath.ABS) 
break;
case 65:
 this.$=$$[$0-1]; this.$.nombre=$$[$0]  
break;
case 66:
 this.$=new CaminoInverso("*",[],TipoPath.ABS) 
break;
case 67:
 this.$=new Parent(null,[],Tipo.ABS) 
break;
case 68:
 this.$=new Ancestor(null,[],Tipo.ABS) 
break;
case 69:
 this.$=new PrecedingSibling(null,[],Tipo.ABS) 
break;
case 71:
 this.$=new AncestorSelf(null,[],Tipo,Tipo.ABS)
break;
case 73: case 76:
 this.$=$$[$0-1] 
break;
case 75: case 91:
 this.$=$$[$0-1]+$$[$0] 
break;
case 81:
 this.$=new Literal(Tipo.INTEGER,$$[$0]) 
break;
case 82:
 this.$=new Literal(Tipo.DECIMAL,$$[$0]) 
break;
case 83:
 this.$=new Literal(Tipo.STRING,$$[$0]) 
break;
case 84: case 87:
 this.$=$$[$0-2]+$$[$0-1]+$$[$0] 
break;
case 85:
 this.$=$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0] 
break;
case 92:
 this.$=$$[$0-2]+$$[$0] 
break;
}
},
table: [{3:1,4:2,5:3,7:4,8:5,10:6,12:7,20:8,22:9,23:$V0,24:$V1,25:10,30:11,31:14,32:15,33:$V2,35:$V3,36:19,37:$V4,38:20,39:21,40:22,41:24,42:25,45:32,46:33,47:47,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,60:56,61:$Vf,62:30,63:31,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:23,74:26,75:27,76:28,77:29,78:$Vm,79:$Vn,80:$Vo,81:$Vp,87:$Vq},{1:[3]},{1:[2,1],6:$Vr},o($Vs,[2,2]),o([1,6,73,82,85],[2,4],{9:[1,59]}),o($Vt,[2,5],{11:$Vu}),o($Vv,[2,7]),o($Vv,[2,9],{13:61,14:[1,63],15:[1,64],16:[1,65],17:[1,66],18:[1,67],19:[1,68],21:$Vw}),o($Vx,[2,17],{23:$Vy,24:$Vz}),o($VA,[2,19],{26:$VB,27:$VC,28:$VD,29:$VE}),o($VF,[2,22]),o($VF,[2,27]),{23:$V0,24:$V1,25:75,30:11,31:14,32:15,33:$V2,35:$V3,36:19,37:$V4,38:20,39:21,40:22,41:24,42:25,45:32,46:33,47:47,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,60:56,61:$Vf,62:30,63:31,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:23,74:26,75:27,76:28,77:29,78:$Vm,79:$Vn,80:$Vo,81:$Vp,87:$Vq},{23:$V0,24:$V1,25:76,30:11,31:14,32:15,33:$V2,35:$V3,36:19,37:$V4,38:20,39:21,40:22,41:24,42:25,45:32,46:33,47:47,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,60:56,61:$Vf,62:30,63:31,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:23,74:26,75:27,76:28,77:29,78:$Vm,79:$Vn,80:$Vo,81:$Vp,87:$Vq},o($VF,[2,30]),o($VF,[2,31]),{34:[1,77]},o($VF,[2,36],{38:20,39:21,40:22,70:23,41:24,42:25,74:26,75:27,76:28,77:29,62:30,63:31,45:32,46:33,47:47,60:56,36:78,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,61:$Vf,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,78:$Vm,79:$Vn,80:$Vo,81:$Vp,87:$Vq}),{36:79,38:20,39:21,40:22,41:24,42:25,45:32,46:33,47:47,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,60:56,61:$Vf,62:30,63:31,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:23,74:26,75:27,76:28,77:29,78:$Vm,79:$Vn,80:$Vo,81:$Vp,87:$Vq},o($VF,[2,35],{35:$VG,37:$VH}),o($VI,[2,37]),o($VI,[2,40]),o($VI,[2,41]),o($VI,[2,72],{71:82,44:83,72:$VJ}),o($VI,[2,42],{43:85,44:86,72:$VJ}),o($VI,[2,43],{44:86,43:87,72:$VJ}),o($VK,[2,77]),o($VK,[2,78]),o($VK,[2,79]),o($VK,[2,80]),o($VK,[2,64]),{47:88,59:$VL,60:56,61:$Vf},o($VK,[2,48]),{47:90,59:$VL,60:56,61:$Vf},o($VK,[2,81]),o($VK,[2,82]),o($VK,[2,83]),o($VK,$VM,{81:[1,91]}),o($VK,[2,90]),{4:93,5:3,7:4,8:5,10:6,12:7,20:8,22:9,23:$V0,24:$V1,25:10,30:11,31:14,32:15,33:$V2,35:$V3,36:19,37:$V4,38:20,39:21,40:22,41:24,42:25,45:32,46:33,47:47,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,60:56,61:$Vf,62:30,63:31,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:23,74:26,75:27,76:28,77:29,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:[1,92],87:$Vq},o($VK,[2,66]),{50:[1,94]},{50:[1,95]},{50:[1,96]},{50:[1,97]},{50:[1,98]},{47:99,59:$VL,60:56,61:$Vf},o($VK,[2,51]),{50:[1,100]},{50:[1,101]},{50:[1,102]},{50:[1,103]},{50:[1,104]},{50:[1,105]},{50:[1,106]},{50:[1,107]},o($VK,[2,62]),o($VK,[2,63]),{5:108,7:4,8:5,10:6,12:7,20:8,22:9,23:$V0,24:$V1,25:10,30:11,31:14,32:15,33:$V2,35:$V3,36:19,37:$V4,38:20,39:21,40:22,41:24,42:25,45:32,46:33,47:47,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,60:56,61:$Vf,62:30,63:31,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:23,74:26,75:27,76:28,77:29,78:$Vm,79:$Vn,80:$Vo,81:$Vp,87:$Vq},{8:109,10:6,12:7,20:8,22:9,23:$V0,24:$V1,25:10,30:11,31:14,32:15,33:$V2,35:$V3,36:19,37:$V4,38:20,39:21,40:22,41:24,42:25,45:32,46:33,47:47,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,60:56,61:$Vf,62:30,63:31,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:23,74:26,75:27,76:28,77:29,78:$Vm,79:$Vn,80:$Vo,81:$Vp,87:$Vq},{10:110,12:7,20:8,22:9,23:$V0,24:$V1,25:10,30:11,31:14,32:15,33:$V2,35:$V3,36:19,37:$V4,38:20,39:21,40:22,41:24,42:25,45:32,46:33,47:47,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,60:56,61:$Vf,62:30,63:31,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:23,74:26,75:27,76:28,77:29,78:$Vm,79:$Vn,80:$Vo,81:$Vp,87:$Vq},{12:111,20:8,22:9,23:$V0,24:$V1,25:10,30:11,31:14,32:15,33:$V2,35:$V3,36:19,37:$V4,38:20,39:21,40:22,41:24,42:25,45:32,46:33,47:47,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,60:56,61:$Vf,62:30,63:31,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:23,74:26,75:27,76:28,77:29,78:$Vm,79:$Vn,80:$Vo,81:$Vp,87:$Vq},{20:112,22:9,23:$V0,24:$V1,25:10,30:11,31:14,32:15,33:$V2,35:$V3,36:19,37:$V4,38:20,39:21,40:22,41:24,42:25,45:32,46:33,47:47,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,60:56,61:$Vf,62:30,63:31,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:23,74:26,75:27,76:28,77:29,78:$Vm,79:$Vn,80:$Vo,81:$Vp,87:$Vq},o($VN,[2,11]),o($VN,[2,12]),o($VN,[2,13]),o($VN,[2,14]),o($VN,[2,15]),o($VN,[2,16]),{22:113,23:$V0,24:$V1,25:10,30:11,31:14,32:15,33:$V2,35:$V3,36:19,37:$V4,38:20,39:21,40:22,41:24,42:25,45:32,46:33,47:47,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,60:56,61:$Vf,62:30,63:31,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:23,74:26,75:27,76:28,77:29,78:$Vm,79:$Vn,80:$Vo,81:$Vp,87:$Vq},{22:114,23:$V0,24:$V1,25:10,30:11,31:14,32:15,33:$V2,35:$V3,36:19,37:$V4,38:20,39:21,40:22,41:24,42:25,45:32,46:33,47:47,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,60:56,61:$Vf,62:30,63:31,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:23,74:26,75:27,76:28,77:29,78:$Vm,79:$Vn,80:$Vo,81:$Vp,87:$Vq},{23:$V0,24:$V1,25:115,30:11,31:14,32:15,33:$V2,35:$V3,36:19,37:$V4,38:20,39:21,40:22,41:24,42:25,45:32,46:33,47:47,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,60:56,61:$Vf,62:30,63:31,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:23,74:26,75:27,76:28,77:29,78:$Vm,79:$Vn,80:$Vo,81:$Vp,87:$Vq},{23:$V0,24:$V1,25:116,30:11,31:14,32:15,33:$V2,35:$V3,36:19,37:$V4,38:20,39:21,40:22,41:24,42:25,45:32,46:33,47:47,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,60:56,61:$Vf,62:30,63:31,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:23,74:26,75:27,76:28,77:29,78:$Vm,79:$Vn,80:$Vo,81:$Vp,87:$Vq},{23:$V0,24:$V1,25:117,30:11,31:14,32:15,33:$V2,35:$V3,36:19,37:$V4,38:20,39:21,40:22,41:24,42:25,45:32,46:33,47:47,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,60:56,61:$Vf,62:30,63:31,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:23,74:26,75:27,76:28,77:29,78:$Vm,79:$Vn,80:$Vo,81:$Vp,87:$Vq},{23:$V0,24:$V1,25:118,30:11,31:14,32:15,33:$V2,35:$V3,36:19,37:$V4,38:20,39:21,40:22,41:24,42:25,45:32,46:33,47:47,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,60:56,61:$Vf,62:30,63:31,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:23,74:26,75:27,76:28,77:29,78:$Vm,79:$Vn,80:$Vo,81:$Vp,87:$Vq},o($VF,[2,28]),o($VF,[2,29]),{32:119,35:$V3,36:19,37:$V4,38:20,39:21,40:22,41:24,42:25,45:32,46:33,47:47,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,60:56,61:$Vf,62:30,63:31,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:23,74:26,75:27,76:28,77:29,78:$Vm,79:$Vn,80:$Vo,81:$Vp,87:$Vq},o($VF,[2,33],{35:$VG,37:$VH}),o($VF,[2,34],{35:$VG,37:$VH}),{38:120,39:21,40:22,41:24,42:25,45:32,46:33,47:47,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,60:56,61:$Vf,62:30,63:31,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:23,74:26,75:27,76:28,77:29,78:$Vm,79:$Vn,80:$Vo,81:$Vp,87:$Vq},{38:121,39:21,40:22,41:24,42:25,45:32,46:33,47:47,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,60:56,61:$Vf,62:30,63:31,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:23,74:26,75:27,76:28,77:29,78:$Vm,79:$Vn,80:$Vo,81:$Vp,87:$Vq},o($VI,[2,73],{44:122,72:$VJ}),o($VK,[2,74]),{5:123,7:4,8:5,10:6,12:7,20:8,22:9,23:$V0,24:$V1,25:10,30:11,31:14,32:15,33:$V2,35:$V3,36:19,37:$V4,38:20,39:21,40:22,41:24,42:25,45:32,46:33,47:47,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,60:56,61:$Vf,62:30,63:31,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:23,74:26,75:27,76:28,77:29,78:$Vm,79:$Vn,80:$Vo,81:$Vp,87:$Vq},o($VI,[2,44],{44:124,72:$VJ}),o($VK,[2,46]),o($VI,[2,45],{44:124,72:$VJ}),o($VK,[2,65]),o($VK,$VM),o($VK,[2,49]),{5:128,7:4,8:5,10:6,12:7,20:8,22:9,23:$V0,24:$V1,25:10,30:11,31:14,32:15,33:$V2,35:$V3,36:19,37:$V4,38:20,39:21,40:22,41:24,42:25,45:32,46:33,47:47,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,60:56,61:$Vf,62:30,63:31,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:23,74:26,75:27,76:28,77:29,78:$Vm,79:$Vn,80:$Vo,81:$Vp,82:[1,125],83:126,84:127,86:$VO,87:$Vq},o($VK,[2,91]),{6:$Vr,82:[1,130]},o($VP,[2,67]),o($VP,[2,68]),o($VP,[2,69]),o($VP,[2,70]),o($VP,[2,71]),o($VK,[2,50]),o($VP,[2,52]),o($VP,[2,53]),o($VP,[2,54]),o($VP,[2,55]),o($VP,[2,56]),o($VP,[2,57]),o($VP,[2,58]),o($VP,[2,59]),o($Vs,[2,3]),o($Vt,[2,6],{11:$Vu}),o($Vv,[2,8]),o($Vv,[2,10],{21:$Vw}),o($Vx,[2,18],{23:$Vy,24:$Vz}),o($VA,[2,20],{26:$VB,27:$VC,28:$VD,29:$VE}),o($VA,[2,21],{26:$VB,27:$VC,28:$VD,29:$VE}),o($VF,[2,23]),o($VF,[2,24]),o($VF,[2,25]),o($VF,[2,26]),o($VF,[2,32]),o($VI,[2,38]),o($VI,[2,39]),o($VK,[2,75]),{73:[1,131]},o($VK,[2,47]),o($VK,[2,84]),{82:[1,132],85:[1,133]},o($VQ,[2,86]),o($VQ,[2,88]),o($VQ,[2,89]),o($VK,[2,92]),o($VK,[2,76]),o($VK,[2,85]),{5:128,7:4,8:5,10:6,12:7,20:8,22:9,23:$V0,24:$V1,25:10,30:11,31:14,32:15,33:$V2,35:$V3,36:19,37:$V4,38:20,39:21,40:22,41:24,42:25,45:32,46:33,47:47,48:$V5,49:$V6,51:$V7,52:$V8,53:$V9,54:$Va,55:$Vb,56:$Vc,57:$Vd,59:$Ve,60:56,61:$Vf,62:30,63:31,64:$Vg,65:$Vh,66:$Vi,67:$Vj,68:$Vk,69:$Vl,70:23,74:26,75:27,76:28,77:29,78:$Vm,79:$Vn,80:$Vo,81:$Vp,84:134,86:$VO,87:$Vq},o($VQ,[2,87])],
defaultActions: {},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  const {Tipo,TipoPath,Comando} = require("./AST/Entorno");
  const {Logical} = require("./Expresion/Logical");
  const {Arithmetic} = require("./Expresion/Arithmetics")
  const {Literal,PathExp,AbsoluthePath,RelativePath,PathExpElement,AxisStepExp} = require("./Expresion/Expresiones");
  const { ComparisonExp } = require('./Expresion/Comparison')
  const { Atributo,Camino,Child,Descendant,Attribute,Self,DescSelf,FollowSibling,Follow } = require('./Expresion/axes')
  const { CaminoInverso,Parent,Ancestor,PrecedingSibling,AncestorSelf } = require('./Expresion/axes')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "ROR"
break;
case 1:return "RAND"
break;
case 2:return "RRETURN"
break;
case 3:return "RFOR"
break;
case 4:return "RIN"
break;
case 5:return "RTO"
break;
case 6:return "EQ"
break;
case 7:return "NE"
break;
case 8:return "LT"
break;
case 9:return "LE"
break;
case 10:return "GT"
break;
case 11:return "GE"
break;
case 12:return "RCHILD"
break;
case 13:return "RDESSELF"
break;
case 14:return "RDESCENDANT"
break;
case 15:return "RATTRIBUTE"
break;
case 16:return "RSELF"
break;
case 17:return "RFOLLOWSIBLING"
break;
case 18:return "RFOLLOW"
break;
case 19:return "RNAMESPACE"
break;
case 20:return "RPARENT"
break;
case 21:return "RANCESTORORSELF"
break;
case 22:return "RANCESTOR"
break;
case 23:return "RPRECEDSIBLING"
break;
case 24:return "RPRECED"
break;
case 25:return "DECIMAL"
break;
case 26:return "INTEGER"
break;
case 27: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return "CADENA" 
break;
case 28:return "NOMBRE"
break;
case 29:return "DOBLEBARRA"
break;
case 30:return "BARRA"
break;
case 31:return "ASTERISCO"
break;
case 32:return "ARROBA"
break;
case 33:return "CORA"
break;
case 34:return "CORB"
break;
case 35:return "MAS"
break;
case 36:return "MENOS"
break;
case 37:return "POR"
break;
case 38:return "DIV"
break;
case 39:return "IDIV"
break;
case 40:return "MOD"
break;
case 41:return "MAYORIG"
break;
case 42:return "MENORIG"
break;
case 43:return "DIFERENTE"
break;
case 44:return "MENOR"
break;
case 45:return "MAYOR"
break;
case 46:return "IGUAL"
break;
case 47:return "PIPE"
break;
case 48:return "COMA"
break;
case 49:return "DOLAR"
break;
case 50:return "ADMIRACION"
break;
case 51:return "ARROBA"
break;
case 52:return "DOBLEPUNTO"
break;
case 53:return "PARENTESISA"
break;
case 54:return "PARENTESISC"
break;
case 55:return "INTERROGACIONC"
break;
case 56:return "PUNTO"
break;
case 57:return "DOBLEDOSPUNTOS"
break;
case 58:return "DOSPUNTOS"
break;
case 59:
break;
case 60:
break;
case 61: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:or\b)/i,/^(?:and\b)/i,/^(?:return\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:to\b)/i,/^(?:eq\b)/i,/^(?:ne\b)/i,/^(?:lt\b)/i,/^(?:le\b)/i,/^(?:gt\b)/i,/^(?:ge\b)/i,/^(?:child\b)/i,/^(?:descendant-or-self\b)/i,/^(?:descendant\b)/i,/^(?:attribute\b)/i,/^(?:self\b)/i,/^(?:following-sibling\b)/i,/^(?:following\b)/i,/^(?:namespace\b)/i,/^(?:parent\b)/i,/^(?:ancestor-or-self\b)/i,/^(?:ancestor\b)/i,/^(?:preceding-sibling\b)/i,/^(?:preceding\b)/i,/^(?:(\.[0-9]+)|([0-9]+\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:("[^"]*")|('[^']*'))/i,/^(?:([a-zA-ZñÑ_])([a-zA-ZñÑ0-9_-]|\.)*)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:@)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:div\b)/i,/^(?:idiv\b)/i,/^(?:mod\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\|)/i,/^(?:,)/i,/^(?:\$)/i,/^(?:!)/i,/^(?:@)/i,/^(?:\.\.)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\?)/i,/^(?:\.)/i,/^(?:::)/i,/^(?::)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Xpath;
exports.Parser = Xpath.Parser;
exports.parse = function () { return Xpath.parse.apply(Xpath, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}