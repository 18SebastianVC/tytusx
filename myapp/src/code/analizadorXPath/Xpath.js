/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Xpath = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[1,14],$V2=[1,17],$V3=[1,18],$V4=[1,19],$V5=[1,40],$V6=[1,36],$V7=[1,43],$V8=[1,39],$V9=[1,33],$Va=[1,34],$Vb=[1,35],$Vc=[1,38],$Vd=[1,37],$Ve=[1,44],$Vf=[1,6,68],$Vg=[1,6,9,59,68],$Vh=[1,46],$Vi=[1,6,9,11,59,68],$Vj=[1,48],$Vk=[1,6,9,11,14,15,16,17,18,19,21,59,68],$Vl=[1,56],$Vm=[1,57],$Vn=[1,6,9,11,14,15,16,17,18,19,21,23,25,26,59,68],$Vo=[1,58],$Vp=[1,59],$Vq=[1,60],$Vr=[1,61],$Vs=[1,6,9,11,14,15,16,17,18,19,21,23,25,26,28,29,30,31,59,68],$Vt=[1,67],$Vu=[1,68],$Vv=[1,6,9,11,14,15,16,17,18,19,21,23,25,26,28,29,30,31,37,39,59,68],$Vw=[1,71],$Vx=[1,6,9,11,14,15,16,17,18,19,21,23,25,26,28,29,30,31,37,39,58,59,68],$Vy=[2,54],$Vz=[25,26,35,37,39,48,51,53,55,64,65,66,67,72],$VA=[1,102],$VB=[6,68];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"XPath":3,"Expr":4,"ExprSingle":5,"COMA":6,"OrExpr":7,"AndExpr":8,"ROR":9,"ComparisonExpr":10,"RAND":11,"StringConcatExpr":12,"GeneralComp":13,"IGUAL":14,"DIFERENTE":15,"MENOR":16,"MENORIG":17,"MAYOR":18,"MAYORIG":19,"RangeExpr":20,"OR_EXP":21,"AdditiveExpr":22,"RTO":23,"MultiplicativeExpr":24,"MAS":25,"MENOS":26,"UnaryExpr":27,"POR":28,"DIV":29,"IDIV":30,"MOD":31,"ValueExpr":32,"SimpleMapExpr":33,"PathExpr":34,"SimpleLetClause":35,"ADMIRACION":36,"BARRA":37,"RelativePathExpr":38,"DOBLEBARRA":39,"StepExpr":40,"PostfixExpr":41,"AxisStep":42,"ReverseStep":43,"ForwardStep":44,"PredicateList":45,"Predicate":46,"AbbrevForwardStep":47,"ARROBA":48,"NameTest":49,"NodeTest":50,"NOMBRE":51,"Wildcard":52,"ASTERISCO":53,"AbbrevReverseStep":54,"DOBLEPUNTO":55,"PrimaryExpr":56,"PostfixExprL":57,"CORA":58,"CORB":59,"Literal":60,"FunctionCall":61,"ContextItemExpr":62,"ParenthesizedExpr":63,"INTEGER":64,"DECIMAL":65,"CADENA":66,"PARENTESISA":67,"PARENTESISC":68,"ArgumentList":69,"Argument":70,"INTERROGACIONC":71,"PUNTO":72,"$accept":0,"$end":1},
terminals_: {2:"error",6:"COMA",9:"ROR",11:"RAND",14:"IGUAL",15:"DIFERENTE",16:"MENOR",17:"MENORIG",18:"MAYOR",19:"MAYORIG",21:"OR_EXP",23:"RTO",25:"MAS",26:"MENOS",28:"POR",29:"DIV",30:"IDIV",31:"MOD",35:"SimpleLetClause",36:"ADMIRACION",37:"BARRA",39:"DOBLEBARRA",48:"ARROBA",51:"NOMBRE",53:"ASTERISCO",55:"DOBLEPUNTO",58:"CORA",59:"CORB",64:"INTEGER",65:"DECIMAL",66:"CADENA",67:"PARENTESISA",68:"PARENTESISC",71:"INTERROGACIONC",72:"PUNTO"},
productions_: [0,[3,1],[4,1],[4,3],[5,1],[7,1],[7,3],[8,1],[8,3],[10,1],[10,3],[13,1],[13,1],[13,1],[13,1],[13,1],[13,1],[12,1],[12,3],[20,1],[20,3],[22,1],[22,3],[22,3],[24,1],[24,3],[24,3],[24,3],[24,3],[27,1],[27,2],[27,2],[32,1],[33,1],[33,3],[34,2],[34,2],[34,1],[34,1],[38,1],[38,3],[38,3],[40,1],[40,1],[42,1],[42,1],[42,2],[42,2],[45,1],[45,2],[44,1],[47,2],[47,1],[50,1],[49,1],[49,1],[52,1],[43,1],[54,1],[41,1],[41,2],[57,1],[57,2],[46,3],[56,1],[56,1],[56,1],[56,1],[60,1],[60,1],[60,1],[61,3],[61,4],[69,1],[69,3],[70,1],[70,1],[62,1],[63,2],[63,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$=new Comando($$[$0]);return this.$ 
break;
case 2: case 48:
 this.$=[];this.$.push($$[$0]) 
break;
case 3:
 this.$=$$[$0-2];this.$.push($$[$0]) 
break;
case 4: case 9: case 17: case 19: case 21: case 24: case 29: case 32: case 33: case 42: case 43: case 50: case 53: case 54: case 55: case 56: case 57: case 59: case 61: case 64: case 65: case 66: case 67: case 73: case 75: case 76: case 77:
 this.$=$$[$0] 
break;
case 5: case 7:
 this.$ = $$[$0] 
break;
case 6:
 this.$ = new ExpOr($$[$0-2],$$[$0]) 
break;
case 8:
 this.$ = new ExpAnd($$[$0-2],$$[$0]) 
break;
case 10:
 this.$=$$[$0-1]; this.$.izquierdo = $$[$0-2]; this.$.derecho = $$[$0];
break;
case 11:
 this.$ = new Igual() 		
break;
case 12:
 this.$ = new Diferente() 	
break;
case 13:
 this.$ = new Menor() 		
break;
case 14:
 this.$ = new MenorIgual() 
break;
case 15:
 this.$ = new Mayor() 		
break;
case 16:
 this.$ = new MayorIgual() 
break;
case 35: case 37:
 $$[$0][0].tipo=TipoPath.ABS;this.$=new PathExp($$[$0]) 
break;
case 36:
 $$[$0][0].tipo=TipoPath.REL;this.$=new PathExp($$[$0]) 
break;
case 38:
 this.$=new PathExp([]) 
break;
case 39:
 this.$ = []; this.$.push(new PathExpElement($$[$0],null)); 
break;
case 40:
 this.$ = $$[$0-2]; this.$.push(new PathExpElement($$[$0],TipoPath.ABS))
break;
case 41:
 this.$ = $$[$0-2]; this.$.push(new PathExpElement($$[$0],TipoPath.REL)) 
break;
case 44: case 45:
 this.$=new AxisStepExp($$[$0],[]) 
break;
case 46: case 47:
 this.$=new AxisStepExp($$[$0-1],$$[$0]) 
break;
case 49:
 this.$=$$[$0-1];this.$.push($$[$0]) 
break;
case 51:
 this.$=new Atributo($$[$0]) 
break;
case 52:
 this.$=new Camino($$[$0]) 
break;
case 58:
 this.$=new CaminoInverso($$[$0]) 
break;
case 60: case 63:
 this.$=$$[$0-1] 
break;
case 62: case 78:
 this.$=$$[$0-1]+$$[$0] 
break;
case 68:
 this.$=new Literal(Tipo.INTEGER,$$[$0]) 
break;
case 69:
 this.$=new Literal(Tipo.DECIMAL,$$[$0]) 
break;
case 70:
 this.$=new Literal(Tipo.STRING,$$[$0]) 
break;
case 71: case 74:
 this.$=$$[$0-2]+$$[$0-1]+$$[$0] 
break;
case 72:
 this.$=$$[$0-3]+$$[$0-2]+$$[$0-1]+$$[$0] 
break;
case 79:
 this.$=$$[$0-2]+$$[$0] 
break;
}
},
table: [{3:1,4:2,5:3,7:4,8:5,10:6,12:7,20:8,22:9,24:10,25:$V0,26:$V1,27:11,32:12,33:15,34:16,35:$V2,37:$V3,38:20,39:$V4,40:21,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,72:$Vd},{1:[3]},{1:[2,1],6:$Ve},o($Vf,[2,2]),o([1,6,59,68],[2,4],{9:[1,45]}),o($Vg,[2,5],{11:$Vh}),o($Vi,[2,7]),o($Vi,[2,9],{13:47,14:[1,49],15:[1,50],16:[1,51],17:[1,52],18:[1,53],19:[1,54],21:$Vj}),o($Vk,[2,17]),o($Vk,[2,19],{23:[1,55],25:$Vl,26:$Vm}),o($Vn,[2,21],{28:$Vo,29:$Vp,30:$Vq,31:$Vr}),o($Vs,[2,24]),o($Vs,[2,29]),{25:$V0,26:$V1,27:62,32:12,33:15,34:16,35:$V2,37:$V3,38:20,39:$V4,40:21,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,72:$Vd},{25:$V0,26:$V1,27:63,32:12,33:15,34:16,35:$V2,37:$V3,38:20,39:$V4,40:21,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,72:$Vd},o($Vs,[2,32]),o($Vs,[2,33]),{36:[1,64]},o($Vs,[2,38],{40:21,41:22,42:23,56:24,43:25,44:26,60:27,61:28,62:29,63:30,54:31,47:32,49:41,52:42,38:65,48:$V5,51:$V6,53:$V7,55:$V8,64:$V9,65:$Va,66:$Vb,67:$Vc,72:$Vd}),{38:66,40:21,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,72:$Vd},o($Vs,[2,37],{37:$Vt,39:$Vu}),o($Vv,[2,39]),o($Vv,[2,42]),o($Vv,[2,43]),o($Vv,[2,59],{57:69,46:70,58:$Vw}),o($Vv,[2,44],{45:72,46:73,58:$Vw}),o($Vv,[2,45],{46:73,45:74,58:$Vw}),o($Vx,[2,64]),o($Vx,[2,65]),o($Vx,[2,66]),o($Vx,[2,67]),o($Vx,[2,57]),o($Vx,[2,50]),o($Vx,[2,68]),o($Vx,[2,69]),o($Vx,[2,70]),o($Vx,$Vy,{67:[1,75]}),o($Vx,[2,77]),{4:77,5:3,7:4,8:5,10:6,12:7,20:8,22:9,24:10,25:$V0,26:$V1,27:11,32:12,33:15,34:16,35:$V2,37:$V3,38:20,39:$V4,40:21,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,68:[1,76],72:$Vd},o($Vx,[2,58]),{49:78,51:[1,79],52:42,53:$V7},o($Vx,[2,52]),o($Vx,[2,55]),o($Vx,[2,56]),{5:80,7:4,8:5,10:6,12:7,20:8,22:9,24:10,25:$V0,26:$V1,27:11,32:12,33:15,34:16,35:$V2,37:$V3,38:20,39:$V4,40:21,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,72:$Vd},{8:81,10:6,12:7,20:8,22:9,24:10,25:$V0,26:$V1,27:11,32:12,33:15,34:16,35:$V2,37:$V3,38:20,39:$V4,40:21,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,72:$Vd},{10:82,12:7,20:8,22:9,24:10,25:$V0,26:$V1,27:11,32:12,33:15,34:16,35:$V2,37:$V3,38:20,39:$V4,40:21,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,72:$Vd},{12:83,20:8,22:9,24:10,25:$V0,26:$V1,27:11,32:12,33:15,34:16,35:$V2,37:$V3,38:20,39:$V4,40:21,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,72:$Vd},{20:84,22:9,24:10,25:$V0,26:$V1,27:11,32:12,33:15,34:16,35:$V2,37:$V3,38:20,39:$V4,40:21,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,72:$Vd},o($Vz,[2,11]),o($Vz,[2,12]),o($Vz,[2,13]),o($Vz,[2,14]),o($Vz,[2,15]),o($Vz,[2,16]),{22:85,24:10,25:$V0,26:$V1,27:11,32:12,33:15,34:16,35:$V2,37:$V3,38:20,39:$V4,40:21,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,72:$Vd},{24:86,25:$V0,26:$V1,27:11,32:12,33:15,34:16,35:$V2,37:$V3,38:20,39:$V4,40:21,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,72:$Vd},{24:87,25:$V0,26:$V1,27:11,32:12,33:15,34:16,35:$V2,37:$V3,38:20,39:$V4,40:21,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,72:$Vd},{25:$V0,26:$V1,27:88,32:12,33:15,34:16,35:$V2,37:$V3,38:20,39:$V4,40:21,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,72:$Vd},{25:$V0,26:$V1,27:89,32:12,33:15,34:16,35:$V2,37:$V3,38:20,39:$V4,40:21,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,72:$Vd},{25:$V0,26:$V1,27:90,32:12,33:15,34:16,35:$V2,37:$V3,38:20,39:$V4,40:21,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,72:$Vd},{25:$V0,26:$V1,27:91,32:12,33:15,34:16,35:$V2,37:$V3,38:20,39:$V4,40:21,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,72:$Vd},o($Vs,[2,30]),o($Vs,[2,31]),{34:92,37:$V3,38:20,39:$V4,40:21,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,72:$Vd},o($Vs,[2,35],{37:$Vt,39:$Vu}),o($Vs,[2,36],{37:$Vt,39:$Vu}),{40:93,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,72:$Vd},{40:94,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,72:$Vd},o($Vv,[2,60],{46:95,58:$Vw}),o($Vx,[2,61]),{5:96,7:4,8:5,10:6,12:7,20:8,22:9,24:10,25:$V0,26:$V1,27:11,32:12,33:15,34:16,35:$V2,37:$V3,38:20,39:$V4,40:21,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,72:$Vd},o($Vv,[2,46],{46:97,58:$Vw}),o($Vx,[2,48]),o($Vv,[2,47],{46:97,58:$Vw}),{5:101,7:4,8:5,10:6,12:7,20:8,22:9,24:10,25:$V0,26:$V1,27:11,32:12,33:15,34:16,35:$V2,37:$V3,38:20,39:$V4,40:21,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,68:[1,98],69:99,70:100,71:$VA,72:$Vd},o($Vx,[2,78]),{6:$Ve,68:[1,103]},o($Vx,[2,51]),o($Vx,$Vy),o($Vf,[2,3]),o($Vg,[2,6],{11:$Vh}),o($Vi,[2,8]),o($Vi,[2,10],{21:$Vj}),o($Vk,[2,18]),o($Vk,[2,20],{25:$Vl,26:$Vm}),o($Vn,[2,22],{28:$Vo,29:$Vp,30:$Vq,31:$Vr}),o($Vn,[2,23],{28:$Vo,29:$Vp,30:$Vq,31:$Vr}),o($Vs,[2,25]),o($Vs,[2,26]),o($Vs,[2,27]),o($Vs,[2,28]),o($Vs,[2,34]),o($Vv,[2,40]),o($Vv,[2,41]),o($Vx,[2,62]),{59:[1,104]},o($Vx,[2,49]),o($Vx,[2,71]),{6:[1,106],68:[1,105]},o($VB,[2,73]),o($VB,[2,75]),o($VB,[2,76]),o($Vx,[2,79]),o($Vx,[2,63]),o($Vx,[2,72]),{5:101,7:4,8:5,10:6,12:7,20:8,22:9,24:10,25:$V0,26:$V1,27:11,32:12,33:15,34:16,35:$V2,37:$V3,38:20,39:$V4,40:21,41:22,42:23,43:25,44:26,47:32,48:$V5,49:41,51:$V6,52:42,53:$V7,54:31,55:$V8,56:24,60:27,61:28,62:29,63:30,64:$V9,65:$Va,66:$Vb,67:$Vc,70:107,71:$VA,72:$Vd},o($VB,[2,74])],
defaultActions: {},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  const {Tipo,TipoPath,Comando} = require("./AST/Entorno");
  const {ExpOr,ExpAnd} = require("./Expresion/Logical");
  const {Literal,PathExp,AbsoluthePath,RelativePath,PathExpElement,AxisStepExp,Atributo,Camino,CaminoInverso} = require("./Expresion/Expresiones");
  const {Igual, Diferente, Menor, MenorIgual, Mayor, MayorIgual} = require('./Expresion/Comparison')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return "DECIMAL"
break;
case 1:return "INTEGER"
break;
case 2:return "CADENA"
break;
case 3:return "NOMBRE"
break;
case 4:return "DOBLEBARRA"
break;
case 5:return "BARRA"
break;
case 6:return "ASTERISCO"
break;
case 7:return "ARROBA"
break;
case 8:return "CORA"
break;
case 9:return "CORB"
break;
case 10:return "MAS"
break;
case 11:return "MENOS"
break;
case 12:return "POR"
break;
case 13:return "DIV"
break;
case 14:return "IDIV"
break;
case 15:return "MOD"
break;
case 16:return "MAYORIG"
break;
case 17:return "MENORIG"
break;
case 18:return "DIFERENTE"
break;
case 19:return "MENOR"
break;
case 20:return "MAYOR"
break;
case 21:return "IGUAL"
break;
case 22:return "PIPE"
break;
case 23:return "COMA"
break;
case 24:return "DOLAR"
break;
case 25:return "ADMIRACION"
break;
case 26:return "ARROBA"
break;
case 27:return "DOBLEPUNTO"
break;
case 28:return "PARENTESISA"
break;
case 29:return "PARENTESISC"
break;
case 30:return "INTERROGACIONC"
break;
case 31:return "PUNTO"
break;
case 32:return "ROR"
break;
case 33:return "RAND"
break;
case 34:return "RRETURN"
break;
case 35:return "RFOR"
break;
case 36:return "RIN"
break;
case 37:return "RTO"
break;
case 38:return "EQ"
break;
case 39:return "NE"
break;
case 40:return "LT"
break;
case 41:return "LE"
break;
case 42:return "GT"
break;
case 43:return "GE"
break;
case 44:
break;
case 45:
break;
case 46: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:(\.[0-9]+)|([0-9]+\.[0-9]+))/i,/^(?:[0-9]+)/i,/^(?:("[^"]*")|('[^']*'))/i,/^(?:([a-zA-ZñÑ_])([a-zA-ZñÑ0-9_-]|\.)*)/i,/^(?:\/\/)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:@)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:div\b)/i,/^(?:idiv\b)/i,/^(?:mod\b)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:=)/i,/^(?:\|)/i,/^(?:,)/i,/^(?:\$)/i,/^(?:!)/i,/^(?:@)/i,/^(?:\.\.)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\?)/i,/^(?:\.)/i,/^(?:or\b)/i,/^(?:and\b)/i,/^(?:return\b)/i,/^(?:for\b)/i,/^(?:in\b)/i,/^(?:to\b)/i,/^(?:eq\b)/i,/^(?:ne\b)/i,/^(?:lt\b)/i,/^(?:le\b)/i,/^(?:gt\b)/i,/^(?:ge\b)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Xpath;
exports.Parser = Xpath.Parser;
exports.parse = function () { return Xpath.parse.apply(Xpath, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}